{"version":3,"sources":["chayka-options-form.js","chayka-wp-admin.js"],"names":["angular","module","directive","$timeout","ajax","transclude","controllerAs","scope","namespace","options","bindToController","template","controller","ctrl","validator","processResponse","data","forEach","payload","value","option","saveOptions","validateFields","post","spinnerMessage","success","loadOptions","compile","element","attributes","pre","transcludeFn","$scope","site","meta","factory","queue","multiQueue","cache","bulkDelay","bulkTimeout","resolver","resolveById","id","callback","delay","push","clearTimeout","setTimeout","bulkResolveById","resolveByIds","ids","idsArr","unresolvedIds","resolvedItems","isString","split","parseInt","isArray","i","length","requestQueue","requestMultiQueue","requestedIds","hasOwnProperty","itemSet","post_type","post__in","post_status","posts_per_page","errorMessage","items","item","callbacks","buttons","mediaResolver","nls","modals","restrict","title","pickerButtonText","type","mode","model","size","multiple","itemWidth","itemHeight","itemMode","onChange","$element","buttonClass","getButtonClass","mediaSrc","mediaItems","spinner","prevModel","frame","wp","window","JSON","stringify","$watch","show","_","hide","url","image","thumbnail","newModel","dragControl","orderChanged","event","updateMultiModel","scrollableContainer","attr","hasImages","removeMediaItem","$event","preventDefault","confirm","re","RegExp","replace","trim","values","join","pickMedia","$el","remove","media","button","text","on","selection","state","get","add","attachment","attachments","toJSON","first","$apply","open","clearMedia","utils","defaultColor","palettes","link","attrs","$","onPickerColorChange","change","$parent","ngModel","color","toString","fn","wpColorPicker","$input","insertAfter","val","clear","$inputDiv","parent","$pickerContainer","find","off","keyCode","stopPropagation","jobControl","jobId","perIteration","total","processed","log","setJobId","getJobId","setPerIteration","getPerIteration","setTotal","getTotal","setProcessed","getProcessed","isFinished","setProgress","setState","getState","addLogMessage","message","clearLog","start","$emit","started","pause","paused","resume","resumed","stop","stopped","config","nlsProvider","buttonsProvider","setTranslations","btn_start","btn_stop","btn_pause","btn_resume","label_per_iteration","setButtonClass"],"mappings":"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","file":"ng-modules/chayka-admin.js","sourcesContent":["'use strict';\n\nangular.module('chayka-options-form', ['chayka-forms', 'chayka-wp-admin']).directive('consolePageOptions', ['$timeout', 'ajax', function ($timeout, ajax) {\n    return {\n        transclude: true,\n        controllerAs: 'ctrl',\n        scope: {\n            namespace: '@',\n            options: '=consolePageOptions'\n        },\n        bindToController: true,\n        template: '<div class=\"chayka-options_form\">' + '   <form data-form-validator=\"ctrl.validator\" novalidate=\"novalidate\">' + '       <div class=\"options_form-fields\" data-ng-transclude></div>' + '       <div class=\"options_form-buttons\">' + '           <button type=\"button\" class=\"button button-primary button-large\" data-ng-click=\"ctrl.saveOptions();\">Save</button>' + '       </div>' + '   </form>' + '</div>',\n        controller: function controller() {\n            var ctrl = {\n                /**\n                 * Namespace for options to save\n                 *\n                 * @var {string}\n                 */\n                namespace: '',\n\n                /**\n                 * Hashmap of options to edit\n                 *\n                 * @var {{}}\n                 */\n                options: {},\n\n                /**\n                 * Form validator\n                 *\n                 * @var {{}|null}\n                 */\n                validator: null,\n\n                /**\n                 * Getter and Setter Response processor\n                 *\n                 * @param data\n                 */\n                processResponse: function processResponse(data) {\n                    angular.forEach(data.payload, function (value, option) {\n                        ctrl.options[option] = value;\n                    });\n                },\n\n                /**\n                 * Save options on button click\n                 */\n                saveOptions: function saveOptions() {\n                    if (!ctrl.validator || ctrl.validator.validateFields()) {\n                        ajax.post('/api/options/set', {\n                            namespace: ctrl.namespace,\n                            options: ctrl.options\n                        }, {\n                            spinnerMessage: 'Saving options',\n                            success: ctrl.processResponse\n                        });\n                    }\n                },\n\n                /**\n                 * Load options on form start\n                 */\n                loadOptions: function loadOptions() {\n                    ajax.post('/api/options/get', {\n                        namespace: ctrl.namespace,\n                        options: ctrl.options\n                    }, {\n                        spinnerMessage: 'Loading options',\n                        success: ctrl.processResponse\n                    });\n                }\n            };\n\n            // $timeout(ctrl.loadOptions, 100);\n\n            return ctrl;\n        },\n\n        compile: function compile(element, attributes) {\n\n            return {\n                pre: function pre(scope, element, attributes, controller, transcludeFn) {},\n                post: function post(scope, element, attributes, controller, transcludeFn) {\n                    $timeout(controller.loadOptions, 0);\n                }\n            };\n        }\n    };\n}]).controller('optionsForm', ['$scope', '$timeout', 'ajax', function ($scope, $timeout, ajax) {\n\n    $scope.namespace = '';\n    $scope.options = {\n        site: {}\n    };\n    $scope.validator = null;\n\n    var processResponse = function processResponse(data) {\n        angular.forEach(data.payload, function (value, option) {\n            $scope.options[option] = value;\n        });\n        //$scope.options = data.payload;\n    };\n\n    $scope.saveOptions = function () {\n        if (!$scope.validator || $scope.validator.validateFields()) {\n            ajax.post('/api/options/set', {\n                namespace: $scope.namespace,\n                options: $scope.options\n            }, {\n                spinnerMessage: 'Saving options',\n                success: processResponse\n            });\n        }\n    };\n\n    $scope.loadOptions = function () {\n        ajax.post('/api/options/get', {\n            namespace: $scope.namespace,\n            options: $scope.options\n        }, {\n            spinnerMessage: 'Loading options',\n            success: processResponse\n        });\n    };\n\n    $timeout($scope.loadOptions, 0);\n}]);","'use strict';\n\nangular.module('chayka-wp-admin', ['chayka-spinners', 'chayka-nls', 'chayka-utils', 'chayka-buttons', 'chayka-forms', 'ui.sortable']).controller('metabox', ['$scope', function ($scope) {\n    $scope.meta = {};\n    $scope.validator = null;\n}]).controller('sidebar-widget-form', ['$scope', function ($scope) {\n    $scope.options = {};\n    $scope.validator = null;\n}]).factory('mediaResolver', ['ajax', function (ajax) {\n\n    var queue = {};\n\n    var multiQueue = [];\n\n    var cache = {};\n\n    var bulkDelay = 100;\n\n    var bulkTimeout = null;\n\n    var resolver = {\n\n        /**\n         * Resolve media object by API and pass it to callback.\n         * This function pushes request to the queue to perform bulk api call\n         * @param {int} id\n         * @param {function} callback\n         * @param {int} delay\n         */\n        resolveById: function resolveById(id, callback, delay) {\n            if (cache[id]) {\n                callback(cache[id]);\n                return;\n            }\n            if (!queue[id]) {\n                queue[id] = [];\n            }\n            queue[id].push(callback);\n            if (bulkTimeout) {\n                clearTimeout(bulkTimeout);\n            }\n            bulkTimeout = setTimeout(resolver.bulkResolveById, delay || bulkDelay);\n        },\n\n        /**\n         * Resolve media objects by API and pass it to callback.\n         * This function pushes request to the queue to perform bulk api call\n         * @param {array|string} ids\n         * @param {function} callback\n         * @param {int} delay\n         */\n        resolveByIds: function resolveByIds(ids, callback, delay) {\n            var idsArr;\n            var unresolvedIds = [];\n            var resolvedItems = [];\n            if (angular.isString(ids)) {\n                idsArr = [];\n                ids.split(' ').forEach(function (id) {\n                    idsArr.push(parseInt(id));\n                });\n            }\n            if (angular.isArray(ids)) {\n                idsArr = ids;\n            }\n\n            for (var i = 0; i < idsArr.length; i++) {\n                var id = parseInt(idsArr[i]);\n                idsArr[i] = id;\n                if (cache[id]) {\n                    resolvedItems.push(cache[id]);\n                } else {\n                    unresolvedIds.push(id);\n                }\n            }\n\n            if (!unresolvedIds.length) {\n                callback(resolvedItems);\n                return;\n            }\n\n            multiQueue.push({ ids: idsArr, callback: callback });\n            if (bulkTimeout) {\n                clearTimeout(bulkTimeout);\n            }\n            bulkTimeout = setTimeout(resolver.bulkResolveById, delay || bulkDelay);\n        },\n\n        /**\n         * Resolves all the enqueued media objects and fires all the needed callbacks\n         */\n        bulkResolveById: function bulkResolveById() {\n            var requestQueue = queue;\n            queue = {};\n            var requestMultiQueue = multiQueue;\n            multiQueue = [];\n            var ids = [];\n            var requestedIds = {};\n            for (var id in requestQueue) {\n                if (requestQueue.hasOwnProperty(id)) {\n                    ids.push(id);\n                    requestedIds[id] = true;\n                }\n            }\n            requestMultiQueue.forEach(function (itemSet) {\n                for (var i = 0; i < itemSet.ids.length; i++) {\n                    id = itemSet.ids[i];\n                    if (!cache[id] && !requestedIds[id]) {\n                        ids.push(id);\n                        requestedIds[id] = true;\n                    }\n                }\n            });\n\n            ajax.post('/api/post-models/', {\n                'post_type': 'attachment',\n                'post__in': ids,\n                'post_status': 'any',\n                'posts_per_page': -1\n            }, {\n                spinnerMessage: 'Retrieving media data',\n                errorMessage: 'Failed to retrieve media data',\n                success: function success(data) {\n                    var items = data.payload.items;\n                    items.forEach(function (item) {\n                        cache[item.id] = item;\n                        var callbacks = requestQueue[item.id];\n                        if (callbacks && callbacks.length) {\n                            for (var i = 0; i < callbacks.length; i++) {\n                                callbacks[i](item);\n                            }\n                        }\n                    });\n                    requestMultiQueue.forEach(function (itemSet) {\n                        var items = [],\n                            item,\n                            id;\n                        for (var i = 0; i < itemSet.ids.length; i++) {\n                            id = itemSet.ids[i];\n                            item = cache[id];\n                            if (item) {\n                                items.push(item);\n                            }\n                        }\n                        itemSet.callback(items);\n                    });\n                }\n            });\n        }\n    };\n\n    return resolver;\n}]).directive('mediaPicker', ['buttons', 'mediaResolver', 'nls', 'modals', function (buttons, mediaResolver, nls, modals) {\n    return {\n        restrict: 'AE',\n        scope: {\n            /**\n             * Picker popup title\n             */\n            title: '@?',\n\n            /**\n             * Picker button text (both popup and inline input)\n             */\n            pickerButtonText: '@?',\n\n            /**\n             * Media type: all, images, audio, video\n             */\n            type: '@?',\n\n            /**\n             * Value (model) mode: id|url|object\n             */\n            mode: '@',\n\n            /**\n             * Scope model that is being adjusted\n             */\n            model: '=',\n\n            /**\n             * Image size: thumbnail, medium, large, full.\n             * 'medium' by default, but downgraded to 'thumbnail' for non-image attachments\n             */\n            size: '@',\n\n            /**\n             * Is media picker able to select multiple items\n             */\n            multiple: '@?',\n\n            /**\n             * In case of multiple mode defines width of media item,\n             * If not defined uses item-height or 100px\n             */\n            itemWidth: '@?',\n\n            /**\n             * In case of multiple mode defines height of media item,\n             * If not defined uses item-width or 100px\n             */\n            itemHeight: '@?',\n\n            /**\n             * Item background mode:\n             * - contain\n             * - cover\n             */\n            itemMode: '@?',\n\n            /**\n             * On model change callback\n             */\n            onChange: '&?'\n        },\n        transclude: true,\n        template: '<div class=\"chayka-media_picker\" data-ng-class=\"{\\'image-set\\': hasImages(), multiple: multiple}\">' + '<img data-ng-src=\"{{mediaSrc}}\" data-ng-show=\"!!mediaSrc\" data-ng-click=\"pickMedia();\"/>' + '<div class=\"media_items sortable-row\" data-ng-show=\"mediaItems && mediaItems.length\" data-ng-model=\"mediaItems\" data-as-sortable=\"dragControl\" >' + '<div class=\"media_item\" data-ng-class=\"{contain: itemMode === \\'contain\\', cover: itemMode === \\'cover\\'}\" data-ng-repeat=\"item in mediaItems\" data-as-sortable-item style=\"background-image: {{\\'url(\\'+item.url+\\')\\'}}; width: {{itemWidth || itemHeight || \\'100px\\'}}; height: {{itemHeight || itemWidth || \\'100px\\'}};\">' + '<div class=\"sortable-handle\" data-as-sortable-item-handle>' + '<button class=\"btn_remove\" data-ng-click=\"removeMediaItem($event, item)\" data-no-drag ><span>&times;</span></button>' + '</div>' + '</div>' + '</div>' + '<div class=\"no_image\" data-ng-click=\"pickMedia();\" data-ng-show=\"!hasImages()\">' + '   <div data-spinner=\"spinner\"></div>' + '</div>' + '<div class=\"note\" data-ng-transclude></div>' + '<div class=\"buttons\">' + '   <button class=\"{{buttonClass}} btn_clear\" data-ng-click=\"clearMedia($event);\" data-ng-show=\"!!hasImages()\" >{{ \"Clear\" | nls}}</button>' + '   <button class=\"{{buttonClass}} btn_pick\" data-ng-click=\"pickMedia($event);\">{{ pickerButtonText || \"Browse\" | nls}}</button>' + '</div>' + '</div>',\n        controller: function controller($scope, $element) {\n            $scope.buttonClass = buttons.getButtonClass();\n            $scope.mediaSrc = null;\n            $scope.mediaItems = [];\n            $scope.mode = $scope.mode || 'id';\n            $scope.size = $scope.size || 'medium';\n            $scope.spinner = null;\n            $scope.prevModel = '';\n\n            var frame = null;\n            var wp = window.wp;\n\n            $scope.prevModel = $scope.model ? JSON.stringify($scope.model) : '';\n\n            /**\n             * Watch madel, request items by ids and render them\n             */\n            $scope.$watch('model', function (model) {\n                if ($scope.multiple) {\n                    switch ($scope.mode) {\n                        case 'id':\n                            $scope.mediaSrc = '';\n                            $scope.mediaItems = [];\n                            if (model) {\n                                if ($scope.spinner) {\n                                    $scope.spinner.show(nls._('Retrieving media data...'));\n                                }\n                                mediaResolver.resolveByIds(model, function (items) {\n                                    if ($scope.spinner) {\n                                        $scope.spinner.hide();\n                                    }\n                                    items.forEach(function (item) {\n                                        $scope.mediaItems.push({\n                                            id: item.id,\n                                            url: (item.image[$scope.size] || item.image.thumbnail).url\n                                        });\n                                    });\n                                });\n                            }\n                            break;\n                        case 'url':\n                            model.split(' ').forEach(function (url) {\n                                $scope.mediaItems.push({\n                                    id: 0,\n                                    url: url\n                                });\n                            });\n\n                            break;\n                    }\n                } else {\n                    switch ($scope.mode) {\n                        case 'id':\n                            $scope.mediaSrc = '';\n                            $scope.mediaItems = [];\n                            model = parseInt(model);\n                            if (model) {\n                                if ($scope.spinner) {\n                                    $scope.spinner.show(nls._('Retrieving media data...'));\n                                }\n                                mediaResolver.resolveById(model, function (item) {\n                                    if ($scope.spinner) {\n                                        $scope.spinner.hide();\n                                    }\n                                    //media = item;\n                                    $scope.mediaSrc = (item.image[$scope.size] || item.image.thumbnail).url;\n                                });\n                            }\n                            break;\n                        case 'url':\n                            $scope.mediaSrc = model;\n                            break;\n                    }\n                }\n\n                var newModel = model ? JSON.stringify(model) : '';\n                if ($scope.onChange && newModel !== $scope.prevModel) {\n                    $scope.onChange();\n                }\n\n                $scope.prevModel = newModel;\n            });\n\n            /**\n             * ng-sortable options\n             *\n             * @type {{orderChanged: Function, scrollableContainer: *}}\n             */\n            $scope.dragControl = {\n                //accept: function (sourceItemHandleScope, destSortableScope) {return true;},//override to determine drag is allowed or not. default is true.\n                //itemMoved: function (event) {},\n                orderChanged: function orderChanged(event) {\n                    $scope.updateMultiModel($scope.mediaItems);\n                },\n                //containerPositioning: 'absolute'\n                scrollableContainer: $element.attr('id') //optional param.\n            };\n\n            /**\n             * Check if images are stt\n             * @return {boolean}\n             */\n            $scope.hasImages = function () {\n                return !!$scope.mediaItems && !!$scope.mediaItems.length || !!$scope.mediaSrc;\n            };\n\n            /**\n             * Remover media item in multiple mode\n             * @param $event\n             * @param {{id: int, url: string}} item\n             */\n            $scope.removeMediaItem = function ($event, item) {\n                $event.preventDefault();\n                modals.confirm(nls._('Delete this item?'), function () {\n                    var value = '';\n                    switch ($scope.mode) {\n                        case 'id':\n                            value = item.id;\n                            break;\n                        case 'url':\n                            value = item.url;\n                            break;\n                    }\n                    var re = new RegExp('\\\\b' + value + '\\\\b\\\\s?');\n                    $scope.model = $scope.model.replace(re, '').trim();\n                });\n            };\n\n            /**\n             * Update model in multiple mode\n             *\n             * @param items\n             */\n            $scope.updateMultiModel = function (items) {\n                var values = [];\n                items.forEach(function (item) {\n                    switch ($scope.mode) {\n                        case 'id':\n                            values.push(item.id);\n                            break;\n                        case 'url':\n                            values.push(item.url);\n                            break;\n                    }\n                });\n                $scope.model = values.join(' ');\n            };\n\n            /**\n             * Pick media\n             * @param $event\n             */\n            $scope.pickMedia = function ($event) {\n                if ($event && $event.preventDefault) {\n                    $event.preventDefault();\n                }\n                if (frame) {\n                    frame.$el.remove();\n                }\n                if (true || !frame) {\n                    frame = wp.media({\n                        title: nls._($scope.title || 'Select or Upload Media'),\n                        button: {\n                            text: nls._($scope.pickerButtonText || 'Use this media')\n                        },\n                        multiple: $scope.multiple // Set to true to allow multiple files to be selected\n                    });\n\n                    frame.on('open', function () {\n                        if ($scope.mode === 'id') {\n                            var selection = frame.state().get('selection');\n                            if ($scope.model) {\n                                if ($scope.multiple) {\n                                    $scope.model.split(' ').forEach(function (id) {\n                                        selection.add(wp.media.attachment(id));\n                                    });\n                                } else {\n                                    selection.add(wp.media.attachment($scope.model));\n                                }\n                            }\n                        }\n                    });\n\n                    // When an image is selected in the media frame...\n                    frame.on('select', function () {\n                        // Get media attachment details from the frame state\n                        if ($scope.multiple) {\n                            var attachments = frame.state().get('selection').toJSON();\n                            $scope.updateMultiModel(attachments);\n                        } else {\n                            var attachment = frame.state().get('selection').first().toJSON();\n\n                            switch ($scope.mode) {\n                                case 'id':\n                                    $scope.model = attachment.id;\n                                    break;\n                                case 'url':\n                                    $scope.model = attachment.url;\n                                    break;\n                            }\n                        }\n                        $scope.$apply();\n                    });\n\n                    // Finally, open the modal on click\n                    frame.open();\n                    frame.$el.show();\n                }\n            };\n\n            /**\n             * Reset state to no media selected\n             *\n             * @param $event\n             */\n            $scope.clearMedia = function ($event) {\n                $event.preventDefault();\n                if ($scope.multiple && $scope.mediaItems.length > 3) {\n                    modals.confirm(nls._('Remove media items?'), function () {\n                        $scope.model = '';\n                    });\n                } else {\n                    $scope.model = '';\n                }\n            };\n        }\n    };\n}]).directive('colorPicker', ['utils', function (utils) {\n    return {\n        restrict: 'AE',\n        scope: {\n            defaultColor: '@?',\n            palettes: '=?'\n        },\n        link: function link($scope, element, attrs) {\n            var $ = angular.element,\n                $element = $(element);\n\n            var onPickerColorChange = function onPickerColorChange(event, change) {\n                setTimeout(function () {\n                    $scope.$parent.$apply(attrs.ngModel + '=\"' + (change && change.color.toString() || '') + '\";');\n                }, 0);\n            };\n            if ($.fn.wpColorPicker) {\n                $element.attr('type', 'hidden');\n                var $input = $('<input type=\"text\">').insertAfter(element).val($element.val()).wpColorPicker({\n                    defaultColor: $scope.defaultColor,\n                    hide: true,\n                    palettes: $scope.palettes,\n                    change: onPickerColorChange,\n                    clear: onPickerColorChange\n                });\n                $scope.$parent.$watch(attrs.ngModel, function (value) {\n                    if (value !== $input.val()) {\n                        $input.wpColorPicker('color', value);\n                    }\n                });\n                var $inputDiv = $element.parent(),\n                    $pickerContainer = $inputDiv.find('.wp-picker-container'),\n                    $pickerColorButton = $pickerContainer.find('.wp-color-result'),\n                    $pickerInputWrap = $pickerContainer.find('.wp-picker-input-wrap'),\n                    $pickerHolder = $pickerContainer.find('.wp-picker-holder');\n                $pickerContainer.off('keyup', '*');\n                $input.off('keyup').on('keyup', function (event) {\n                    if (event.keyCode === 13 || event.keyCode === 32) {\n                        event.preventDefault();\n                        event.stopPropagation();\n                        //$pickerColorButton.trigger( 'click' );//.next().focus();\n                        $input.wpColorPicker('close');\n                    }\n                });\n\n                //$pickerColorButton.appendTo($inputDiv);\n            }\n        }\n    };\n}]).directive('jobControl', [function () {\n    return {\n        restrict: 'AE',\n        scope: {\n            jobControl: '=',\n            jobId: '=?',\n            perIteration: '=?',\n            buttons: '@?'\n        },\n        controllerAs: 'jc',\n        template: '<div class=\"chayka-job_control {{jc.state}}\">' + '   <div class=\"progressbar\">' + '       <div class=\"progress_label\">{{ jc.total ? jc.processed + \" / \" + jc.total + \" (\" + Math.floor(jc.processed / jc.total * 100) + \"%)\" : \"0%\" }}</div>' + '   </div>' + '   <div class=\"box_controls\">' + '       <button class=\"dashicons-before dashicons-controls-play button button-small button_start\" data-ng-click=\"jc.start()\" title=\"{{ \\'btn_start\\' | nls }}\" data-ng-show=\"!jc.state && jc.buttons.indexOf(\\'start\\') >= 0\"></button>' + '       <button class=\"dashicons-before dashicons-controls-pause button button-small button_pause\" data-ng-click=\"jc.pause()\" title=\"{{ \\'btn_pause\\' | nls }}\" data-ng-show=\"jc.state===\\'running\\' && jc.buttons.indexOf(\\'pause\\') >= 0\"></button>' + '       <button class=\"dashicons-before dashicons-controls-repeat button button-small button_resume\" data-ng-click=\"jc.resume()\" title=\"{{ \\'btn_resume\\' | nls }}\" data-ng-show=\"jc.state===\\'paused\\' && jc.buttons.indexOf(\\'resume\\') >= 0\"></button>' + '       <button class=\"dashicons-before dashicons-no button button-small button_stop\" data-ng-click=\"jc.stop()\" title=\"{{ \\'btn_stop\\' | nls }}\" data-ng-show=\"jc.state && jc.buttons.indexOf(\\'stop\\') >= 0\"></button>' + '       <span class=\"field_items_per_iteration\">' + '           <label>{{ \"label_per_iteration\" | nls }}</label>' + '           <input type=\"number\" data-ng-model=\"jc.perIteration\"/>' + '       </span>' + '   </div>' + '   <div data-spinner=\"spinner\"></div>' + '   <div class=\"box_output\">' + '       <div data-ng-repeat=\"message in jc.log track by $index\" class=\"message\">{{message}}</div>' + '   </div>' + '</div>',\n\n        controller: function controller($scope) {\n            var ctrl = {\n                jobId: $scope.jobId,\n                state: '',\n                perIteration: $scope.perIteration || 10,\n                total: 100,\n                processed: 0,\n                log: [],\n                buttons: $scope.buttons ? $scope.buttons.split(' ') : ['start', 'pause', 'resume', 'stop'],\n\n                setJobId: function setJobId(val) {\n                    ctrl.jobId = val;\n                    return ctrl;\n                },\n\n                getJobId: function getJobId() {\n                    return ctrl.jobId;\n                },\n\n                setPerIteration: function setPerIteration(val) {\n                    ctrl.perIteration = val;\n                    return ctrl;\n                },\n\n                getPerIteration: function getPerIteration() {\n                    return ctrl.perIteration;\n                },\n\n                setTotal: function setTotal(val) {\n                    ctrl.total = val;\n                    return ctrl;\n                },\n\n                getTotal: function getTotal() {\n                    return ctrl.total;\n                },\n\n                setProcessed: function setProcessed(val) {\n                    ctrl.processed = val;\n                    return ctrl;\n                },\n\n                getProcessed: function getProcessed() {\n                    return ctrl.processed;\n                },\n\n                isFinished: function isFinished() {\n                    return ctrl.getTotal() === ctrl.getProcessed();\n                },\n\n                setProgress: function setProgress(processed, total) {\n                    ctrl.setProcessed(processed);\n                    ctrl.setTotal(total || ctrl.getTotal() || 100);\n                    if (ctrl.isFinished()) {\n                        ctrl.setState('finished');\n                    }\n                    return ctrl;\n                },\n\n                setState: function setState(val) {\n                    ctrl.state = val;\n                    return ctrl;\n                },\n\n                getState: function getState() {\n                    return ctrl.state;\n                },\n\n                addLogMessage: function addLogMessage(message) {\n                    ctrl.log.push(message);\n                },\n\n                clearLog: function clearLog() {\n                    ctrl.log = [];\n                },\n\n                start: function start() {\n                    $scope.$emit('JobControl.start', ctrl.jobId);\n                },\n\n                started: function started() {\n                    ctrl.setState('running');\n                },\n\n                pause: function pause() {\n                    $scope.$emit('JobControl.pause', ctrl.jobId);\n                },\n\n                paused: function paused() {\n                    ctrl.setState('paused');\n                },\n\n                resume: function resume() {\n                    $scope.$emit('JobControl.resume', ctrl.jobId);\n                },\n\n                resumed: function resumed() {\n                    ctrl.setState('running');\n                },\n\n                stop: function stop() {\n                    $scope.$emit('JobControl.stop', ctrl.jobId);\n                },\n\n                stopped: function stopped() {\n                    ctrl.setState('');\n                }\n            };\n\n            $scope.jobControl = ctrl;\n\n            return ctrl;\n        }\n    };\n}]).config(['nlsProvider', 'buttonsProvider', function (nlsProvider, buttonsProvider) {\n\n    // Adding a translation table for the English language\n    nlsProvider.setTranslations('en-US', {\n        'btn_start': 'Start',\n        'btn_stop': 'Stop',\n        'btn_pause': 'Pause',\n        'btn_resume': 'Resume',\n        'label_per_iteration': 'Per iteration'\n    });\n\n    nlsProvider.setTranslations('ru-RU', {\n        'btn_start': 'Старт',\n        'btn_stop': 'Стоп',\n        'btn_pause': 'Пауза',\n        'btn_resume': 'Возобновить',\n        'label_per_iteration': 'За итерацию'\n    });\n\n    buttonsProvider.setButtonClass('button');\n}]);"],"sourceRoot":"/source/"}