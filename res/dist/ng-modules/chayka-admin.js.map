{"version":3,"sources":["chayka-wp-admin.js"],"names":["angular","module","controller","$scope","meta","validator","options","directive","$timeout","ajax","transclude","controllerAs","scope","namespace","bindToController","template","ctrl","processResponse","data","forEach","payload","value","option","saveOptions","validateFields","post","spinnerMessage","success","loadOptions","compile","element","attributes","pre","transcludeFn","site","factory","queue","multiQueue","cache","bulkDelay","bulkTimeout","resolver","resolveById","id","callback","delay","push","clearTimeout","setTimeout","bulkResolveById","resolveByIds","ids","idsArr","unresolvedIds","resolvedItems","isString","split","parseInt","isArray","i","length","requestQueue","requestMultiQueue","requestedIds","hasOwnProperty","itemSet","post_type","post__in","post_status","posts_per_page","errorMessage","items","item","callbacks","buttons","mediaResolver","nls","modals","restrict","title","pickerButtonText","type","mode","model","size","multiple","itemWidth","itemHeight","itemMode","onChange","$element","buttonClass","getButtonClass","mediaSrc","mediaItems","spinner","prevModel","frame","wp","window","JSON","stringify","$watch","show","_","hide","url","image","thumbnail","newModel","dragControl","orderChanged","event","updateMultiModel","scrollableContainer","attr","hasImages","removeMediaItem","$event","preventDefault","confirm","re","RegExp","replace","trim","values","join","pickMedia","$el","remove","media","button","text","on","selection","state","get","add","attachment","attachments","toJSON","first","$apply","open","clearMedia","utils","defaultColor","palettes","link","attrs","$","onPickerColorChange","change","$parent","ngModel","color","toString","fn","wpColorPicker","$input","insertAfter","val","clear","$inputDiv","parent","$pickerContainer","find","off","keyCode","stopPropagation","jobControl","jobId","perIteration","total","processed","log","setJobId","getJobId","setPerIteration","getPerIteration","setTotal","getTotal","setProcessed","getProcessed","isFinished","setProgress","setState","getState","addLogMessage","message","clearLog","start","$emit","started","pause","paused","resume","resumed","stop","stopped","config","nlsProvider","buttonsProvider","setTranslations","btn_start","btn_stop","btn_pause","btn_resume","label_per_iteration","setButtonClass"],"mappings":"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","file":"chayka-admin.js","sourcesContent":["'use strict';\n\nangular.module('chayka-wp-admin', ['chayka-spinners', 'chayka-nls', 'chayka-utils', 'chayka-buttons', 'chayka-forms', 'ui.sortable'])\n    .controller('metabox', ['$scope', function($scope){\n        $scope.meta = {};\n        $scope.validator = null;\n    }])\n    .controller('sidebar-widget-form', ['$scope', function($scope){\n        $scope.options = {};\n        $scope.validator = null;\n    }])\n    .directive('consolePageOptions', ['$timeout', 'ajax', function($timeout, ajax){\n        return {\n            transclude: true,\n            controllerAs: 'ctrl',\n            scope: {\n                namespace: '@',\n                options: '=consolePageOptions'\n            },\n            bindToController: true,\n            template:\n            '<div class=\"chayka-options_form\">' +\n            '   <form data-form-validator=\"ctrl.validator\" novalidate=\"novalidate\">' +\n            '       <div class=\"options_form-fields\" data-ng-transclude></div>' +\n            '       <div class=\"options_form-buttons\">' +\n            '           <button type=\"button\" class=\"button button-primary button-large\" data-ng-click=\"ctrl.saveOptions();\">Save</button>' +\n            '       </div>' +\n            '   </form>' +\n            '</div>',\n            controller: function(){\n                var ctrl = {\n                    /**\n                     * Namespace for options to save\n                     *\n                     * @var {string}\n                     */\n                    namespace: '',\n\n                    /**\n                     * Hashmap of options to edit\n                     *\n                     * @var {{}}\n                     */\n                    options: {},\n\n                    /**\n                     * Form validator\n                     *\n                     * @var {{}|null}\n                     */\n                    validator: null,\n\n                    /**\n                     * Getter and Setter Response processor\n                     *\n                     * @param data\n                     */\n                    processResponse: function(data){\n                        angular.forEach(data.payload, function(value, option){\n                            ctrl.options[option] = value;\n                        });\n                    },\n\n                    /**\n                     * Save options on button click\n                     */\n                    saveOptions: function(){\n                        if(!ctrl.validator || ctrl.validator.validateFields()){\n                            ajax.post('/api/options/set', {\n                                namespace: ctrl.namespace,\n                                options: ctrl.options\n                            },{\n                                spinnerMessage: 'Saving options',\n                                success: ctrl.processResponse\n                            });\n                        }\n                    },\n\n                    /**\n                     * Load options on form start\n                     */\n                    loadOptions: function(){\n                        ajax.post('/api/options/get', {\n                            namespace: ctrl.namespace,\n                            options: ctrl.options\n                        },{\n                            spinnerMessage: 'Loading options',\n                            success: ctrl.processResponse\n                        });\n                    }\n                };\n\n                // $timeout(ctrl.loadOptions, 100);\n\n                return ctrl;\n            },\n\n            compile: function(element, attributes){\n\n                return {\n                    pre: function(scope, element, attributes, controller, transcludeFn){\n\n                    },\n                    post: function(scope, element, attributes, controller, transcludeFn){\n                        $timeout(controller.loadOptions, 0);\n                    }\n                };\n            }\n        };\n    }])\n    /**\n     * @deprecated\n     */\n    .controller('optionsForm', ['$scope', '$timeout', 'ajax', function($scope, $timeout, ajax){\n\n        $scope.namespace = '';\n        $scope.options = {\n            site: {}\n        };\n        $scope.validator = null;\n\n        var processResponse = function(data){\n            angular.forEach(data.payload, function(value, option){\n                $scope.options[option] = value;\n            });\n            //$scope.options = data.payload;\n        };\n\n        $scope.saveOptions = function(){\n            if(!$scope.validator || $scope.validator.validateFields()){\n                ajax.post('/api/options/set', {\n                    namespace: $scope.namespace,\n                    options: $scope.options\n                },{\n                    spinnerMessage: 'Saving options',\n                    success: processResponse\n                });\n            }\n        };\n\n        $scope.loadOptions = function(){\n            ajax.post('/api/options/get', {\n                namespace: $scope.namespace,\n                options: $scope.options\n            },{\n                spinnerMessage: 'Loading options',\n                success: processResponse\n            });\n        };\n\n        $timeout($scope.loadOptions, 0);\n\n    }])\n    .factory('mediaResolver', ['ajax', function(ajax){\n\n        var queue = {};\n\n        var multiQueue = [];\n\n        var cache = {};\n\n        var bulkDelay = 100;\n\n        var bulkTimeout = null;\n\n        var resolver = {\n\n            /**\n             * Resolve media object by API and pass it to callback.\n             * This function pushes request to the queue to perform bulk api call\n             * @param {int} id\n             * @param {function} callback\n             * @param {int} delay\n             */\n            resolveById: function(id, callback, delay){\n                if(cache[id]){\n                    callback(cache[id]);\n                    return;\n                }\n                if(!queue[id]){\n                    queue[id] = [];\n                }\n                queue[id].push(callback);\n                if(bulkTimeout){\n                    clearTimeout(bulkTimeout);\n                }\n                bulkTimeout = setTimeout(resolver.bulkResolveById, delay || bulkDelay);\n            },\n\n            /**\n             * Resolve media objects by API and pass it to callback.\n             * This function pushes request to the queue to perform bulk api call\n             * @param {array|string} ids\n             * @param {function} callback\n             * @param {int} delay\n             */\n            resolveByIds: function(ids, callback, delay){\n                var idsArr;\n                var unresolvedIds = [];\n                var resolvedItems = [];\n                if(angular.isString(ids)){\n                    idsArr = [];\n                    ids.split(' ').forEach( function(id){\n                        idsArr.push(parseInt(id));\n                    });\n                }\n                if(angular.isArray(ids)){\n                    idsArr = ids;\n                }\n\n                for(var i=0; i < idsArr.length; i++){\n                    var id = parseInt(idsArr[i]);\n                    idsArr[i] = id;\n                    if(cache[id]){\n                        resolvedItems.push(cache[id]);\n                    }else{\n                        unresolvedIds.push(id);\n                    }\n                }\n\n                if(!unresolvedIds.length) {\n                    callback(resolvedItems);\n                    return;\n                }\n\n                multiQueue.push({ids: idsArr, callback: callback});\n                if(bulkTimeout){\n                    clearTimeout(bulkTimeout);\n                }\n                bulkTimeout = setTimeout(resolver.bulkResolveById, delay || bulkDelay);\n            },\n\n            /**\n             * Resolves all the enqueued media objects and fires all the needed callbacks\n             */\n            bulkResolveById: function(){\n                var requestQueue = queue;\n                queue = {};\n                var requestMultiQueue = multiQueue;\n                multiQueue = [];\n                var ids = [];\n                var requestedIds = {};\n                for(var id in requestQueue){\n                    if(requestQueue.hasOwnProperty(id)){\n                        ids.push(id);\n                        requestedIds[id]=true;\n                    }\n                }\n                requestMultiQueue.forEach(function(itemSet){\n                    for(var i=0; i < itemSet.ids.length; i++){\n                        id = itemSet.ids[i];\n                        if(!cache[id] && !requestedIds[id]){\n                            ids.push(id);\n                            requestedIds[id]=true;\n                        }\n                    }\n                });\n\n                ajax.post(\n                    '/api/post-models/',\n                    {\n                        'post_type': 'attachment',\n                        'post__in': ids,\n                        'post_status': 'any',\n                        'posts_per_page': -1\n                    },\n                    {\n                        spinnerMessage: 'Retrieving media data',\n                        errorMessage: 'Failed to retrieve media data',\n                        success: function(data){\n                            var items = data.payload.items;\n                            items.forEach(function(item){\n                                cache[item.id] = item;\n                                var callbacks = requestQueue[item.id];\n                                if(callbacks && callbacks.length) {\n                                    for (var i = 0; i < callbacks.length; i++) {\n                                        callbacks[i](item);\n                                    }\n                                }\n                            });\n                            requestMultiQueue.forEach(function(itemSet){\n                                var items = [], item, id;\n                                for(var i=0; i<itemSet.ids.length; i++){\n                                    id = itemSet.ids[i];\n                                    item = cache[id];\n                                    if(item){\n                                        items.push(item);\n                                    }\n                                }\n                                itemSet.callback(items);\n                            });\n                        }\n                    }\n                );\n            }\n        };\n\n        return resolver;\n    }])\n    .directive('mediaPicker', ['buttons', 'mediaResolver', 'nls', 'modals', function(buttons, mediaResolver, nls, modals){\n        return {\n            restrict: 'AE',\n            scope: {\n                /**\n                 * Picker popup title\n                 */\n                title: '@?',\n\n                /**\n                 * Picker button text (both popup and inline input)\n                 */\n                pickerButtonText: '@?',\n\n                /**\n                 * Media type: all, images, audio, video\n                 */\n                type: '@?',\n\n                /**\n                 * Value (model) mode: id|url|object\n                 */\n                mode: '@',\n\n                /**\n                 * Scope model that is being adjusted\n                 */\n                model: '=',\n\n                /**\n                 * Image size: thumbnail, medium, large, full.\n                 * 'medium' by default, but downgraded to 'thumbnail' for non-image attachments\n                 */\n                size: '@',\n\n                /**\n                 * Is media picker able to select multiple items\n                 */\n                multiple: '@?',\n\n                /**\n                 * In case of multiple mode defines width of media item,\n                 * If not defined uses item-height or 100px\n                 */\n                itemWidth: '@?',\n\n                /**\n                 * In case of multiple mode defines height of media item,\n                 * If not defined uses item-width or 100px\n                 */\n                itemHeight: '@?',\n\n                /**\n                 * Item background mode:\n                 * - contain\n                 * - cover\n                 */\n                itemMode: '@?',\n\n                /**\n                 * On model change callback\n                 */\n                onChange: '&?'\n            },\n            transclude: true,\n            template:\n                '<div class=\"chayka-media_picker\" data-ng-class=\"{\\'image-set\\': hasImages(), multiple: multiple}\">' +\n                '<img data-ng-src=\"{{mediaSrc}}\" data-ng-show=\"!!mediaSrc\" data-ng-click=\"pickMedia();\"/>' +\n                '<div class=\"media_items sortable-row\" data-ng-show=\"mediaItems && mediaItems.length\" data-ng-model=\"mediaItems\" data-as-sortable=\"dragControl\" >' +\n                '<div class=\"media_item\" data-ng-class=\"{contain: itemMode === \\'contain\\', cover: itemMode === \\'cover\\'}\" data-ng-repeat=\"item in mediaItems\" data-as-sortable-item style=\"background-image: {{\\'url(\\'+item.url+\\')\\'}}; width: {{itemWidth || itemHeight || \\'100px\\'}}; height: {{itemHeight || itemWidth || \\'100px\\'}};\">' +\n                '<div class=\"sortable-handle\" data-as-sortable-item-handle>' +\n                '<button class=\"btn_remove\" data-ng-click=\"removeMediaItem($event, item)\" data-no-drag ><span>&times;</span></button>' +\n                '</div>' +\n                '</div>' +\n                '</div>' +\n                '<div class=\"no_image\" data-ng-click=\"pickMedia();\" data-ng-show=\"!hasImages()\">' +\n                '   <div data-spinner=\"spinner\"></div>' +\n                '</div>' +\n                '<div class=\"note\" data-ng-transclude></div>' +\n                '<div class=\"buttons\">' +\n                '   <button class=\"{{buttonClass}} btn_clear\" data-ng-click=\"clearMedia($event);\" data-ng-show=\"!!hasImages()\" >{{ \"Clear\" | nls}}</button>' +\n                '   <button class=\"{{buttonClass}} btn_pick\" data-ng-click=\"pickMedia($event);\">{{ pickerButtonText || \"Browse\" | nls}}</button>' +\n                '</div>' +\n                '</div>',\n            controller: function($scope, $element){\n                $scope.buttonClass = buttons.getButtonClass();\n                $scope.mediaSrc = null;\n                $scope.mediaItems = [];\n                $scope.mode = $scope.mode || 'id';\n                $scope.size = $scope.size || 'medium';\n                $scope.spinner = null;\n                $scope.prevModel = '';\n\n                var frame = null;\n                var wp = window.wp;\n\n                $scope.prevModel = $scope.model?JSON.stringify($scope.model):'';\n\n\n                /**\n                 * Watch madel, request items by ids and render them\n                 */\n                $scope.$watch('model', function(model){\n                    if($scope.multiple){\n                        switch ($scope.mode){\n                            case 'id':\n                                $scope.mediaSrc = '';\n                                $scope.mediaItems = [];\n                                if(model){\n                                    if($scope.spinner){\n                                        $scope.spinner.show(nls._('Retrieving media data...'));\n                                    }\n                                    mediaResolver.resolveByIds(model, function(items){\n                                        if($scope.spinner){\n                                            $scope.spinner.hide();\n                                        }\n                                        items.forEach(function(item){\n                                            $scope.mediaItems.push({\n                                                id: item.id,\n                                                url:(item.image[$scope.size] || item.image.thumbnail).url\n                                            });\n                                        });\n                                    });\n                                }\n                                break;\n                            case 'url':\n                                model.split(' ').forEach(function(url){\n                                    $scope.mediaItems.push({\n                                        id: 0,\n                                        url: url\n                                    });\n                                });\n\n                                break;\n                        }\n\n                    }else{\n                        switch ($scope.mode){\n                            case 'id':\n                                $scope.mediaSrc = '';\n                                $scope.mediaItems = [];\n                                model = parseInt(model);\n                                if(model){\n                                    if($scope.spinner){\n                                        $scope.spinner.show(nls._('Retrieving media data...'));\n                                    }\n                                    mediaResolver.resolveById(model, function(item){\n                                        if($scope.spinner){\n                                            $scope.spinner.hide();\n                                        }\n                                        //media = item;\n                                        $scope.mediaSrc = (item.image[$scope.size] || item.image.thumbnail).url;\n                                    });\n                                }\n                                break;\n                            case 'url':\n                                $scope.mediaSrc = model;\n                                break;\n                        }\n\n                    }\n\n                    var newModel = model?JSON.stringify(model):'';\n                    if($scope.onChange && newModel !== $scope.prevModel){\n                        $scope.onChange();\n                    }\n\n                    $scope.prevModel = newModel;\n                });\n\n                /**\n                 * ng-sortable options\n                 *\n                 * @type {{orderChanged: Function, scrollableContainer: *}}\n                 */\n                $scope.dragControl = {\n                    //accept: function (sourceItemHandleScope, destSortableScope) {return true;},//override to determine drag is allowed or not. default is true.\n                    //itemMoved: function (event) {},\n                    orderChanged: function(event){\n                        $scope.updateMultiModel($scope.mediaItems);\n                    },\n                    //containerPositioning: 'absolute'\n                    scrollableContainer: $element.attr('id')//optional param.\n                };\n\n                /**\n                 * Check if images are stt\n                 * @return {boolean}\n                 */\n                $scope.hasImages = function(){\n                    return !!$scope.mediaItems && !!$scope.mediaItems.length || !!$scope.mediaSrc;\n                };\n\n                /**\n                 * Remover media item in multiple mode\n                 * @param $event\n                 * @param {{id: int, url: string}} item\n                 */\n                $scope.removeMediaItem = function($event, item){\n                    $event.preventDefault();\n                    modals.confirm(nls._('Delete this item?'), function(){\n                        var value = '';\n                        switch ($scope.mode){\n                            case 'id':\n                                value = item.id;\n                                break;\n                            case 'url':\n                                value = item.url;\n                                break;\n                        }\n                        var re = new RegExp('\\\\b'+value+'\\\\b\\\\s?');\n                        $scope.model = $scope.model.replace(re, '').trim();\n                    });\n                };\n\n                /**\n                 * Update model in multiple mode\n                 *\n                 * @param items\n                 */\n                $scope.updateMultiModel = function(items){\n                    var values = [];\n                    items.forEach(function(item){\n                        switch ($scope.mode){\n                            case 'id':\n                                values.push(item.id);\n                                break;\n                            case 'url':\n                                values.push(item.url);\n                                break;\n                        }\n                    });\n                    $scope.model = values.join(' ');\n                };\n\n                /**\n                 * Pick media\n                 * @param $event\n                 */\n                $scope.pickMedia = function($event){\n                    if($event && $event.preventDefault) {\n                        $event.preventDefault();\n                    }\n                    if(frame){\n                        frame.$el.remove();\n                    }\n                    if(true || !frame){\n                        frame = wp.media({\n                            title: nls._($scope.title || 'Select or Upload Media'),\n                            button: {\n                                text: nls._($scope.pickerButtonText || 'Use this media')\n                            },\n                            multiple: $scope.multiple  // Set to true to allow multiple files to be selected\n                        });\n\n                        frame.on('open', function(){\n                            if($scope.mode === 'id'){\n                                var selection = frame.state().get('selection');\n                                if ($scope.model) {\n                                    if($scope.multiple){\n                                        $scope.model.split(' ').forEach(function(id){\n                                            selection.add(wp.media.attachment(id));\n                                        });\n                                    }else{\n                                        selection.add(wp.media.attachment($scope.model));\n                                    }\n                                }\n                            }\n                        });\n\n                        // When an image is selected in the media frame...\n                        frame.on( 'select', function(){\n                            // Get media attachment details from the frame state\n                            if($scope.multiple){\n                                var attachments = frame.state().get('selection').toJSON();\n                                $scope.updateMultiModel(attachments);\n\n                            }else{\n                                var attachment = frame.state().get('selection').first().toJSON();\n\n                                switch ($scope.mode){\n                                    case 'id':\n                                        $scope.model = attachment.id;\n                                        break;\n                                    case 'url':\n                                        $scope.model = attachment.url;\n                                        break;\n                                }\n                            }\n                            $scope.$apply();\n\n                        });\n\n                        // Finally, open the modal on click\n                        frame.open();\n                        frame.$el.show();\n\n                    }\n                };\n\n                /**\n                 * Reset state to no media selected\n                 *\n                 * @param $event\n                 */\n                $scope.clearMedia = function($event){\n                    $event.preventDefault();\n                    if($scope.multiple && $scope.mediaItems.length > 3){\n                        modals.confirm(nls._('Remove media items?'), function(){\n                            $scope.model = '';\n                        });\n                    }else{\n                        $scope.model = '';\n                    }\n                };\n            }\n        };\n    }])\n    .directive('colorPicker', ['utils', function(utils){\n        return {\n            restrict: 'AE',\n            scope:{\n                defaultColor: '@?',\n                palettes: '=?'\n            },\n            link: function($scope, element, attrs){\n                var $ = angular.element,\n                    $element = $(element);\n\n                var onPickerColorChange = function(event, change){\n                    setTimeout(function(){\n                        $scope.$parent.$apply(attrs.ngModel+'=\"'+(change && change.color.toString() || '')+'\";');\n                    }, 0);\n                };\n                if($.fn.wpColorPicker){\n                    $element.attr('type', 'hidden');\n                    var $input = $('<input type=\"text\">')\n                        .insertAfter(element)\n                        .val($element.val())\n                        .wpColorPicker({\n                            defaultColor: $scope.defaultColor,\n                            hide: true,\n                            palettes: $scope.palettes,\n                            change: onPickerColorChange,\n                            clear: onPickerColorChange\n                        });\n                    $scope.$parent.$watch(attrs.ngModel, function(value){\n                        if(value!==$input.val()){\n                            $input.wpColorPicker('color', value);\n                        }\n                    });\n                    var $inputDiv = $element.parent(),\n                        $pickerContainer = $inputDiv.find('.wp-picker-container'),\n                        $pickerColorButton = $pickerContainer.find('.wp-color-result'),\n                        $pickerInputWrap = $pickerContainer.find('.wp-picker-input-wrap'),\n                        $pickerHolder = $pickerContainer.find('.wp-picker-holder');\n                    $pickerContainer.off('keyup', '*');\n                    $input.off('keyup').on( 'keyup', function(event){\n                        if ( event.keyCode === 13 || event.keyCode === 32 ) {\n                            event.preventDefault();\n                            event.stopPropagation();\n                            //$pickerColorButton.trigger( 'click' );//.next().focus();\n                            $input.wpColorPicker('close');\n                        }\n                    });\n\n                    //$pickerColorButton.appendTo($inputDiv);\n\n                }\n            }\n        };\n    }])\n    .directive('jobControl', [function(){\n        return {\n            restrict: 'AE',\n            scope:{\n                jobControl: '=',\n                jobId: '=?',\n                perIteration: '=?',\n                buttons: '@?'\n            },\n            controllerAs: 'jc',\n            template:\n                '<div class=\"chayka-job_control {{jc.state}}\">' +\n                '   <div class=\"progressbar\">' +\n                '       <div class=\"progress_label\">{{ jc.total ? jc.processed + \" / \" + jc.total + \" (\" + Math.floor(jc.processed / jc.total * 100) + \"%)\" : \"0%\" }}</div>' +\n                '   </div>' +\n                '   <div class=\"box_controls\">' +\n                '       <button class=\"dashicons-before dashicons-controls-play button button-small button_start\" data-ng-click=\"jc.start()\" title=\"{{ \\'btn_start\\' | nls }}\" data-ng-show=\"!jc.state && jc.buttons.indexOf(\\'start\\') >= 0\"></button>' +\n                '       <button class=\"dashicons-before dashicons-controls-pause button button-small button_pause\" data-ng-click=\"jc.pause()\" title=\"{{ \\'btn_pause\\' | nls }}\" data-ng-show=\"jc.state===\\'running\\' && jc.buttons.indexOf(\\'pause\\') >= 0\"></button>' +\n                '       <button class=\"dashicons-before dashicons-controls-repeat button button-small button_resume\" data-ng-click=\"jc.resume()\" title=\"{{ \\'btn_resume\\' | nls }}\" data-ng-show=\"jc.state===\\'paused\\' && jc.buttons.indexOf(\\'resume\\') >= 0\"></button>' +\n                '       <button class=\"dashicons-before dashicons-no button button-small button_stop\" data-ng-click=\"jc.stop()\" title=\"{{ \\'btn_stop\\' | nls }}\" data-ng-show=\"jc.state && jc.buttons.indexOf(\\'stop\\') >= 0\"></button>' +\n                '       <span class=\"field_items_per_iteration\">' +\n                '           <label>{{ \"label_per_iteration\" | nls }}</label>' +\n                '           <input type=\"number\" data-ng-model=\"jc.perIteration\"/>' +\n                '       </span>' +\n                '   </div>' +\n                '   <div data-spinner=\"spinner\"></div>' +\n                '   <div class=\"box_output\">' +\n                '       <div data-ng-repeat=\"message in jc.log track by $index\" class=\"message\">{{message}}</div>' +\n                '   </div>' +\n                '</div>',\n\n            controller: function($scope){\n                var ctrl = {\n                    jobId: $scope.jobId,\n                    state: '',\n                    perIteration: $scope.perIteration || 10,\n                    total: 100,\n                    processed: 0,\n                    log: [],\n                    buttons: $scope.buttons ?\n                        $scope.buttons.split(' ') :\n                        ['start', 'pause', 'resume', 'stop'],\n\n                    setJobId: function(val){\n                        ctrl.jobId = val;\n                        return ctrl;\n                    },\n\n                    getJobId: function(){\n                        return ctrl.jobId;\n                    },\n\n                    setPerIteration: function(val){\n                        ctrl.perIteration = val;\n                        return ctrl;\n                    },\n\n                    getPerIteration: function(){\n                        return ctrl.perIteration;\n                    },\n\n                    setTotal: function(val){\n                        ctrl.total = val;\n                        return ctrl;\n                    },\n\n                    getTotal: function(){\n                        return ctrl.total;\n                    },\n\n                    setProcessed: function(val){\n                        ctrl.processed = val;\n                        return ctrl;\n                    },\n\n                    getProcessed: function(){\n                        return ctrl.processed;\n                    },\n\n                    isFinished: function(){\n                        return ctrl.getTotal() === ctrl.getProcessed();\n                    },\n\n                    setProgress: function(processed, total){\n                        ctrl.setProcessed(processed);\n                        ctrl.setTotal(total || ctrl.getTotal() || 100);\n                        if (ctrl.isFinished()) {\n                            ctrl.setState('finished');\n                        }\n                        return ctrl;\n                    },\n\n                    setState: function(val){\n                        ctrl.state = val;\n                        return ctrl;\n                    },\n\n                    getState: function(){\n                        return ctrl.state;\n                    },\n\n                    addLogMessage: function(message){\n                        ctrl.log.push(message);\n                    },\n\n                    clearLog: function(){\n                        ctrl.log = [];\n                    },\n\n                    start: function(){\n                        $scope.$emit('JobControl.start', ctrl.jobId);\n                    },\n\n                    started: function(){\n                        ctrl.setState('running');\n                    },\n\n                    pause: function(){\n                        $scope.$emit('JobControl.pause', ctrl.jobId);\n                    },\n\n                    paused: function(){\n                        ctrl.setState('paused');\n                    },\n\n                    resume: function(){\n                        $scope.$emit('JobControl.resume', ctrl.jobId);\n                    },\n\n                    resumed: function(){\n                        ctrl.setState('running');\n                    },\n\n                    stop: function(){\n                        $scope.$emit('JobControl.stop', ctrl.jobId);\n                    },\n\n                    stopped: function(){\n                        ctrl.setState('');\n                    }\n                };\n\n                $scope.jobControl = ctrl;\n\n                return ctrl;\n            }\n        };\n    }])\n    .config(['nlsProvider', 'buttonsProvider', function(nlsProvider, buttonsProvider){\n\n        // Adding a translation table for the English language\n        nlsProvider.setTranslations('en-US', {\n            'btn_start': 'Start',\n            'btn_stop': 'Stop',\n            'btn_pause': 'Pause',\n            'btn_resume': 'Resume',\n            'label_per_iteration': 'Per iteration'\n        });\n\n        nlsProvider.setTranslations('ru-RU', {\n            'btn_start': 'Старт',\n            'btn_stop': 'Стоп',\n            'btn_pause': 'Пауза',\n            'btn_resume': 'Возобновить',\n            'label_per_iteration': 'За итерацию'\n        });\n\n        buttonsProvider.setButtonClass('button');\n    }])\n;\n"],"sourceRoot":"/source/"}