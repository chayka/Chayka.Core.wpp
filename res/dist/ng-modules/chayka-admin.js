"use strict";angular.module("chayka-wp-admin",["chayka-spinners","chayka-nls","chayka-utils","chayka-buttons","chayka-forms","ui.sortable"]).controller("metabox",["$scope",function($scope){$scope.meta={},$scope.validator=null}]).controller("sidebar-widget-form",["$scope",function($scope){$scope.options={},$scope.validator=null}]).directive("consolePageOptions",["$timeout","ajax",function($timeout,ajax){return{transclude:!0,controllerAs:"ctrl",scope:{namespace:"@",options:"=consolePageOptions"},bindToController:!0,template:'<div class="chayka-options_form">   <form data-form-validator="ctrl.validator" novalidate="novalidate">       <div class="options_form-fields" data-ng-transclude></div>       <div class="options_form-buttons">           <button type="button" class="button button-primary button-large" data-ng-click="ctrl.saveOptions();">Save</button>       </div>   </form></div>',controller:function(){var ctrl={namespace:"",options:{},validator:null,processResponse:function(data){angular.forEach(data.payload,function(value,option){ctrl.options[option]=value})},saveOptions:function(){ctrl.validator&&!ctrl.validator.validateFields()||ajax.post("/api/options/set",{namespace:ctrl.namespace,options:ctrl.options},{spinnerMessage:"Saving options",success:ctrl.processResponse})},loadOptions:function(){ajax.post("/api/options/get",{namespace:ctrl.namespace,options:ctrl.options},{spinnerMessage:"Loading options",success:ctrl.processResponse})}};return ctrl},compile:function(element,attributes){return{pre:function(scope,element,attributes,controller,transcludeFn){},post:function(scope,element,attributes,controller,transcludeFn){$timeout(controller.loadOptions,0)}}}}}]).controller("optionsForm",["$scope","$timeout","ajax",function($scope,$timeout,ajax){$scope.namespace="",$scope.options={site:{}},$scope.validator=null;var processResponse=function(data){angular.forEach(data.payload,function(value,option){$scope.options[option]=value})};$scope.saveOptions=function(){$scope.validator&&!$scope.validator.validateFields()||ajax.post("/api/options/set",{namespace:$scope.namespace,options:$scope.options},{spinnerMessage:"Saving options",success:processResponse})},$scope.loadOptions=function(){ajax.post("/api/options/get",{namespace:$scope.namespace,options:$scope.options},{spinnerMessage:"Loading options",success:processResponse})},$timeout($scope.loadOptions,0)}]).factory("mediaResolver",["ajax",function(ajax){var queue={},multiQueue=[],cache={},bulkDelay=100,bulkTimeout=null,resolver={resolveById:function(id,callback,delay){return cache[id]?void callback(cache[id]):(queue[id]||(queue[id]=[]),queue[id].push(callback),bulkTimeout&&clearTimeout(bulkTimeout),void(bulkTimeout=setTimeout(resolver.bulkResolveById,delay||bulkDelay)))},resolveByIds:function(ids,callback,delay){var idsArr,unresolvedIds=[],resolvedItems=[];angular.isString(ids)&&(idsArr=[],ids.split(" ").forEach(function(id){idsArr.push(parseInt(id))})),angular.isArray(ids)&&(idsArr=ids);for(var i=0;i<idsArr.length;i++){var id=parseInt(idsArr[i]);idsArr[i]=id,cache[id]?resolvedItems.push(cache[id]):unresolvedIds.push(id)}return unresolvedIds.length?(multiQueue.push({ids:idsArr,callback:callback}),bulkTimeout&&clearTimeout(bulkTimeout),void(bulkTimeout=setTimeout(resolver.bulkResolveById,delay||bulkDelay))):void callback(resolvedItems)},bulkResolveById:function(){var requestQueue=queue;queue={};var requestMultiQueue=multiQueue;multiQueue=[];var ids=[],requestedIds={};for(var id in requestQueue)requestQueue.hasOwnProperty(id)&&(ids.push(id),requestedIds[id]=!0);requestMultiQueue.forEach(function(itemSet){for(var i=0;i<itemSet.ids.length;i++)id=itemSet.ids[i],cache[id]||requestedIds[id]||(ids.push(id),requestedIds[id]=!0)}),ajax.post("/api/post-models/",{post_type:"attachment",post__in:ids,post_status:"any",posts_per_page:-1},{spinnerMessage:"Retrieving media data",errorMessage:"Failed to retrieve media data",success:function(data){var items=data.payload.items;items.forEach(function(item){cache[item.id]=item;var callbacks=requestQueue[item.id];if(callbacks&&callbacks.length)for(var i=0;i<callbacks.length;i++)callbacks[i](item)}),requestMultiQueue.forEach(function(itemSet){for(var item,id,items=[],i=0;i<itemSet.ids.length;i++)id=itemSet.ids[i],item=cache[id],item&&items.push(item);itemSet.callback(items)})}})}};return resolver}]).directive("mediaPicker",["buttons","mediaResolver","nls","modals",function(buttons,mediaResolver,nls,modals){return{restrict:"AE",scope:{title:"@?",pickerButtonText:"@?",type:"@?",mode:"@",model:"=",size:"@",multiple:"@?",itemWidth:"@?",itemHeight:"@?",itemMode:"@?",onChange:"&?"},transclude:!0,template:'<div class="chayka-media_picker" data-ng-class="{\'image-set\': hasImages(), multiple: multiple}"><img data-ng-src="{{mediaSrc}}" data-ng-show="!!mediaSrc" data-ng-click="pickMedia();"/><div class="media_items sortable-row" data-ng-show="mediaItems && mediaItems.length" data-ng-model="mediaItems" data-as-sortable="dragControl" ><div class="media_item" data-ng-class="{contain: itemMode === \'contain\', cover: itemMode === \'cover\'}" data-ng-repeat="item in mediaItems" data-as-sortable-item style="background-image: {{\'url(\'+item.url+\')\'}}; width: {{itemWidth || itemHeight || \'100px\'}}; height: {{itemHeight || itemWidth || \'100px\'}};"><div class="sortable-handle" data-as-sortable-item-handle><button class="btn_remove" data-ng-click="removeMediaItem($event, item)" data-no-drag ><span>&times;</span></button></div></div></div><div class="no_image" data-ng-click="pickMedia();" data-ng-show="!hasImages()">   <div data-spinner="spinner"></div></div><div class="note" data-ng-transclude></div><div class="buttons">   <button class="{{buttonClass}} btn_clear" data-ng-click="clearMedia($event);" data-ng-show="!!hasImages()" >{{ "Clear" | nls}}</button>   <button class="{{buttonClass}} btn_pick" data-ng-click="pickMedia($event);">{{ pickerButtonText || "Browse" | nls}}</button></div></div>',controller:function($scope,$element){$scope.buttonClass=buttons.getButtonClass(),$scope.mediaSrc=null,$scope.mediaItems=[],$scope.mode=$scope.mode||"id",$scope.size=$scope.size||"medium",$scope.spinner=null,$scope.prevModel="";var frame=null,wp=window.wp;$scope.prevModel=$scope.model?JSON.stringify($scope.model):"",$scope.$watch("model",function(model){if($scope.multiple)switch($scope.mode){case"id":$scope.mediaSrc="",$scope.mediaItems=[],model&&($scope.spinner&&$scope.spinner.show(nls._("Retrieving media data...")),mediaResolver.resolveByIds(model,function(items){$scope.spinner&&$scope.spinner.hide(),items.forEach(function(item){$scope.mediaItems.push({id:item.id,url:(item.image[$scope.size]||item.image.thumbnail).url})})}));break;case"url":model.split(" ").forEach(function(url){$scope.mediaItems.push({id:0,url:url})})}else switch($scope.mode){case"id":$scope.mediaSrc="",$scope.mediaItems=[],model=parseInt(model),model&&($scope.spinner&&$scope.spinner.show(nls._("Retrieving media data...")),mediaResolver.resolveById(model,function(item){$scope.spinner&&$scope.spinner.hide(),$scope.mediaSrc=(item.image[$scope.size]||item.image.thumbnail).url}));break;case"url":$scope.mediaSrc=model}var newModel=model?JSON.stringify(model):"";$scope.onChange&&newModel!==$scope.prevModel&&$scope.onChange(),$scope.prevModel=newModel}),$scope.dragControl={orderChanged:function(event){$scope.updateMultiModel($scope.mediaItems)},scrollableContainer:$element.attr("id")},$scope.hasImages=function(){return!!$scope.mediaItems&&!!$scope.mediaItems.length||!!$scope.mediaSrc},$scope.removeMediaItem=function($event,item){$event.preventDefault(),modals.confirm(nls._("Delete this item?"),function(){var value="";switch($scope.mode){case"id":value=item.id;break;case"url":value=item.url}var re=new RegExp("\\b"+value+"\\b\\s?");$scope.model=$scope.model.replace(re,"").trim()})},$scope.updateMultiModel=function(items){var values=[];items.forEach(function(item){switch($scope.mode){case"id":values.push(item.id);break;case"url":values.push(item.url)}}),$scope.model=values.join(" ")},$scope.pickMedia=function($event){$event&&$event.preventDefault&&$event.preventDefault(),frame&&frame.$el.remove(),frame=wp.media({title:nls._($scope.title||"Select or Upload Media"),button:{text:nls._($scope.pickerButtonText||"Use this media")},multiple:$scope.multiple}),frame.on("open",function(){if("id"===$scope.mode){var selection=frame.state().get("selection");$scope.model&&($scope.multiple?$scope.model.split(" ").forEach(function(id){selection.add(wp.media.attachment(id))}):selection.add(wp.media.attachment($scope.model)))}}),frame.on("select",function(){if($scope.multiple){var attachments=frame.state().get("selection").toJSON();$scope.updateMultiModel(attachments)}else{var attachment=frame.state().get("selection").first().toJSON();switch($scope.mode){case"id":$scope.model=attachment.id;break;case"url":$scope.model=attachment.url}}$scope.$apply()}),frame.open(),frame.$el.show()},$scope.clearMedia=function($event){$event.preventDefault(),$scope.multiple&&$scope.mediaItems.length>3?modals.confirm(nls._("Remove media items?"),function(){$scope.model=""}):$scope.model=""}}}}]).directive("colorPicker",["utils",function(utils){return{restrict:"AE",scope:{defaultColor:"@?",palettes:"=?"},link:function($scope,element,attrs){var $=angular.element,$element=$(element),onPickerColorChange=function(event,change){setTimeout(function(){$scope.$parent.$apply(attrs.ngModel+'="'+(change&&change.color.toString()||"")+'";')},0)};if($.fn.wpColorPicker){$element.attr("type","hidden");var $input=$('<input type="text">').insertAfter(element).val($element.val()).wpColorPicker({defaultColor:$scope.defaultColor,hide:!0,palettes:$scope.palettes,change:onPickerColorChange,clear:onPickerColorChange});$scope.$parent.$watch(attrs.ngModel,function(value){value!==$input.val()&&$input.wpColorPicker("color",value)});var $inputDiv=$element.parent(),$pickerContainer=$inputDiv.find(".wp-picker-container");$pickerContainer.find(".wp-color-result"),$pickerContainer.find(".wp-picker-input-wrap"),$pickerContainer.find(".wp-picker-holder");$pickerContainer.off("keyup","*"),$input.off("keyup").on("keyup",function(event){13!==event.keyCode&&32!==event.keyCode||(event.preventDefault(),event.stopPropagation(),$input.wpColorPicker("close"))})}}}}]).directive("jobControl",[function(){return{restrict:"AE",scope:{jobControl:"=",jobId:"=?",perIteration:"=?",buttons:"@?"},controllerAs:"jc",template:'<div class="chayka-job_control {{jc.state}}">   <div class="progressbar">       <div class="progress_label">{{ jc.total ? jc.processed + " / " + jc.total + " (" + Math.floor(jc.processed / jc.total * 100) + "%)" : "0%" }}</div>   </div>   <div class="box_controls">       <button class="dashicons-before dashicons-controls-play button button-small button_start" data-ng-click="jc.start()" title="{{ \'btn_start\' | nls }}" data-ng-show="!jc.state && jc.buttons.indexOf(\'start\') >= 0"></button>       <button class="dashicons-before dashicons-controls-pause button button-small button_pause" data-ng-click="jc.pause()" title="{{ \'btn_pause\' | nls }}" data-ng-show="jc.state===\'running\' && jc.buttons.indexOf(\'pause\') >= 0"></button>       <button class="dashicons-before dashicons-controls-repeat button button-small button_resume" data-ng-click="jc.resume()" title="{{ \'btn_resume\' | nls }}" data-ng-show="jc.state===\'paused\' && jc.buttons.indexOf(\'resume\') >= 0"></button>       <button class="dashicons-before dashicons-no button button-small button_stop" data-ng-click="jc.stop()" title="{{ \'btn_stop\' | nls }}" data-ng-show="jc.state && jc.buttons.indexOf(\'stop\') >= 0"></button>       <span class="field_items_per_iteration">           <label>{{ "label_per_iteration" | nls }}</label>           <input type="number" data-ng-model="jc.perIteration"/>       </span>   </div>   <div data-spinner="spinner"></div>   <div class="box_output">       <div data-ng-repeat="message in jc.log track by $index" class="message">{{message}}</div>   </div></div>',controller:function($scope){var ctrl={jobId:$scope.jobId,state:"",perIteration:$scope.perIteration||10,total:100,processed:0,log:[],buttons:$scope.buttons?$scope.buttons.split(" "):["start","pause","resume","stop"],setJobId:function(val){return ctrl.jobId=val,ctrl},getJobId:function(){return ctrl.jobId},setPerIteration:function(val){return ctrl.perIteration=val,ctrl},getPerIteration:function(){return ctrl.perIteration},setTotal:function(val){return ctrl.total=val,ctrl},getTotal:function(){return ctrl.total},setProcessed:function(val){return ctrl.processed=val,ctrl},getProcessed:function(){return ctrl.processed},isFinished:function(){return ctrl.getTotal()===ctrl.getProcessed()},setProgress:function(processed,total){return ctrl.setProcessed(processed),ctrl.setTotal(total||ctrl.getTotal()||100),ctrl.isFinished()&&ctrl.setState("finished"),ctrl},setState:function(val){return ctrl.state=val,ctrl},getState:function(){return ctrl.state},addLogMessage:function(message){ctrl.log.push(message)},clearLog:function(){ctrl.log=[]},start:function(){$scope.$emit("JobControl.start",ctrl.jobId)},started:function(){ctrl.setState("running")},pause:function(){$scope.$emit("JobControl.pause",ctrl.jobId)},paused:function(){ctrl.setState("paused")},resume:function(){$scope.$emit("JobControl.resume",ctrl.jobId)},resumed:function(){ctrl.setState("running")},stop:function(){$scope.$emit("JobControl.stop",ctrl.jobId)},stopped:function(){ctrl.setState("")}};return $scope.jobControl=ctrl,ctrl}}}]).config(["nlsProvider","buttonsProvider",function(nlsProvider,buttonsProvider){nlsProvider.setTranslations("en-US",{btn_start:"Start",btn_stop:"Stop",btn_pause:"Pause",btn_resume:"Resume",label_per_iteration:"Per iteration"}),nlsProvider.setTranslations("ru-RU",{btn_start:"Старт",btn_stop:"Стоп",btn_pause:"Пауза",btn_resume:"Возобновить",label_per_iteration:"За итерацию"}),buttonsProvider.setButtonClass("button")}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoYXlrYS13cC1hZG1pbi5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsIiRzY29wZSIsIm1ldGEiLCJ2YWxpZGF0b3IiLCJvcHRpb25zIiwiZGlyZWN0aXZlIiwiJHRpbWVvdXQiLCJhamF4IiwidHJhbnNjbHVkZSIsImNvbnRyb2xsZXJBcyIsInNjb3BlIiwibmFtZXNwYWNlIiwiYmluZFRvQ29udHJvbGxlciIsInRlbXBsYXRlIiwiY3RybCIsInByb2Nlc3NSZXNwb25zZSIsImRhdGEiLCJmb3JFYWNoIiwicGF5bG9hZCIsInZhbHVlIiwib3B0aW9uIiwic2F2ZU9wdGlvbnMiLCJ2YWxpZGF0ZUZpZWxkcyIsInBvc3QiLCJzcGlubmVyTWVzc2FnZSIsInN1Y2Nlc3MiLCJsb2FkT3B0aW9ucyIsImNvbXBpbGUiLCJlbGVtZW50IiwiYXR0cmlidXRlcyIsInByZSIsInRyYW5zY2x1ZGVGbiIsInNpdGUiLCJmYWN0b3J5IiwicXVldWUiLCJtdWx0aVF1ZXVlIiwiY2FjaGUiLCJidWxrRGVsYXkiLCJidWxrVGltZW91dCIsInJlc29sdmVyIiwicmVzb2x2ZUJ5SWQiLCJpZCIsImNhbGxiYWNrIiwiZGVsYXkiLCJwdXNoIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImJ1bGtSZXNvbHZlQnlJZCIsInJlc29sdmVCeUlkcyIsImlkcyIsImlkc0FyciIsInVucmVzb2x2ZWRJZHMiLCJyZXNvbHZlZEl0ZW1zIiwiaXNTdHJpbmciLCJzcGxpdCIsInBhcnNlSW50IiwiaXNBcnJheSIsImkiLCJsZW5ndGgiLCJyZXF1ZXN0UXVldWUiLCJyZXF1ZXN0TXVsdGlRdWV1ZSIsInJlcXVlc3RlZElkcyIsImhhc093blByb3BlcnR5IiwiaXRlbVNldCIsInBvc3RfdHlwZSIsInBvc3RfX2luIiwicG9zdF9zdGF0dXMiLCJwb3N0c19wZXJfcGFnZSIsImVycm9yTWVzc2FnZSIsIml0ZW1zIiwiaXRlbSIsImNhbGxiYWNrcyIsImJ1dHRvbnMiLCJtZWRpYVJlc29sdmVyIiwibmxzIiwibW9kYWxzIiwicmVzdHJpY3QiLCJ0aXRsZSIsInBpY2tlckJ1dHRvblRleHQiLCJ0eXBlIiwibW9kZSIsIm1vZGVsIiwic2l6ZSIsIm11bHRpcGxlIiwiaXRlbVdpZHRoIiwiaXRlbUhlaWdodCIsIml0ZW1Nb2RlIiwib25DaGFuZ2UiLCIkZWxlbWVudCIsImJ1dHRvbkNsYXNzIiwiZ2V0QnV0dG9uQ2xhc3MiLCJtZWRpYVNyYyIsIm1lZGlhSXRlbXMiLCJzcGlubmVyIiwicHJldk1vZGVsIiwiZnJhbWUiLCJ3cCIsIndpbmRvdyIsIkpTT04iLCJzdHJpbmdpZnkiLCIkd2F0Y2giLCJzaG93IiwiXyIsImhpZGUiLCJ1cmwiLCJpbWFnZSIsInRodW1ibmFpbCIsIm5ld01vZGVsIiwiZHJhZ0NvbnRyb2wiLCJvcmRlckNoYW5nZWQiLCJldmVudCIsInVwZGF0ZU11bHRpTW9kZWwiLCJzY3JvbGxhYmxlQ29udGFpbmVyIiwiYXR0ciIsImhhc0ltYWdlcyIsInJlbW92ZU1lZGlhSXRlbSIsIiRldmVudCIsInByZXZlbnREZWZhdWx0IiwiY29uZmlybSIsInJlIiwiUmVnRXhwIiwicmVwbGFjZSIsInRyaW0iLCJ2YWx1ZXMiLCJqb2luIiwicGlja01lZGlhIiwiJGVsIiwicmVtb3ZlIiwibWVkaWEiLCJidXR0b24iLCJ0ZXh0Iiwib24iLCJzZWxlY3Rpb24iLCJzdGF0ZSIsImdldCIsImFkZCIsImF0dGFjaG1lbnQiLCJhdHRhY2htZW50cyIsInRvSlNPTiIsImZpcnN0IiwiJGFwcGx5Iiwib3BlbiIsImNsZWFyTWVkaWEiLCJ1dGlscyIsImRlZmF1bHRDb2xvciIsInBhbGV0dGVzIiwibGluayIsImF0dHJzIiwiJCIsIm9uUGlja2VyQ29sb3JDaGFuZ2UiLCJjaGFuZ2UiLCIkcGFyZW50IiwibmdNb2RlbCIsImNvbG9yIiwidG9TdHJpbmciLCJmbiIsIndwQ29sb3JQaWNrZXIiLCIkaW5wdXQiLCJpbnNlcnRBZnRlciIsInZhbCIsImNsZWFyIiwiJGlucHV0RGl2IiwicGFyZW50IiwiJHBpY2tlckNvbnRhaW5lciIsImZpbmQiLCJvZmYiLCJrZXlDb2RlIiwic3RvcFByb3BhZ2F0aW9uIiwiam9iQ29udHJvbCIsImpvYklkIiwicGVySXRlcmF0aW9uIiwidG90YWwiLCJwcm9jZXNzZWQiLCJsb2ciLCJzZXRKb2JJZCIsImdldEpvYklkIiwic2V0UGVySXRlcmF0aW9uIiwiZ2V0UGVySXRlcmF0aW9uIiwic2V0VG90YWwiLCJnZXRUb3RhbCIsInNldFByb2Nlc3NlZCIsImdldFByb2Nlc3NlZCIsImlzRmluaXNoZWQiLCJzZXRQcm9ncmVzcyIsInNldFN0YXRlIiwiZ2V0U3RhdGUiLCJhZGRMb2dNZXNzYWdlIiwibWVzc2FnZSIsImNsZWFyTG9nIiwic3RhcnQiLCIkZW1pdCIsInN0YXJ0ZWQiLCJwYXVzZSIsInBhdXNlZCIsInJlc3VtZSIsInJlc3VtZWQiLCJzdG9wIiwic3RvcHBlZCIsImNvbmZpZyIsIm5sc1Byb3ZpZGVyIiwiYnV0dG9uc1Byb3ZpZGVyIiwic2V0VHJhbnNsYXRpb25zIiwiYnRuX3N0YXJ0IiwiYnRuX3N0b3AiLCJidG5fcGF1c2UiLCJidG5fcmVzdW1lIiwibGFiZWxfcGVyX2l0ZXJhdGlvbiIsInNldEJ1dHRvbkNsYXNzIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUVBQSxTQUFRQyxPQUFPLG1CQUFvQixrQkFBbUIsYUFBYyxlQUFnQixpQkFBa0IsZUFBZ0IsZ0JBQ2pIQyxXQUFXLFdBQVksU0FBVSxTQUFTQyxRQUN2Q0EsT0FBT0MsUUFDUEQsT0FBT0UsVUFBWSxRQUV0QkgsV0FBVyx1QkFBd0IsU0FBVSxTQUFTQyxRQUNuREEsT0FBT0csV0FDUEgsT0FBT0UsVUFBWSxRQUV0QkUsVUFBVSxzQkFBdUIsV0FBWSxPQUFRLFNBQVNDLFNBQVVDLE1BQ3JFLE9BQ0lDLFlBQVksRUFDWkMsYUFBYyxPQUNkQyxPQUNJQyxVQUFXLElBQ1hQLFFBQVMsdUJBRWJRLGtCQUFrQixFQUNsQkMsU0FDQSw4V0FRQWIsV0FBWSxXQUNSLEdBQUljLE9B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S0FBS29LLFNBQVNQLE9BQVM3SixLQUFLcUssWUFBYyxLQUN0Q3JLLEtBQUt3SyxjQUNMeEssS0FBSzBLLFNBQVMsWUFFWDFLLE1BR1gwSyxTQUFVLFNBQVN6QixLQUVmLE1BREFqSixNQUFLdUgsTUFBUTBCLElBQ05qSixNQUdYMkssU0FBVSxXQUNOLE1BQU8zSyxNQUFLdUgsT0FHaEJxRCxjQUFlLFNBQVNDLFNBQ3BCN0ssS0FBSytKLElBQUlqSSxLQUFLK0ksVUFHbEJDLFNBQVUsV0FDTjlLLEtBQUsrSixRQUdUZ0IsTUFBTyxXQUNINUwsT0FBTzZMLE1BQU0sbUJBQW9CaEwsS0FBSzJKLFFBRzFDc0IsUUFBUyxXQUNMakwsS0FBSzBLLFNBQVMsWUFHbEJRLE1BQU8sV0FDSC9MLE9BQU82TCxNQUFNLG1CQUFvQmhMLEtBQUsySixRQUcxQ3dCLE9BQVEsV0FDSm5MLEtBQUswSyxTQUFTLFdBR2xCVSxPQUFRLFdBQ0pqTSxPQUFPNkwsTUFBTSxvQkFBcUJoTCxLQUFLMkosUUFHM0MwQixRQUFTLFdBQ0xyTCxLQUFLMEssU0FBUyxZQUdsQlksS0FBTSxXQUNGbk0sT0FBTzZMLE1BQU0sa0JBQW1CaEwsS0FBSzJKLFFBR3pDNEIsUUFBUyxXQUNMdkwsS0FBSzBLLFNBQVMsS0FNdEIsT0FGQXZMLFFBQU91SyxXQUFhMUosS0FFYkEsVUFJbEJ3TCxRQUFRLGNBQWUsa0JBQW1CLFNBQVNDLFlBQWFDLGlCQUc3REQsWUFBWUUsZ0JBQWdCLFNBQ3hCQyxVQUFhLFFBQ2JDLFNBQVksT0FDWkMsVUFBYSxRQUNiQyxXQUFjLFNBQ2RDLG9CQUF1QixrQkFHM0JQLFlBQVlFLGdCQUFnQixTQUN4QkMsVUFBYSxRQUNiQyxTQUFZLE9BQ1pDLFVBQWEsUUFDYkMsV0FBYyxjQUNkQyxvQkFBdUIsZ0JBRzNCTixnQkFBZ0JPLGVBQWUiLCJmaWxlIjoiY2hheWthLWFkbWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnY2hheWthLXdwLWFkbWluJywgWydjaGF5a2Etc3Bpbm5lcnMnLCAnY2hheWthLW5scycsICdjaGF5a2EtdXRpbHMnLCAnY2hheWthLWJ1dHRvbnMnLCAnY2hheWthLWZvcm1zJywgJ3VpLnNvcnRhYmxlJ10pXG4gICAgLmNvbnRyb2xsZXIoJ21ldGFib3gnLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSl7XG4gICAgICAgICRzY29wZS5tZXRhID0ge307XG4gICAgICAgICRzY29wZS52YWxpZGF0b3IgPSBudWxsO1xuICAgIH1dKVxuICAgIC5jb250cm9sbGVyKCdzaWRlYmFyLXdpZGdldC1mb3JtJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpe1xuICAgICAgICAkc2NvcGUub3B0aW9ucyA9IHt9O1xuICAgICAgICAkc2NvcGUudmFsaWRhdG9yID0gbnVsbDtcbiAgICB9XSlcbiAgICAuZGlyZWN0aXZlKCdjb25zb2xlUGFnZU9wdGlvbnMnLCBbJyR0aW1lb3V0JywgJ2FqYXgnLCBmdW5jdGlvbigkdGltZW91dCwgYWpheCl7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAnY3RybCcsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIG5hbWVzcGFjZTogJ0AnLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6ICc9Y29uc29sZVBhZ2VPcHRpb25zJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZTpcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiY2hheWthLW9wdGlvbnNfZm9ybVwiPicgK1xuICAgICAgICAgICAgJyAgIDxmb3JtIGRhdGEtZm9ybS12YWxpZGF0b3I9XCJjdHJsLnZhbGlkYXRvclwiIG5vdmFsaWRhdGU9XCJub3ZhbGlkYXRlXCI+JyArXG4gICAgICAgICAgICAnICAgICAgIDxkaXYgY2xhc3M9XCJvcHRpb25zX2Zvcm0tZmllbGRzXCIgZGF0YS1uZy10cmFuc2NsdWRlPjwvZGl2PicgK1xuICAgICAgICAgICAgJyAgICAgICA8ZGl2IGNsYXNzPVwib3B0aW9uc19mb3JtLWJ1dHRvbnNcIj4nICtcbiAgICAgICAgICAgICcgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnV0dG9uIGJ1dHRvbi1wcmltYXJ5IGJ1dHRvbi1sYXJnZVwiIGRhdGEtbmctY2xpY2s9XCJjdHJsLnNhdmVPcHRpb25zKCk7XCI+U2F2ZTwvYnV0dG9uPicgK1xuICAgICAgICAgICAgJyAgICAgICA8L2Rpdj4nICtcbiAgICAgICAgICAgICcgICA8L2Zvcm0+JyArXG4gICAgICAgICAgICAnPC9kaXY+JyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgdmFyIGN0cmwgPSB7XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBOYW1lc3BhY2UgZm9yIG9wdGlvbnMgdG8gc2F2ZVxuICAgICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICAgKiBAdmFyIHtzdHJpbmd9XG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2U6ICcnLFxuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBIYXNobWFwIG9mIG9wdGlvbnMgdG8gZWRpdFxuICAgICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICAgKiBAdmFyIHt7fX1cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHt9LFxuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBGb3JtIHZhbGlkYXRvclxuICAgICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICAgKiBAdmFyIHt7fXxudWxsfVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBudWxsLFxuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBHZXR0ZXIgYW5kIFNldHRlciBSZXNwb25zZSBwcm9jZXNzb3JcbiAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NSZXNwb25zZTogZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZGF0YS5wYXlsb2FkLCBmdW5jdGlvbih2YWx1ZSwgb3B0aW9uKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLm9wdGlvbnNbb3B0aW9uXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFNhdmUgb3B0aW9ucyBvbiBidXR0b24gY2xpY2tcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHNhdmVPcHRpb25zOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIWN0cmwudmFsaWRhdG9yIHx8IGN0cmwudmFsaWRhdG9yLnZhbGlkYXRlRmllbGRzKCkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFqYXgucG9zdCgnL2FwaS9vcHRpb25zL3NldCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlOiBjdHJsLm5hbWVzcGFjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogY3RybC5vcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSx7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwaW5uZXJNZXNzYWdlOiAnU2F2aW5nIG9wdGlvbnMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBjdHJsLnByb2Nlc3NSZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBMb2FkIG9wdGlvbnMgb24gZm9ybSBzdGFydFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgbG9hZE9wdGlvbnM6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBhamF4LnBvc3QoJy9hcGkvb3B0aW9ucy9nZXQnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlOiBjdHJsLm5hbWVzcGFjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBjdHJsLm9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgIH0se1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwaW5uZXJNZXNzYWdlOiAnTG9hZGluZyBvcHRpb25zJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBjdHJsLnByb2Nlc3NSZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8gJHRpbWVvdXQoY3RybC5sb2FkT3B0aW9ucywgMTAwKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBjdHJsO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cmlidXRlcyl7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBwcmU6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzLCBjb250cm9sbGVyLCB0cmFuc2NsdWRlRm4pe1xuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHBvc3Q6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzLCBjb250cm9sbGVyLCB0cmFuc2NsdWRlRm4pe1xuICAgICAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoY29udHJvbGxlci5sb2FkT3B0aW9ucywgMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1dKVxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgLmNvbnRyb2xsZXIoJ29wdGlvbnNGb3JtJywgWyckc2NvcGUnLCAnJHRpbWVvdXQnLCAnYWpheCcsIGZ1bmN0aW9uKCRzY29wZSwgJHRpbWVvdXQsIGFqYXgpe1xuXG4gICAgICAgICRzY29wZS5uYW1lc3BhY2UgPSAnJztcbiAgICAgICAgJHNjb3BlLm9wdGlvbnMgPSB7XG4gICAgICAgICAgICBzaXRlOiB7fVxuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUudmFsaWRhdG9yID0gbnVsbDtcblxuICAgICAgICB2YXIgcHJvY2Vzc1Jlc3BvbnNlID0gZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZGF0YS5wYXlsb2FkLCBmdW5jdGlvbih2YWx1ZSwgb3B0aW9uKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUub3B0aW9uc1tvcHRpb25dID0gdmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vJHNjb3BlLm9wdGlvbnMgPSBkYXRhLnBheWxvYWQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnNhdmVPcHRpb25zID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGlmKCEkc2NvcGUudmFsaWRhdG9yIHx8ICRzY29wZS52YWxpZGF0b3IudmFsaWRhdGVGaWVsZHMoKSl7XG4gICAgICAgICAgICAgICAgYWpheC5wb3N0KCcvYXBpL29wdGlvbnMvc2V0Jywge1xuICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2U6ICRzY29wZS5uYW1lc3BhY2UsXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6ICRzY29wZS5vcHRpb25zXG4gICAgICAgICAgICAgICAgfSx7XG4gICAgICAgICAgICAgICAgICAgIHNwaW5uZXJNZXNzYWdlOiAnU2F2aW5nIG9wdGlvbnMnLFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBwcm9jZXNzUmVzcG9uc2VcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUubG9hZE9wdGlvbnMgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgYWpheC5wb3N0KCcvYXBpL29wdGlvbnMvZ2V0Jywge1xuICAgICAgICAgICAgICAgIG5hbWVzcGFjZTogJHNjb3BlLm5hbWVzcGFjZSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiAkc2NvcGUub3B0aW9uc1xuICAgICAgICAgICAgfSx7XG4gICAgICAgICAgICAgICAgc3Bpbm5lck1lc3NhZ2U6ICdMb2FkaW5nIG9wdGlvbnMnLFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHByb2Nlc3NSZXNwb25zZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHRpbWVvdXQoJHNjb3BlLmxvYWRPcHRpb25zLCAwKTtcblxuICAgIH1dKVxuICAgIC5mYWN0b3J5KCdtZWRpYVJlc29sdmVyJywgWydhamF4JywgZnVuY3Rpb24oYWpheCl7XG5cbiAgICAgICAgdmFyIHF1ZXVlID0ge307XG5cbiAgICAgICAgdmFyIG11bHRpUXVldWUgPSBbXTtcblxuICAgICAgICB2YXIgY2FjaGUgPSB7fTtcblxuICAgICAgICB2YXIgYnVsa0RlbGF5ID0gMTAwO1xuXG4gICAgICAgIHZhciBidWxrVGltZW91dCA9IG51bGw7XG5cbiAgICAgICAgdmFyIHJlc29sdmVyID0ge1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlc29sdmUgbWVkaWEgb2JqZWN0IGJ5IEFQSSBhbmQgcGFzcyBpdCB0byBjYWxsYmFjay5cbiAgICAgICAgICAgICAqIFRoaXMgZnVuY3Rpb24gcHVzaGVzIHJlcXVlc3QgdG8gdGhlIHF1ZXVlIHRvIHBlcmZvcm0gYnVsayBhcGkgY2FsbFxuICAgICAgICAgICAgICogQHBhcmFtIHtpbnR9IGlkXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAgICAgICAgICogQHBhcmFtIHtpbnR9IGRlbGF5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJlc29sdmVCeUlkOiBmdW5jdGlvbihpZCwgY2FsbGJhY2ssIGRlbGF5KXtcbiAgICAgICAgICAgICAgICBpZihjYWNoZVtpZF0pe1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhjYWNoZVtpZF0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKCFxdWV1ZVtpZF0pe1xuICAgICAgICAgICAgICAgICAgICBxdWV1ZVtpZF0gPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcXVldWVbaWRdLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIGlmKGJ1bGtUaW1lb3V0KXtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGJ1bGtUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnVsa1RpbWVvdXQgPSBzZXRUaW1lb3V0KHJlc29sdmVyLmJ1bGtSZXNvbHZlQnlJZCwgZGVsYXkgfHwgYnVsa0RlbGF5KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmVzb2x2ZSBtZWRpYSBvYmplY3RzIGJ5IEFQSSBhbmQgcGFzcyBpdCB0byBjYWxsYmFjay5cbiAgICAgICAgICAgICAqIFRoaXMgZnVuY3Rpb24gcHVzaGVzIHJlcXVlc3QgdG8gdGhlIHF1ZXVlIHRvIHBlcmZvcm0gYnVsayBhcGkgY2FsbFxuICAgICAgICAgICAgICogQHBhcmFtIHthcnJheXxzdHJpbmd9IGlkc1xuICAgICAgICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgICAgICAgICAqIEBwYXJhbSB7aW50fSBkZWxheVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICByZXNvbHZlQnlJZHM6IGZ1bmN0aW9uKGlkcywgY2FsbGJhY2ssIGRlbGF5KXtcbiAgICAgICAgICAgICAgICB2YXIgaWRzQXJyO1xuICAgICAgICAgICAgICAgIHZhciB1bnJlc29sdmVkSWRzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIHJlc29sdmVkSXRlbXMgPSBbXTtcbiAgICAgICAgICAgICAgICBpZihhbmd1bGFyLmlzU3RyaW5nKGlkcykpe1xuICAgICAgICAgICAgICAgICAgICBpZHNBcnIgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWRzLnNwbGl0KCcgJykuZm9yRWFjaCggZnVuY3Rpb24oaWQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWRzQXJyLnB1c2gocGFyc2VJbnQoaWQpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKGFuZ3VsYXIuaXNBcnJheShpZHMpKXtcbiAgICAgICAgICAgICAgICAgICAgaWRzQXJyID0gaWRzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpIDwgaWRzQXJyLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlkID0gcGFyc2VJbnQoaWRzQXJyW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgaWRzQXJyW2ldID0gaWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmKGNhY2hlW2lkXSl7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlZEl0ZW1zLnB1c2goY2FjaGVbaWRdKTtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bnJlc29sdmVkSWRzLnB1c2goaWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYoIXVucmVzb2x2ZWRJZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlc29sdmVkSXRlbXMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbXVsdGlRdWV1ZS5wdXNoKHtpZHM6IGlkc0FyciwgY2FsbGJhY2s6IGNhbGxiYWNrfSk7XG4gICAgICAgICAgICAgICAgaWYoYnVsa1RpbWVvdXQpe1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoYnVsa1RpbWVvdXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBidWxrVGltZW91dCA9IHNldFRpbWVvdXQocmVzb2x2ZXIuYnVsa1Jlc29sdmVCeUlkLCBkZWxheSB8fCBidWxrRGVsYXkpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXNvbHZlcyBhbGwgdGhlIGVucXVldWVkIG1lZGlhIG9iamVjdHMgYW5kIGZpcmVzIGFsbCB0aGUgbmVlZGVkIGNhbGxiYWNrc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBidWxrUmVzb2x2ZUJ5SWQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgdmFyIHJlcXVlc3RRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICAgICAgICAgIHF1ZXVlID0ge307XG4gICAgICAgICAgICAgICAgdmFyIHJlcXVlc3RNdWx0aVF1ZXVlID0gbXVsdGlRdWV1ZTtcbiAgICAgICAgICAgICAgICBtdWx0aVF1ZXVlID0gW107XG4gICAgICAgICAgICAgICAgdmFyIGlkcyA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0ZWRJZHMgPSB7fTtcbiAgICAgICAgICAgICAgICBmb3IodmFyIGlkIGluIHJlcXVlc3RRdWV1ZSl7XG4gICAgICAgICAgICAgICAgICAgIGlmKHJlcXVlc3RRdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWRzLnB1c2goaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVkSWRzW2lkXT10cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlcXVlc3RNdWx0aVF1ZXVlLmZvckVhY2goZnVuY3Rpb24oaXRlbVNldCl7XG4gICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpIDwgaXRlbVNldC5pZHMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQgPSBpdGVtU2V0Lmlkc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFjYWNoZVtpZF0gJiYgIXJlcXVlc3RlZElkc1tpZF0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkcy5wdXNoKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZWRJZHNbaWRdPXRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGFqYXgucG9zdChcbiAgICAgICAgICAgICAgICAgICAgJy9hcGkvcG9zdC1tb2RlbHMvJyxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3Bvc3RfdHlwZSc6ICdhdHRhY2htZW50JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdwb3N0X19pbic6IGlkcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdwb3N0X3N0YXR1cyc6ICdhbnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3Bvc3RzX3Blcl9wYWdlJzogLTFcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Bpbm5lck1lc3NhZ2U6ICdSZXRyaWV2aW5nIG1lZGlhIGRhdGEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiAnRmFpbGVkIHRvIHJldHJpZXZlIG1lZGlhIGRhdGEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW1zID0gZGF0YS5wYXlsb2FkLml0ZW1zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlW2l0ZW0uaWRdID0gaXRlbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrcyA9IHJlcXVlc3RRdWV1ZVtpdGVtLmlkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY2FsbGJhY2tzICYmIGNhbGxiYWNrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzW2ldKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdE11bHRpUXVldWUuZm9yRWFjaChmdW5jdGlvbihpdGVtU2V0KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW1zID0gW10sIGl0ZW0sIGlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDsgaTxpdGVtU2V0Lmlkcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZCA9IGl0ZW1TZXQuaWRzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbSA9IGNhY2hlW2lkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGl0ZW0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVNldC5jYWxsYmFjayhpdGVtcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiByZXNvbHZlcjtcbiAgICB9XSlcbiAgICAuZGlyZWN0aXZlKCdtZWRpYVBpY2tlcicsIFsnYnV0dG9ucycsICdtZWRpYVJlc29sdmVyJywgJ25scycsICdtb2RhbHMnLCBmdW5jdGlvbihidXR0b25zLCBtZWRpYVJlc29sdmVyLCBubHMsIG1vZGFscyl7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0FFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogUGlja2VyIHBvcHVwIHRpdGxlXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdAPycsXG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBQaWNrZXIgYnV0dG9uIHRleHQgKGJvdGggcG9wdXAgYW5kIGlubGluZSBpbnB1dClcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBwaWNrZXJCdXR0b25UZXh0OiAnQD8nLFxuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogTWVkaWEgdHlwZTogYWxsLCBpbWFnZXMsIGF1ZGlvLCB2aWRlb1xuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHR5cGU6ICdAPycsXG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBWYWx1ZSAobW9kZWwpIG1vZGU6IGlkfHVybHxvYmplY3RcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBtb2RlOiAnQCcsXG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBTY29wZSBtb2RlbCB0aGF0IGlzIGJlaW5nIGFkanVzdGVkXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgbW9kZWw6ICc9JyxcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIEltYWdlIHNpemU6IHRodW1ibmFpbCwgbWVkaXVtLCBsYXJnZSwgZnVsbC5cbiAgICAgICAgICAgICAgICAgKiAnbWVkaXVtJyBieSBkZWZhdWx0LCBidXQgZG93bmdyYWRlZCB0byAndGh1bWJuYWlsJyBmb3Igbm9uLWltYWdlIGF0dGFjaG1lbnRzXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgc2l6ZTogJ0AnLFxuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSXMgbWVkaWEgcGlja2VyIGFibGUgdG8gc2VsZWN0IG11bHRpcGxlIGl0ZW1zXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgbXVsdGlwbGU6ICdAPycsXG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBJbiBjYXNlIG9mIG11bHRpcGxlIG1vZGUgZGVmaW5lcyB3aWR0aCBvZiBtZWRpYSBpdGVtLFxuICAgICAgICAgICAgICAgICAqIElmIG5vdCBkZWZpbmVkIHVzZXMgaXRlbS1oZWlnaHQgb3IgMTAwcHhcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpdGVtV2lkdGg6ICdAPycsXG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBJbiBjYXNlIG9mIG11bHRpcGxlIG1vZGUgZGVmaW5lcyBoZWlnaHQgb2YgbWVkaWEgaXRlbSxcbiAgICAgICAgICAgICAgICAgKiBJZiBub3QgZGVmaW5lZCB1c2VzIGl0ZW0td2lkdGggb3IgMTAwcHhcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpdGVtSGVpZ2h0OiAnQD8nLFxuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSXRlbSBiYWNrZ3JvdW5kIG1vZGU6XG4gICAgICAgICAgICAgICAgICogLSBjb250YWluXG4gICAgICAgICAgICAgICAgICogLSBjb3ZlclxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGl0ZW1Nb2RlOiAnQD8nLFxuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogT24gbW9kZWwgY2hhbmdlIGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U6ICcmPydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGU6XG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJjaGF5a2EtbWVkaWFfcGlja2VyXCIgZGF0YS1uZy1jbGFzcz1cIntcXCdpbWFnZS1zZXRcXCc6IGhhc0ltYWdlcygpLCBtdWx0aXBsZTogbXVsdGlwbGV9XCI+JyArXG4gICAgICAgICAgICAgICAgJzxpbWcgZGF0YS1uZy1zcmM9XCJ7e21lZGlhU3JjfX1cIiBkYXRhLW5nLXNob3c9XCIhIW1lZGlhU3JjXCIgZGF0YS1uZy1jbGljaz1cInBpY2tNZWRpYSgpO1wiLz4nICtcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1lZGlhX2l0ZW1zIHNvcnRhYmxlLXJvd1wiIGRhdGEtbmctc2hvdz1cIm1lZGlhSXRlbXMgJiYgbWVkaWFJdGVtcy5sZW5ndGhcIiBkYXRhLW5nLW1vZGVsPVwibWVkaWFJdGVtc1wiIGRhdGEtYXMtc29ydGFibGU9XCJkcmFnQ29udHJvbFwiID4nICtcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1lZGlhX2l0ZW1cIiBkYXRhLW5nLWNsYXNzPVwie2NvbnRhaW46IGl0ZW1Nb2RlID09PSBcXCdjb250YWluXFwnLCBjb3ZlcjogaXRlbU1vZGUgPT09IFxcJ2NvdmVyXFwnfVwiIGRhdGEtbmctcmVwZWF0PVwiaXRlbSBpbiBtZWRpYUl0ZW1zXCIgZGF0YS1hcy1zb3J0YWJsZS1pdGVtIHN0eWxlPVwiYmFja2dyb3VuZC1pbWFnZToge3tcXCd1cmwoXFwnK2l0ZW0udXJsK1xcJylcXCd9fTsgd2lkdGg6IHt7aXRlbVdpZHRoIHx8IGl0ZW1IZWlnaHQgfHwgXFwnMTAwcHhcXCd9fTsgaGVpZ2h0OiB7e2l0ZW1IZWlnaHQgfHwgaXRlbVdpZHRoIHx8IFxcJzEwMHB4XFwnfX07XCI+JyArXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzb3J0YWJsZS1oYW5kbGVcIiBkYXRhLWFzLXNvcnRhYmxlLWl0ZW0taGFuZGxlPicgK1xuICAgICAgICAgICAgICAgICc8YnV0dG9uIGNsYXNzPVwiYnRuX3JlbW92ZVwiIGRhdGEtbmctY2xpY2s9XCJyZW1vdmVNZWRpYUl0ZW0oJGV2ZW50LCBpdGVtKVwiIGRhdGEtbm8tZHJhZyA+PHNwYW4+JnRpbWVzOzwvc3Bhbj48L2J1dHRvbj4nICtcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm5vX2ltYWdlXCIgZGF0YS1uZy1jbGljaz1cInBpY2tNZWRpYSgpO1wiIGRhdGEtbmctc2hvdz1cIiFoYXNJbWFnZXMoKVwiPicgK1xuICAgICAgICAgICAgICAgICcgICA8ZGl2IGRhdGEtc3Bpbm5lcj1cInNwaW5uZXJcIj48L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJub3RlXCIgZGF0YS1uZy10cmFuc2NsdWRlPjwvZGl2PicgK1xuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiYnV0dG9uc1wiPicgK1xuICAgICAgICAgICAgICAgICcgICA8YnV0dG9uIGNsYXNzPVwie3tidXR0b25DbGFzc319IGJ0bl9jbGVhclwiIGRhdGEtbmctY2xpY2s9XCJjbGVhck1lZGlhKCRldmVudCk7XCIgZGF0YS1uZy1zaG93PVwiISFoYXNJbWFnZXMoKVwiID57eyBcIkNsZWFyXCIgfCBubHN9fTwvYnV0dG9uPicgK1xuICAgICAgICAgICAgICAgICcgICA8YnV0dG9uIGNsYXNzPVwie3tidXR0b25DbGFzc319IGJ0bl9waWNrXCIgZGF0YS1uZy1jbGljaz1cInBpY2tNZWRpYSgkZXZlbnQpO1wiPnt7IHBpY2tlckJ1dHRvblRleHQgfHwgXCJCcm93c2VcIiB8IG5sc319PC9idXR0b24+JyArXG4gICAgICAgICAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAgICAgICAgICc8L2Rpdj4nLFxuICAgICAgICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCl7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmJ1dHRvbkNsYXNzID0gYnV0dG9ucy5nZXRCdXR0b25DbGFzcygpO1xuICAgICAgICAgICAgICAgICRzY29wZS5tZWRpYVNyYyA9IG51bGw7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm1lZGlhSXRlbXMgPSBbXTtcbiAgICAgICAgICAgICAgICAkc2NvcGUubW9kZSA9ICRzY29wZS5tb2RlIHx8ICdpZCc7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNpemUgPSAkc2NvcGUuc2l6ZSB8fCAnbWVkaXVtJztcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3Bpbm5lciA9IG51bGw7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnByZXZNb2RlbCA9ICcnO1xuXG4gICAgICAgICAgICAgICAgdmFyIGZyYW1lID0gbnVsbDtcbiAgICAgICAgICAgICAgICB2YXIgd3AgPSB3aW5kb3cud3A7XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUucHJldk1vZGVsID0gJHNjb3BlLm1vZGVsP0pTT04uc3RyaW5naWZ5KCRzY29wZS5tb2RlbCk6Jyc7XG5cblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFdhdGNoIG1hZGVsLCByZXF1ZXN0IGl0ZW1zIGJ5IGlkcyBhbmQgcmVuZGVyIHRoZW1cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAkc2NvcGUuJHdhdGNoKCdtb2RlbCcsIGZ1bmN0aW9uKG1vZGVsKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoJHNjb3BlLm11bHRpcGxlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoJHNjb3BlLm1vZGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2lkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1lZGlhU3JjID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tZWRpYUl0ZW1zID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG1vZGVsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRzY29wZS5zcGlubmVyKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3Bpbm5lci5zaG93KG5scy5fKCdSZXRyaWV2aW5nIG1lZGlhIGRhdGEuLi4nKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYVJlc29sdmVyLnJlc29sdmVCeUlkcyhtb2RlbCwgZnVuY3Rpb24oaXRlbXMpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRzY29wZS5zcGlubmVyKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNwaW5uZXIuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWVkaWFJdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBpdGVtLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOihpdGVtLmltYWdlWyRzY29wZS5zaXplXSB8fCBpdGVtLmltYWdlLnRodW1ibmFpbCkudXJsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndXJsJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uKHVybCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWVkaWFJdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHVybFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICgkc2NvcGUubW9kZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWVkaWFTcmMgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1lZGlhSXRlbXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwgPSBwYXJzZUludChtb2RlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG1vZGVsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRzY29wZS5zcGlubmVyKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3Bpbm5lci5zaG93KG5scy5fKCdSZXRyaWV2aW5nIG1lZGlhIGRhdGEuLi4nKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYVJlc29sdmVyLnJlc29sdmVCeUlkKG1vZGVsLCBmdW5jdGlvbihpdGVtKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkc2NvcGUuc3Bpbm5lcil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zcGlubmVyLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9tZWRpYSA9IGl0ZW07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1lZGlhU3JjID0gKGl0ZW0uaW1hZ2VbJHNjb3BlLnNpemVdIHx8IGl0ZW0uaW1hZ2UudGh1bWJuYWlsKS51cmw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd1cmwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWVkaWFTcmMgPSBtb2RlbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdNb2RlbCA9IG1vZGVsP0pTT04uc3RyaW5naWZ5KG1vZGVsKTonJztcbiAgICAgICAgICAgICAgICAgICAgaWYoJHNjb3BlLm9uQ2hhbmdlICYmIG5ld01vZGVsICE9PSAkc2NvcGUucHJldk1vZGVsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vbkNoYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByZXZNb2RlbCA9IG5ld01vZGVsO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogbmctc29ydGFibGUgb3B0aW9uc1xuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogQHR5cGUge3tvcmRlckNoYW5nZWQ6IEZ1bmN0aW9uLCBzY3JvbGxhYmxlQ29udGFpbmVyOiAqfX1cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAkc2NvcGUuZHJhZ0NvbnRyb2wgPSB7XG4gICAgICAgICAgICAgICAgICAgIC8vYWNjZXB0OiBmdW5jdGlvbiAoc291cmNlSXRlbUhhbmRsZVNjb3BlLCBkZXN0U29ydGFibGVTY29wZSkge3JldHVybiB0cnVlO30sLy9vdmVycmlkZSB0byBkZXRlcm1pbmUgZHJhZyBpcyBhbGxvd2VkIG9yIG5vdC4gZGVmYXVsdCBpcyB0cnVlLlxuICAgICAgICAgICAgICAgICAgICAvL2l0ZW1Nb3ZlZDogZnVuY3Rpb24gKGV2ZW50KSB7fSxcbiAgICAgICAgICAgICAgICAgICAgb3JkZXJDaGFuZ2VkOiBmdW5jdGlvbihldmVudCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXBkYXRlTXVsdGlNb2RlbCgkc2NvcGUubWVkaWFJdGVtcyk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vY29udGFpbmVyUG9zaXRpb25pbmc6ICdhYnNvbHV0ZSdcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsYWJsZUNvbnRhaW5lcjogJGVsZW1lbnQuYXR0cignaWQnKS8vb3B0aW9uYWwgcGFyYW0uXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIENoZWNrIGlmIGltYWdlcyBhcmUgc3R0XG4gICAgICAgICAgICAgICAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAkc2NvcGUuaGFzSW1hZ2VzID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhJHNjb3BlLm1lZGlhSXRlbXMgJiYgISEkc2NvcGUubWVkaWFJdGVtcy5sZW5ndGggfHwgISEkc2NvcGUubWVkaWFTcmM7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFJlbW92ZXIgbWVkaWEgaXRlbSBpbiBtdWx0aXBsZSBtb2RlXG4gICAgICAgICAgICAgICAgICogQHBhcmFtICRldmVudFxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7e2lkOiBpbnQsIHVybDogc3RyaW5nfX0gaXRlbVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICRzY29wZS5yZW1vdmVNZWRpYUl0ZW0gPSBmdW5jdGlvbigkZXZlbnQsIGl0ZW0pe1xuICAgICAgICAgICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxzLmNvbmZpcm0obmxzLl8oJ0RlbGV0ZSB0aGlzIGl0ZW0/JyksIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoJHNjb3BlLm1vZGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2lkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBpdGVtLmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd1cmwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGl0ZW0udXJsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZSA9IG5ldyBSZWdFeHAoJ1xcXFxiJyt2YWx1ZSsnXFxcXGJcXFxccz8nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tb2RlbCA9ICRzY29wZS5tb2RlbC5yZXBsYWNlKHJlLCAnJykudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogVXBkYXRlIG1vZGVsIGluIG11bHRpcGxlIG1vZGVcbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBpdGVtc1xuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICRzY29wZS51cGRhdGVNdWx0aU1vZGVsID0gZnVuY3Rpb24oaXRlbXMpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCRzY29wZS5tb2RlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdpZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKGl0ZW0uaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd1cmwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaChpdGVtLnVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1vZGVsID0gdmFsdWVzLmpvaW4oJyAnKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogUGljayBtZWRpYVxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSAkZXZlbnRcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAkc2NvcGUucGlja01lZGlhID0gZnVuY3Rpb24oJGV2ZW50KXtcbiAgICAgICAgICAgICAgICAgICAgaWYoJGV2ZW50ICYmICRldmVudC5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYoZnJhbWUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWUuJGVsLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmKHRydWUgfHwgIWZyYW1lKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lID0gd3AubWVkaWEoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBubHMuXygkc2NvcGUudGl0bGUgfHwgJ1NlbGVjdCBvciBVcGxvYWQgTWVkaWEnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogbmxzLl8oJHNjb3BlLnBpY2tlckJ1dHRvblRleHQgfHwgJ1VzZSB0aGlzIG1lZGlhJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpcGxlOiAkc2NvcGUubXVsdGlwbGUgIC8vIFNldCB0byB0cnVlIHRvIGFsbG93IG11bHRpcGxlIGZpbGVzIHRvIGJlIHNlbGVjdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWUub24oJ29wZW4nLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRzY29wZS5tb2RlID09PSAnaWQnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGlvbiA9IGZyYW1lLnN0YXRlKCkuZ2V0KCdzZWxlY3Rpb24nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5tb2RlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJHNjb3BlLm11bHRpcGxlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubW9kZWwuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uKGlkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmFkZCh3cC5tZWRpYS5hdHRhY2htZW50KGlkKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uYWRkKHdwLm1lZGlhLmF0dGFjaG1lbnQoJHNjb3BlLm1vZGVsKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2hlbiBhbiBpbWFnZSBpcyBzZWxlY3RlZCBpbiB0aGUgbWVkaWEgZnJhbWUuLi5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lLm9uKCAnc2VsZWN0JywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgbWVkaWEgYXR0YWNobWVudCBkZXRhaWxzIGZyb20gdGhlIGZyYW1lIHN0YXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJHNjb3BlLm11bHRpcGxlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dGFjaG1lbnRzID0gZnJhbWUuc3RhdGUoKS5nZXQoJ3NlbGVjdGlvbicpLnRvSlNPTigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXBkYXRlTXVsdGlNb2RlbChhdHRhY2htZW50cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dGFjaG1lbnQgPSBmcmFtZS5zdGF0ZSgpLmdldCgnc2VsZWN0aW9uJykuZmlyc3QoKS50b0pTT04oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCRzY29wZS5tb2RlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2lkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubW9kZWwgPSBhdHRhY2htZW50LmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndXJsJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubW9kZWwgPSBhdHRhY2htZW50LnVybDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGaW5hbGx5LCBvcGVuIHRoZSBtb2RhbCBvbiBjbGlja1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWUub3BlbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWUuJGVsLnNob3coKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFJlc2V0IHN0YXRlIHRvIG5vIG1lZGlhIHNlbGVjdGVkXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gJGV2ZW50XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNsZWFyTWVkaWEgPSBmdW5jdGlvbigkZXZlbnQpe1xuICAgICAgICAgICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYoJHNjb3BlLm11bHRpcGxlICYmICRzY29wZS5tZWRpYUl0ZW1zLmxlbmd0aCA+IDMpe1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWxzLmNvbmZpcm0obmxzLl8oJ1JlbW92ZSBtZWRpYSBpdGVtcz8nKSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubW9kZWwgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tb2RlbCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XSlcbiAgICAuZGlyZWN0aXZlKCdjb2xvclBpY2tlcicsIFsndXRpbHMnLCBmdW5jdGlvbih1dGlscyl7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0FFJyxcbiAgICAgICAgICAgIHNjb3BlOntcbiAgICAgICAgICAgICAgICBkZWZhdWx0Q29sb3I6ICdAPycsXG4gICAgICAgICAgICAgICAgcGFsZXR0ZXM6ICc9PydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbigkc2NvcGUsIGVsZW1lbnQsIGF0dHJzKXtcbiAgICAgICAgICAgICAgICB2YXIgJCA9IGFuZ3VsYXIuZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgJGVsZW1lbnQgPSAkKGVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgdmFyIG9uUGlja2VyQ29sb3JDaGFuZ2UgPSBmdW5jdGlvbihldmVudCwgY2hhbmdlKXtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRwYXJlbnQuJGFwcGx5KGF0dHJzLm5nTW9kZWwrJz1cIicrKGNoYW5nZSAmJiBjaGFuZ2UuY29sb3IudG9TdHJpbmcoKSB8fCAnJykrJ1wiOycpO1xuICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmKCQuZm4ud3BDb2xvclBpY2tlcil7XG4gICAgICAgICAgICAgICAgICAgICRlbGVtZW50LmF0dHIoJ3R5cGUnLCAnaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKCc8aW5wdXQgdHlwZT1cInRleHRcIj4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmluc2VydEFmdGVyKGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAudmFsKCRlbGVtZW50LnZhbCgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLndwQ29sb3JQaWNrZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRDb2xvcjogJHNjb3BlLmRlZmF1bHRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhbGV0dGVzOiAkc2NvcGUucGFsZXR0ZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlOiBvblBpY2tlckNvbG9yQ2hhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyOiBvblBpY2tlckNvbG9yQ2hhbmdlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRwYXJlbnQuJHdhdGNoKGF0dHJzLm5nTW9kZWwsIGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZhbHVlIT09JGlucHV0LnZhbCgpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQud3BDb2xvclBpY2tlcignY29sb3InLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgJGlucHV0RGl2ID0gJGVsZW1lbnQucGFyZW50KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAkcGlja2VyQ29udGFpbmVyID0gJGlucHV0RGl2LmZpbmQoJy53cC1waWNrZXItY29udGFpbmVyJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAkcGlja2VyQ29sb3JCdXR0b24gPSAkcGlja2VyQ29udGFpbmVyLmZpbmQoJy53cC1jb2xvci1yZXN1bHQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICRwaWNrZXJJbnB1dFdyYXAgPSAkcGlja2VyQ29udGFpbmVyLmZpbmQoJy53cC1waWNrZXItaW5wdXQtd3JhcCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJHBpY2tlckhvbGRlciA9ICRwaWNrZXJDb250YWluZXIuZmluZCgnLndwLXBpY2tlci1ob2xkZXInKTtcbiAgICAgICAgICAgICAgICAgICAgJHBpY2tlckNvbnRhaW5lci5vZmYoJ2tleXVwJywgJyonKTtcbiAgICAgICAgICAgICAgICAgICAgJGlucHV0Lm9mZigna2V5dXAnKS5vbiggJ2tleXVwJywgZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBldmVudC5rZXlDb2RlID09PSAxMyB8fCBldmVudC5rZXlDb2RlID09PSAzMiApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vJHBpY2tlckNvbG9yQnV0dG9uLnRyaWdnZXIoICdjbGljaycgKTsvLy5uZXh0KCkuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQud3BDb2xvclBpY2tlcignY2xvc2UnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8kcGlja2VyQ29sb3JCdXR0b24uYXBwZW5kVG8oJGlucHV0RGl2KTtcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XSlcbiAgICAuZGlyZWN0aXZlKCdqb2JDb250cm9sJywgW2Z1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0FFJyxcbiAgICAgICAgICAgIHNjb3BlOntcbiAgICAgICAgICAgICAgICBqb2JDb250cm9sOiAnPScsXG4gICAgICAgICAgICAgICAgam9iSWQ6ICc9PycsXG4gICAgICAgICAgICAgICAgcGVySXRlcmF0aW9uOiAnPT8nLFxuICAgICAgICAgICAgICAgIGJ1dHRvbnM6ICdAPydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICdqYycsXG4gICAgICAgICAgICB0ZW1wbGF0ZTpcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImNoYXlrYS1qb2JfY29udHJvbCB7e2pjLnN0YXRlfX1cIj4nICtcbiAgICAgICAgICAgICAgICAnICAgPGRpdiBjbGFzcz1cInByb2dyZXNzYmFyXCI+JyArXG4gICAgICAgICAgICAgICAgJyAgICAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3NfbGFiZWxcIj57eyBqYy50b3RhbCA/IGpjLnByb2Nlc3NlZCArIFwiIC8gXCIgKyBqYy50b3RhbCArIFwiIChcIiArIE1hdGguZmxvb3IoamMucHJvY2Vzc2VkIC8gamMudG90YWwgKiAxMDApICsgXCIlKVwiIDogXCIwJVwiIH19PC9kaXY+JyArXG4gICAgICAgICAgICAgICAgJyAgIDwvZGl2PicgK1xuICAgICAgICAgICAgICAgICcgICA8ZGl2IGNsYXNzPVwiYm94X2NvbnRyb2xzXCI+JyArXG4gICAgICAgICAgICAgICAgJyAgICAgICA8YnV0dG9uIGNsYXNzPVwiZGFzaGljb25zLWJlZm9yZSBkYXNoaWNvbnMtY29udHJvbHMtcGxheSBidXR0b24gYnV0dG9uLXNtYWxsIGJ1dHRvbl9zdGFydFwiIGRhdGEtbmctY2xpY2s9XCJqYy5zdGFydCgpXCIgdGl0bGU9XCJ7eyBcXCdidG5fc3RhcnRcXCcgfCBubHMgfX1cIiBkYXRhLW5nLXNob3c9XCIhamMuc3RhdGUgJiYgamMuYnV0dG9ucy5pbmRleE9mKFxcJ3N0YXJ0XFwnKSA+PSAwXCI+PC9idXR0b24+JyArXG4gICAgICAgICAgICAgICAgJyAgICAgICA8YnV0dG9uIGNsYXNzPVwiZGFzaGljb25zLWJlZm9yZSBkYXNoaWNvbnMtY29udHJvbHMtcGF1c2UgYnV0dG9uIGJ1dHRvbi1zbWFsbCBidXR0b25fcGF1c2VcIiBkYXRhLW5nLWNsaWNrPVwiamMucGF1c2UoKVwiIHRpdGxlPVwie3sgXFwnYnRuX3BhdXNlXFwnIHwgbmxzIH19XCIgZGF0YS1uZy1zaG93PVwiamMuc3RhdGU9PT1cXCdydW5uaW5nXFwnICYmIGpjLmJ1dHRvbnMuaW5kZXhPZihcXCdwYXVzZVxcJykgPj0gMFwiPjwvYnV0dG9uPicgK1xuICAgICAgICAgICAgICAgICcgICAgICAgPGJ1dHRvbiBjbGFzcz1cImRhc2hpY29ucy1iZWZvcmUgZGFzaGljb25zLWNvbnRyb2xzLXJlcGVhdCBidXR0b24gYnV0dG9uLXNtYWxsIGJ1dHRvbl9yZXN1bWVcIiBkYXRhLW5nLWNsaWNrPVwiamMucmVzdW1lKClcIiB0aXRsZT1cInt7IFxcJ2J0bl9yZXN1bWVcXCcgfCBubHMgfX1cIiBkYXRhLW5nLXNob3c9XCJqYy5zdGF0ZT09PVxcJ3BhdXNlZFxcJyAmJiBqYy5idXR0b25zLmluZGV4T2YoXFwncmVzdW1lXFwnKSA+PSAwXCI+PC9idXR0b24+JyArXG4gICAgICAgICAgICAgICAgJyAgICAgICA8YnV0dG9uIGNsYXNzPVwiZGFzaGljb25zLWJlZm9yZSBkYXNoaWNvbnMtbm8gYnV0dG9uIGJ1dHRvbi1zbWFsbCBidXR0b25fc3RvcFwiIGRhdGEtbmctY2xpY2s9XCJqYy5zdG9wKClcIiB0aXRsZT1cInt7IFxcJ2J0bl9zdG9wXFwnIHwgbmxzIH19XCIgZGF0YS1uZy1zaG93PVwiamMuc3RhdGUgJiYgamMuYnV0dG9ucy5pbmRleE9mKFxcJ3N0b3BcXCcpID49IDBcIj48L2J1dHRvbj4nICtcbiAgICAgICAgICAgICAgICAnICAgICAgIDxzcGFuIGNsYXNzPVwiZmllbGRfaXRlbXNfcGVyX2l0ZXJhdGlvblwiPicgK1xuICAgICAgICAgICAgICAgICcgICAgICAgICAgIDxsYWJlbD57eyBcImxhYmVsX3Blcl9pdGVyYXRpb25cIiB8IG5scyB9fTwvbGFiZWw+JyArXG4gICAgICAgICAgICAgICAgJyAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBkYXRhLW5nLW1vZGVsPVwiamMucGVySXRlcmF0aW9uXCIvPicgK1xuICAgICAgICAgICAgICAgICcgICAgICAgPC9zcGFuPicgK1xuICAgICAgICAgICAgICAgICcgICA8L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAnICAgPGRpdiBkYXRhLXNwaW5uZXI9XCJzcGlubmVyXCI+PC9kaXY+JyArXG4gICAgICAgICAgICAgICAgJyAgIDxkaXYgY2xhc3M9XCJib3hfb3V0cHV0XCI+JyArXG4gICAgICAgICAgICAgICAgJyAgICAgICA8ZGl2IGRhdGEtbmctcmVwZWF0PVwibWVzc2FnZSBpbiBqYy5sb2cgdHJhY2sgYnkgJGluZGV4XCIgY2xhc3M9XCJtZXNzYWdlXCI+e3ttZXNzYWdlfX08L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAnICAgPC9kaXY+JyArXG4gICAgICAgICAgICAgICAgJzwvZGl2PicsXG5cbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCRzY29wZSl7XG4gICAgICAgICAgICAgICAgdmFyIGN0cmwgPSB7XG4gICAgICAgICAgICAgICAgICAgIGpvYklkOiAkc2NvcGUuam9iSWQsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgcGVySXRlcmF0aW9uOiAkc2NvcGUucGVySXRlcmF0aW9uIHx8IDEwLFxuICAgICAgICAgICAgICAgICAgICB0b3RhbDogMTAwLFxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzZWQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIGxvZzogW10sXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbnM6ICRzY29wZS5idXR0b25zID9cbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5idXR0b25zLnNwbGl0KCcgJykgOlxuICAgICAgICAgICAgICAgICAgICAgICAgWydzdGFydCcsICdwYXVzZScsICdyZXN1bWUnLCAnc3RvcCddLFxuXG4gICAgICAgICAgICAgICAgICAgIHNldEpvYklkOiBmdW5jdGlvbih2YWwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5qb2JJZCA9IHZhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdHJsO1xuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIGdldEpvYklkOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN0cmwuam9iSWQ7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgc2V0UGVySXRlcmF0aW9uOiBmdW5jdGlvbih2YWwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5wZXJJdGVyYXRpb24gPSB2YWw7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3RybDtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICBnZXRQZXJJdGVyYXRpb246IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3RybC5wZXJJdGVyYXRpb247XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgc2V0VG90YWw6IGZ1bmN0aW9uKHZhbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnRvdGFsID0gdmFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN0cmw7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0VG90YWw6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3RybC50b3RhbDtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICBzZXRQcm9jZXNzZWQ6IGZ1bmN0aW9uKHZhbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnByb2Nlc3NlZCA9IHZhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdHJsO1xuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIGdldFByb2Nlc3NlZDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdHJsLnByb2Nlc3NlZDtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICBpc0ZpbmlzaGVkOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN0cmwuZ2V0VG90YWwoKSA9PT0gY3RybC5nZXRQcm9jZXNzZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICBzZXRQcm9ncmVzczogZnVuY3Rpb24ocHJvY2Vzc2VkLCB0b3RhbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnNldFByb2Nlc3NlZChwcm9jZXNzZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5zZXRUb3RhbCh0b3RhbCB8fCBjdHJsLmdldFRvdGFsKCkgfHwgMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdHJsLmlzRmluaXNoZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuc2V0U3RhdGUoJ2ZpbmlzaGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3RybDtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICBzZXRTdGF0ZTogZnVuY3Rpb24odmFsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuc3RhdGUgPSB2YWw7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3RybDtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICBnZXRTdGF0ZTogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdHJsLnN0YXRlO1xuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIGFkZExvZ01lc3NhZ2U6IGZ1bmN0aW9uKG1lc3NhZ2Upe1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5sb2cucHVzaChtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICBjbGVhckxvZzogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwubG9nID0gW107XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ0pvYkNvbnRyb2wuc3RhcnQnLCBjdHJsLmpvYklkKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICBzdGFydGVkOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5zZXRTdGF0ZSgncnVubmluZycpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIHBhdXNlOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdKb2JDb250cm9sLnBhdXNlJywgY3RybC5qb2JJZCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgcGF1c2VkOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5zZXRTdGF0ZSgncGF1c2VkJyk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgcmVzdW1lOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdKb2JDb250cm9sLnJlc3VtZScsIGN0cmwuam9iSWQpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIHJlc3VtZWQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnNldFN0YXRlKCdydW5uaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnSm9iQ29udHJvbC5zdG9wJywgY3RybC5qb2JJZCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgc3RvcHBlZDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuc2V0U3RhdGUoJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICRzY29wZS5qb2JDb250cm9sID0gY3RybDtcblxuICAgICAgICAgICAgICAgIHJldHVybiBjdHJsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1dKVxuICAgIC5jb25maWcoWydubHNQcm92aWRlcicsICdidXR0b25zUHJvdmlkZXInLCBmdW5jdGlvbihubHNQcm92aWRlciwgYnV0dG9uc1Byb3ZpZGVyKXtcblxuICAgICAgICAvLyBBZGRpbmcgYSB0cmFuc2xhdGlvbiB0YWJsZSBmb3IgdGhlIEVuZ2xpc2ggbGFuZ3VhZ2VcbiAgICAgICAgbmxzUHJvdmlkZXIuc2V0VHJhbnNsYXRpb25zKCdlbi1VUycsIHtcbiAgICAgICAgICAgICdidG5fc3RhcnQnOiAnU3RhcnQnLFxuICAgICAgICAgICAgJ2J0bl9zdG9wJzogJ1N0b3AnLFxuICAgICAgICAgICAgJ2J0bl9wYXVzZSc6ICdQYXVzZScsXG4gICAgICAgICAgICAnYnRuX3Jlc3VtZSc6ICdSZXN1bWUnLFxuICAgICAgICAgICAgJ2xhYmVsX3Blcl9pdGVyYXRpb24nOiAnUGVyIGl0ZXJhdGlvbidcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbmxzUHJvdmlkZXIuc2V0VHJhbnNsYXRpb25zKCdydS1SVScsIHtcbiAgICAgICAgICAgICdidG5fc3RhcnQnOiAn0KHRgtCw0YDRgicsXG4gICAgICAgICAgICAnYnRuX3N0b3AnOiAn0KHRgtC+0L8nLFxuICAgICAgICAgICAgJ2J0bl9wYXVzZSc6ICfQn9Cw0YPQt9CwJyxcbiAgICAgICAgICAgICdidG5fcmVzdW1lJzogJ9CS0L7Qt9C+0LHQvdC+0LLQuNGC0YwnLFxuICAgICAgICAgICAgJ2xhYmVsX3Blcl9pdGVyYXRpb24nOiAn0JfQsCDQuNGC0LXRgNCw0YbQuNGOJ1xuICAgICAgICB9KTtcblxuICAgICAgICBidXR0b25zUHJvdmlkZXIuc2V0QnV0dG9uQ2xhc3MoJ2J1dHRvbicpO1xuICAgIH1dKVxuO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
