{"version":3,"sources":["chayka-utils.js","angular-sanitize.js","chayka-buttons.js","chayka-nls.js","chayka-spinners.js","chayka-ajax.js","chayka-modals.js","chayka-forms.js","chayka-pagination.js"],"names":["_typeof","Symbol","iterator","obj","constructor","angular","module","factory","$window","$timeout","$compile","_arguments","arguments","Chayka","Utils","declare","classname","parent","implementation","parts","split","root","part","i","length","isUndefined","extend","isFunction","ensure","isObject","getItem","key","defaultValue","undefined","isArray","setObjectDefaults","defaults","hasOwnProperty","updateObject","update","property","getHtmlParam","$element","name","value","attr","data","template","tpl","params","replace","all","param","toString","patchScope","scope","$apply","getResourceUrl","appId","resPath","Core","appResFolderUrls","recursiveDirectiveCompile","element","link","post","compiledContents","contents","remove","pre","clone","append","apply","ordinal","input","n","Math","min","directive","utils","restrict","templateUrl","attributes","include","src","filter","window","$SanitizeProvider","this","$get","$$sanitizeUri","html","buf","htmlParser","htmlSanitizeWriter","uri","isImage","test","join","sanitizeText","chars","writer","noop","makeMap","str","items","handler","parseStartTag","tag","tagName","rest","unary","lowercase","blockElements","stack","last","inlineElements","parseEndTag","optionalEndTagElements","voidElements","push","attrs","ATTR_REGEXP","match","doubleQuotedValue","singleQuotedValue","unquotedValue","decodeEntities","start","pos","end","index","text","specialElements","RegExp","COMMENT_REGEXP","CDATA_REGEXP","indexOf","lastIndexOf","comment","substring","DOCTYPE_REGEXP","BEGING_END_TAGE_REGEXP","END_TAG_REGEXP","BEGIN_TAG_REGEXP","START_TAG_REGEXP","$sanitizeMinErr","hiddenPre","innerHTML","textContent","encodeEntities","SURROGATE_PAIR_REGEXP","hi","charCodeAt","low","NON_ALPHANUMERIC_REGEXP","uriValidator","ignore","out","bind","validElements","forEach","lkey","validAttrs","uriAttrs","$$minErr","optionalEndTagBlockElements","optionalEndTagInlineElements","svgElements","htmlAttrs","svgAttrs","document","createElement","provider","$sanitize","LINKY_URL_REGEXP","MAILTO_REGEXP","target","addText","addLink","url","isDefined","raw","substr","stdButtonClass","buttons","setButtonClass","cls","getButtonClass","currentLocale","dictionaries","nls","setLocale","locale","getLocale","setTranslations","translations","getSupportedLocales","Object","keys","_","dictionary","defaultDictionary","config","nlsProvider","spinner","visible","message","controller","$scope","show","hide","ctrl","spinners","messages","total","id","$","on","e","trigger","$http","modals","generalSpinner","ajax","Ajax","errorHandlers","addErrorHandler","errorCode","code","removeErrorHandler","handleError","payload","res","reg","handleErrors","empty_response","errors","processResponse","response","defaultMessage","isString","m","trim","spinnersUsed","prepare","options","spinnerId","spinnerFieldId","spinnerMessage","errorMessage","successMessage","formValidator","validateOnSend","send","success","error","complete","prepared","sendHandler","result","validateFields","validateFieldById","setFieldState","clearMessage","completeHandler","status","headers","errorHandler","showErrors","alert","successHandler","showMessage","request","method","get","head","jsonp","put","patch","promise","del","postData","confirm","onSuccess","sendRequest","click","preventDefault","btn","queue","create","button","defaultOptions","title","modalClass","callback","content","close","$event","currentTarget","shift","buttonClass","controllerAs","bindToController","transclude","modal","width","height","onClose","isOpen","setTitle","setButtons","btns","css","Yes","No","Ok","validator","scrollMargin","scrollDuration","fields","messageBox","setMessageBox","msgBox","state","addField","field","setFieldError","clearFieldError","checkRequired","c","required","active","checkLength","max","checkRange","range","lower","minE","greater","maxE","checkLt","lt","checkLe","le","checkGt","gt","checkGe","ge","checkRegexp","regexp","valid","forbid","checkPasswords","passwords","repeatField","repeat","checkApi","api","encodeURIComponent","checkCustom","custom","$parent","call","validateField","silent","checks","check","fieldId","scrollTo","scrollPos","offset","top","duration","parseInt","jQuery","pageYOffset","animate","scrollTop","scrollUp","delayedCall","require","label","hint","formCtrl","setupIf","$watch","setupRequired","short","shorts","condition","setupLength","messageTemplate","setupRange","minStr","maxStr","format","parseFloat","setupLt","setupLe","setupGt","setupGe","setupRegExp","patternAndModifiers","exec","pattern","modifiers","setupEmail","setupPasswords","setupApiCall","delay","$input","setupCustom","find","inputType","model","$oldLabel","$newLabel","addClass","focus","blur","removeClass","resizeTextarea","prop","timeouts","callId","handle","cancel","message_required","message_length","message_range","message_lt","message_le","message_gt","message_ge","message_regexp","message_email","message_passwords","message_custom","pagination","currentPage","totalPages","packSize","hrefTemplate","order","page","$emit","setCurrentPage","val","render","getCurrentPage","setTotalPages","getTotalPages","setPackSize","getPackSize","setHrefTemplate","getHrefTemplate","getHref","href","getItems","current","packStart","packFinish","floor","ceil","item","next","previous","next_page","previous_page"],"mappings":"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","file":"ng-modules/chayka-core.js","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nangular.module('chayka-utils', []).factory('utils', ['$window', '$timeout', '$compile', function ($window, $timeout, $compile) {\n    var _arguments = arguments;\n\n    var Chayka = $window.Chayka || {};\n\n    Chayka.Utils = Chayka.Utils || {\n\n        /**\n         * Convenient way do define some object with complex names like Chayka.Auth.aaa\n         *\n         * @param {String} classname\n         * @param {Object} parent\n         * @param {Object} implementation\n         * @returns {*}\n         */\n        declare: function declare(classname, parent, implementation) {\n            var parts = classname.split('.');\n            var root = $window;\n            var part = '';\n            for (var i = 0; i < parts.length; i++) {\n                part = parts[i];\n                if (i === parts.length - 1) {\n                    break;\n                }\n                root[part] = root[part] || {};\n                root = root[part];\n            }\n\n            if (angular.isUndefined(implementation)) {\n                implementation = parent;\n                parent = null;\n            }\n\n            if (parent) {\n                if (parent.extend && angular.isFunction(parent.extend)) {\n                    root[part] = parent.extend(implementation);\n                } else {\n                    root[part] = angular.extend(parent, implementation);\n                }\n            } else {\n                root[part] = implementation;\n            }\n\n            return root[part];\n        },\n\n        /**\n         * Ensure that object exists, extends it if needed and returns reference to it.\n         *\n         * @param {String} classname\n         * @param {Object} extend\n         * @returns {*}\n         */\n        ensure: function ensure(classname, extend) {\n            var parts = classname.split('.');\n            var root = $window;\n            var part = '';\n            for (var i = 0; i < parts.length; i++) {\n                part = parts[i];\n                root[part] = root[part] || {};\n                root = root[part];\n            }\n            if (extend && angular.isObject(extend)) {\n                angular.extend(root, extend);\n            }\n\n            return root;\n        },\n\n        /**\n         * Some little helper to get default values,\n         * Key can be complex like Chayka.Auth.aaa\n         *\n         * @param obj\n         * @param key\n         * @param defaultValue\n         * @returns {*}\n         */\n        getItem: function getItem(obj, key, defaultValue) {\n            if (defaultValue === undefined) {\n                defaultValue = null;\n            }\n            var parts = (key + '').split('.');\n            if (obj && (angular.isObject(obj) || angular.isArray(obj))) {\n                var root = obj;\n                for (var i = 0; i < parts.length; i++) {\n                    var part = parts[i];\n                    if ((angular.isObject(root) || angular.isArray(root)) && root[part] !== undefined) {\n                        root = root[part];\n                    } else {\n                        return defaultValue;\n                    }\n                }\n                return root;\n            }\n\n            return defaultValue;\n        },\n\n        /**\n         * Set default values if object members not set\n         *\n         * @param {{}} obj\n         * @param {{}} defaults\n         */\n        setObjectDefaults: function setObjectDefaults(obj, defaults) {\n            obj = obj || {};\n            for (var key in defaults) {\n                if (defaults.hasOwnProperty(key)) {\n                    if (_typeof(defaults[key]) === 'object') {\n                        obj[key] = Chayka.Utils.setObjectDefaults(obj[key] || {}, defaults[key]);\n                    } else if (obj[key] === undefined) {\n                        obj[key] = defaults[key];\n                    }\n                }\n            }\n\n            return obj;\n        },\n\n        /**\n         * Remove all existing object members and set new ones from update.\n         * Returns updated object\n         *\n         * @param {{}} obj\n         * @param {{}} update\n         * @return {{}}\n         */\n        updateObject: function updateObject(obj, update) {\n            for (var property in obj) {\n                if (obj.hasOwnProperty(property)) {\n                    if (update[property] !== undefined) {\n                        obj[property] = null;\n                    } else {\n                        delete obj[property];\n                    }\n                }\n            }\n\n            return angular.extend(obj, update);\n        },\n\n        /**\n         * Get param from html tag\n         *\n         * @param {jQuery} $element\n         * @param {string} name\n         * @param {*} defaultValue\n         * @return {*}\n         */\n        getHtmlParam: function getHtmlParam($element, name, defaultValue) {\n            var value = $element.attr(name) || $element.attr('data-' + name) || $element.data(name);\n            if (value === undefined) {\n                value = defaultValue;\n            }\n            return value;\n        },\n\n        /**\n         * Simple template function, replaces '{var}' with var value.\n         *\n         * @param {string} tpl\n         * @param {obj} params\n         * @returns {string}\n         */\n        template: function template(tpl, params) {\n            return tpl.replace(/{([^}]+)}/g, function (all, param) {\n                return params[param].toString() || '';\n            });\n        },\n\n        /**\n         * Bullet proof scope.$apply() caller\n         * @param scope\n         */\n        patchScope: function patchScope(scope) {\n            if (scope && angular.isFunction(scope.$apply)) {\n                $timeout(function () {\n                    scope.$apply();\n                }, 0);\n            }\n        },\n\n        /**\n         * Get resource url from specified chayka application (plugin or theme)\n         *\n         * @param appId\n         * @param resPath\n         * @return {*}\n         */\n        getResourceUrl: function getResourceUrl(appId, resPath) {\n            return Chayka.Utils.getItem(Chayka.Core.appResFolderUrls, appId, '/no_app_url_found/') + resPath;\n        },\n\n        /**\n         * Manually compiles the element, fixing the recursion loop.\n         * @see http://stackoverflow.com/questions/14430655/recursion-in-angular-directives\n         *\n         * @param element\n         * @param [link] A post-link function, or an object with function(s) registered via pre and post properties.\n         * @returns An object containing the linking functions.\n         */\n        recursiveDirectiveCompile: function recursiveDirectiveCompile(element, link) {\n            // Normalize the link parameter\n            if (angular.isFunction(link)) {\n                link = { post: link };\n            }\n\n            // Break the recursion loop by removing the contents\n            var contents = element.contents().remove();\n            var compiledContents;\n            return {\n                pre: link && link.pre ? link.pre : null,\n                /**\n                 * Compiles and re-adds the contents\n                 */\n                post: function post(scope, element) {\n                    // Compile the contents\n                    if (!compiledContents) {\n                        compiledContents = $compile(contents);\n                    }\n                    // Re-add the compiled contents to the element\n                    compiledContents(scope, function (clone) {\n                        element.append(clone);\n                    });\n\n                    // Call the post-linking function, if any\n                    if (link && link.post) {\n                        link.post.apply(null, _arguments);\n                    }\n                }\n            };\n        },\n\n        /**\n         * Return ordinal suffix of an integer\n         * @param {int} input\n         * @return {string}\n         */\n        ordinal: function ordinal(input) {\n            var n = input % 100;\n            return n < 11 || n > 13 ? ['st', 'nd', 'rd', 'th'][Math.min((n - 1) % 10, 3)] : 'th';\n        }\n\n    };\n\n    Chayka.Utils.ensure('Chayka.Utils', Chayka.Utils);\n\n    return Chayka.Utils;\n}])\n/**\n * Angular directive that includes a template from WP plugin or theme.\n * You don't have to know plugin server path but it's ID instead\n * Works like that:\n *      <div wp-include=\"Chayka.Core:ng/template.html\"></div>\n *      <div wp-include=\"ng/template.html\" wp-app=\"Chayka.Core\"></div>\n *      <wp-include=\"Chayka.Core:ng/template.html\"></wp-include>\n *      <wp-include=\"ng/template.html\" app-id=\"Chayka.Core\"></wp-include>\n */\n.directive('wpInclude', ['utils', function (utils) {\n    return {\n        restrict: 'AE',\n        templateUrl: function templateUrl(element, attributes) {\n            var include = attributes['wpInclude'] || attributes['wp-include'] || attributes['data-wp-include'] || attributes['src'];\n            var src = include,\n                params = include.split(':');\n            var appId = attributes['wpApp'] || attributes['wp-app'] || attributes['data-wp-app'] || attributes['app-id'];\n            if (params.length > 1) {\n                appId = params[0];\n                src = params[1];\n            }\n            return utils.getResourceUrl(appId, src);\n        }\n    };\n}]).filter('ordinal', ['utils', function (utils) {\n    return function (input) {\n        return input + utils.ordinal(input);\n    };\n}]);","/**\n * @license AngularJS v1.3.20\n * (c) 2010-2014 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *     Any commits to this file should be reviewed with security in mind.  *\n *   Changes to this file can potentially create security vulnerabilities. *\n *          An approval from 2 Core members with history of modifying      *\n *                         this file is required.                          *\n *                                                                         *\n *  Does the change somehow allow for arbitrary javascript to be executed? *\n *    Or allows for someone to change the prototype of built-in objects?   *\n *     Or gives undesired access to variables likes document or window?    *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\nvar $sanitizeMinErr = angular.$$minErr('$sanitize');\n\n/**\n * @ngdoc module\n * @name ngSanitize\n * @description\n *\n * # ngSanitize\n *\n * The `ngSanitize` module provides functionality to sanitize HTML.\n *\n *\n * <div doc-module-components=\"ngSanitize\"></div>\n *\n * See {@link ngSanitize.$sanitize `$sanitize`} for usage.\n */\n\n/*\n * HTML Parser By Misko Hevery (misko@hevery.com)\n * based on:  HTML Parser By John Resig (ejohn.org)\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n *\n * // Use like so:\n * htmlParser(htmlString, {\n *     start: function(tag, attrs, unary) {},\n *     end: function(tag) {},\n *     chars: function(text) {},\n *     comment: function(text) {}\n * });\n *\n */\n\n\n/**\n * @ngdoc service\n * @name $sanitize\n * @kind function\n *\n * @description\n *   The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are\n *   then serialized back to properly escaped html string. This means that no unsafe input can make\n *   it into the returned string, however, since our parser is more strict than a typical browser\n *   parser, it's possible that some obscure input, which would be recognized as valid HTML by a\n *   browser, won't make it through the sanitizer. The input may also contain SVG markup.\n *   The whitelist is configured using the functions `aHrefSanitizationWhitelist` and\n *   `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider `$compileProvider`}.\n *\n * @param {string} html HTML input.\n * @returns {string} Sanitized HTML.\n *\n * @example\n   <example module=\"sanitizeExample\" deps=\"angular-sanitize.js\">\n   <file name=\"index.html\">\n     <script>\n         angular.module('sanitizeExample', ['ngSanitize'])\n           .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {\n             $scope.snippet =\n               '<p style=\"color:blue\">an html\\n' +\n               '<em onmouseover=\"this.textContent=\\'PWN3D!\\'\">click here</em>\\n' +\n               'snippet</p>';\n             $scope.deliberatelyTrustDangerousSnippet = function() {\n               return $sce.trustAsHtml($scope.snippet);\n             };\n           }]);\n     </script>\n     <div ng-controller=\"ExampleController\">\n        Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n       <table>\n         <tr>\n           <td>Directive</td>\n           <td>How</td>\n           <td>Source</td>\n           <td>Rendered</td>\n         </tr>\n         <tr id=\"bind-html-with-sanitize\">\n           <td>ng-bind-html</td>\n           <td>Automatically uses $sanitize</td>\n           <td><pre>&lt;div ng-bind-html=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n           <td><div ng-bind-html=\"snippet\"></div></td>\n         </tr>\n         <tr id=\"bind-html-with-trust\">\n           <td>ng-bind-html</td>\n           <td>Bypass $sanitize by explicitly trusting the dangerous value</td>\n           <td>\n           <pre>&lt;div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"&gt;\n&lt;/div&gt;</pre>\n           </td>\n           <td><div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"></div></td>\n         </tr>\n         <tr id=\"bind-default\">\n           <td>ng-bind</td>\n           <td>Automatically escapes</td>\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n           <td><div ng-bind=\"snippet\"></div></td>\n         </tr>\n       </table>\n       </div>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     it('should sanitize the html snippet by default', function() {\n       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).\n         toBe('<p>an html\\n<em>click here</em>\\nsnippet</p>');\n     });\n\n     it('should inline raw snippet if bound to a trusted value', function() {\n       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).\n         toBe(\"<p style=\\\"color:blue\\\">an html\\n\" +\n              \"<em onmouseover=\\\"this.textContent='PWN3D!'\\\">click here</em>\\n\" +\n              \"snippet</p>\");\n     });\n\n     it('should escape snippet without any filter', function() {\n       expect(element(by.css('#bind-default div')).getInnerHtml()).\n         toBe(\"&lt;p style=\\\"color:blue\\\"&gt;an html\\n\" +\n              \"&lt;em onmouseover=\\\"this.textContent='PWN3D!'\\\"&gt;click here&lt;/em&gt;\\n\" +\n              \"snippet&lt;/p&gt;\");\n     });\n\n     it('should update', function() {\n       element(by.model('snippet')).clear();\n       element(by.model('snippet')).sendKeys('new <b onclick=\"alert(1)\">text</b>');\n       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).\n         toBe('new <b>text</b>');\n       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).toBe(\n         'new <b onclick=\"alert(1)\">text</b>');\n       expect(element(by.css('#bind-default div')).getInnerHtml()).toBe(\n         \"new &lt;b onclick=\\\"alert(1)\\\"&gt;text&lt;/b&gt;\");\n     });\n   </file>\n   </example>\n */\nfunction $SanitizeProvider() {\n  this.$get = ['$$sanitizeUri', function($$sanitizeUri) {\n    return function(html) {\n      var buf = [];\n      htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {\n        return !/^unsafe/.test($$sanitizeUri(uri, isImage));\n      }));\n      return buf.join('');\n    };\n  }];\n}\n\nfunction sanitizeText(chars) {\n  var buf = [];\n  var writer = htmlSanitizeWriter(buf, angular.noop);\n  writer.chars(chars);\n  return buf.join('');\n}\n\n\n// Regular Expressions for parsing tags and attributes\nvar START_TAG_REGEXP =\n       /^<((?:[a-zA-Z])[\\w:-]*)((?:\\s+[\\w:-]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)\\s*(>?)/,\n  END_TAG_REGEXP = /^<\\/\\s*([\\w:-]+)[^>]*>/,\n  ATTR_REGEXP = /([\\w:-]+)(?:\\s*=\\s*(?:(?:\"((?:[^\"])*)\")|(?:'((?:[^'])*)')|([^>\\s]+)))?/g,\n  BEGIN_TAG_REGEXP = /^</,\n  BEGING_END_TAGE_REGEXP = /^<\\//,\n  COMMENT_REGEXP = /<!--(.*?)-->/g,\n  DOCTYPE_REGEXP = /<!DOCTYPE([^>]*?)>/i,\n  CDATA_REGEXP = /<!\\[CDATA\\[(.*?)]]>/g,\n  SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,\n  // Match everything outside of normal chars and \" (quote character)\n  NON_ALPHANUMERIC_REGEXP = /([^\\#-~| |!])/g;\n\n\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\nvar voidElements = makeMap(\"area,br,col,hr,img,wbr\");\n\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\nvar optionalEndTagBlockElements = makeMap(\"colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr\"),\n    optionalEndTagInlineElements = makeMap(\"rp,rt\"),\n    optionalEndTagElements = angular.extend({},\n                                            optionalEndTagInlineElements,\n                                            optionalEndTagBlockElements);\n\n// Safe Block Elements - HTML5\nvar blockElements = angular.extend({}, optionalEndTagBlockElements, makeMap(\"address,article,\" +\n        \"aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,\" +\n        \"h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul\"));\n\n// Inline Elements - HTML5\nvar inlineElements = angular.extend({}, optionalEndTagInlineElements, makeMap(\"a,abbr,acronym,b,\" +\n        \"bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,\" +\n        \"samp,small,span,strike,strong,sub,sup,time,tt,u,var\"));\n\n// SVG Elements\n// https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Elements\nvar svgElements = makeMap(\"animate,animateColor,animateMotion,animateTransform,circle,defs,\" +\n        \"desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,\" +\n        \"line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,set,\" +\n        \"stop,svg,switch,text,title,tspan,use\");\n\n// Special Elements (can contain anything)\nvar specialElements = makeMap(\"script,style\");\n\nvar validElements = angular.extend({},\n                                   voidElements,\n                                   blockElements,\n                                   inlineElements,\n                                   optionalEndTagElements,\n                                   svgElements);\n\n//Attributes that have href and hence need to be sanitized\nvar uriAttrs = makeMap(\"background,cite,href,longdesc,src,usemap,xlink:href\");\n\nvar htmlAttrs = makeMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' +\n    'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' +\n    'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,span,start,summary,target,title,type,' +\n    'valign,value,vspace,width');\n\n// SVG attributes (without \"id\" and \"name\" attributes)\n// https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Attributes\nvar svgAttrs = makeMap('accent-height,accumulate,additive,alphabetic,arabic-form,ascent,' +\n    'attributeName,attributeType,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,' +\n    'color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,' +\n    'font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,' +\n    'gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,' +\n    'keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,' +\n    'markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,' +\n    'overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,' +\n    'repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,' +\n    'stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,' +\n    'stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,' +\n    'stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,' +\n    'underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,' +\n    'viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,' +\n    'xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,' +\n    'zoomAndPan');\n\nvar validAttrs = angular.extend({},\n                                uriAttrs,\n                                svgAttrs,\n                                htmlAttrs);\n\nfunction makeMap(str) {\n  var obj = {}, items = str.split(','), i;\n  for (i = 0; i < items.length; i++) obj[items[i]] = true;\n  return obj;\n}\n\n\n/**\n * @example\n * htmlParser(htmlString, {\n *     start: function(tag, attrs, unary) {},\n *     end: function(tag) {},\n *     chars: function(text) {},\n *     comment: function(text) {}\n * });\n *\n * @param {string} html string\n * @param {object} handler\n */\nfunction htmlParser(html, handler) {\n  if (typeof html !== 'string') {\n    if (html === null || typeof html === 'undefined') {\n      html = '';\n    } else {\n      html = '' + html;\n    }\n  }\n  var index, chars, match, stack = [], last = html, text;\n  stack.last = function() { return stack[stack.length - 1]; };\n\n  while (html) {\n    text = '';\n    chars = true;\n\n    // Make sure we're not in a script or style element\n    if (!stack.last() || !specialElements[stack.last()]) {\n\n      // Comment\n      if (html.indexOf(\"<!--\") === 0) {\n        // comments containing -- are not allowed unless they terminate the comment\n        index = html.indexOf(\"--\", 4);\n\n        if (index >= 0 && html.lastIndexOf(\"-->\", index) === index) {\n          if (handler.comment) handler.comment(html.substring(4, index));\n          html = html.substring(index + 3);\n          chars = false;\n        }\n      // DOCTYPE\n      } else if (DOCTYPE_REGEXP.test(html)) {\n        match = html.match(DOCTYPE_REGEXP);\n\n        if (match) {\n          html = html.replace(match[0], '');\n          chars = false;\n        }\n      // end tag\n      } else if (BEGING_END_TAGE_REGEXP.test(html)) {\n        match = html.match(END_TAG_REGEXP);\n\n        if (match) {\n          html = html.substring(match[0].length);\n          match[0].replace(END_TAG_REGEXP, parseEndTag);\n          chars = false;\n        }\n\n      // start tag\n      } else if (BEGIN_TAG_REGEXP.test(html)) {\n        match = html.match(START_TAG_REGEXP);\n\n        if (match) {\n          // We only have a valid start-tag if there is a '>'.\n          if (match[4]) {\n            html = html.substring(match[0].length);\n            match[0].replace(START_TAG_REGEXP, parseStartTag);\n          }\n          chars = false;\n        } else {\n          // no ending tag found --- this piece should be encoded as an entity.\n          text += '<';\n          html = html.substring(1);\n        }\n      }\n\n      if (chars) {\n        index = html.indexOf(\"<\");\n\n        text += index < 0 ? html : html.substring(0, index);\n        html = index < 0 ? \"\" : html.substring(index);\n\n        if (handler.chars) handler.chars(decodeEntities(text));\n      }\n\n    } else {\n      // IE versions 9 and 10 do not understand the regex '[^]', so using a workaround with [\\W\\w].\n      html = html.replace(new RegExp(\"([\\\\W\\\\w]*)<\\\\s*\\\\/\\\\s*\" + stack.last() + \"[^>]*>\", 'i'),\n        function(all, text) {\n          text = text.replace(COMMENT_REGEXP, \"$1\").replace(CDATA_REGEXP, \"$1\");\n\n          if (handler.chars) handler.chars(decodeEntities(text));\n\n          return \"\";\n      });\n\n      parseEndTag(\"\", stack.last());\n    }\n\n    if (html == last) {\n      throw $sanitizeMinErr('badparse', \"The sanitizer was unable to parse the following block \" +\n                                        \"of html: {0}\", html);\n    }\n    last = html;\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function parseStartTag(tag, tagName, rest, unary) {\n    tagName = angular.lowercase(tagName);\n    if (blockElements[tagName]) {\n      while (stack.last() && inlineElements[stack.last()]) {\n        parseEndTag(\"\", stack.last());\n      }\n    }\n\n    if (optionalEndTagElements[tagName] && stack.last() == tagName) {\n      parseEndTag(\"\", tagName);\n    }\n\n    unary = voidElements[tagName] || !!unary;\n\n    if (!unary)\n      stack.push(tagName);\n\n    var attrs = {};\n\n    rest.replace(ATTR_REGEXP,\n      function(match, name, doubleQuotedValue, singleQuotedValue, unquotedValue) {\n        var value = doubleQuotedValue\n          || singleQuotedValue\n          || unquotedValue\n          || '';\n\n        attrs[name] = decodeEntities(value);\n    });\n    if (handler.start) handler.start(tagName, attrs, unary);\n  }\n\n  function parseEndTag(tag, tagName) {\n    var pos = 0, i;\n    tagName = angular.lowercase(tagName);\n    if (tagName)\n      // Find the closest opened tag of the same type\n      for (pos = stack.length - 1; pos >= 0; pos--)\n        if (stack[pos] == tagName)\n          break;\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (i = stack.length - 1; i >= pos; i--)\n        if (handler.end) handler.end(stack[i]);\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n    }\n  }\n}\n\nvar hiddenPre=document.createElement(\"pre\");\n/**\n * decodes all entities into regular string\n * @param value\n * @returns {string} A string with decoded entities.\n */\nfunction decodeEntities(value) {\n  if (!value) { return ''; }\n\n  hiddenPre.innerHTML = value.replace(/</g,\"&lt;\");\n  // innerText depends on styling as it doesn't display hidden elements.\n  // Therefore, it's better to use textContent not to cause unnecessary reflows.\n  return hiddenPre.textContent;\n}\n\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param value\n * @returns {string} escaped text\n */\nfunction encodeEntities(value) {\n  return value.\n    replace(/&/g, '&amp;').\n    replace(SURROGATE_PAIR_REGEXP, function(value) {\n      var hi = value.charCodeAt(0);\n      var low = value.charCodeAt(1);\n      return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    }).\n    replace(NON_ALPHANUMERIC_REGEXP, function(value) {\n      return '&#' + value.charCodeAt(0) + ';';\n    }).\n    replace(/</g, '&lt;').\n    replace(/>/g, '&gt;');\n}\n\n/**\n * create an HTML/XML writer which writes to buffer\n * @param {Array} buf use buf.jain('') to get out sanitized html string\n * @returns {object} in the form of {\n *     start: function(tag, attrs, unary) {},\n *     end: function(tag) {},\n *     chars: function(text) {},\n *     comment: function(text) {}\n * }\n */\nfunction htmlSanitizeWriter(buf, uriValidator) {\n  var ignore = false;\n  var out = angular.bind(buf, buf.push);\n  return {\n    start: function(tag, attrs, unary) {\n      tag = angular.lowercase(tag);\n      if (!ignore && specialElements[tag]) {\n        ignore = tag;\n      }\n      if (!ignore && validElements[tag] === true) {\n        out('<');\n        out(tag);\n        angular.forEach(attrs, function(value, key) {\n          var lkey=angular.lowercase(key);\n          var isImage = (tag === 'img' && lkey === 'src') || (lkey === 'background');\n          if (validAttrs[lkey] === true &&\n            (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {\n            out(' ');\n            out(key);\n            out('=\"');\n            out(encodeEntities(value));\n            out('\"');\n          }\n        });\n        out(unary ? '/>' : '>');\n      }\n    },\n    end: function(tag) {\n        tag = angular.lowercase(tag);\n        if (!ignore && validElements[tag] === true) {\n          out('</');\n          out(tag);\n          out('>');\n        }\n        if (tag == ignore) {\n          ignore = false;\n        }\n      },\n    chars: function(chars) {\n        if (!ignore) {\n          out(encodeEntities(chars));\n        }\n      }\n  };\n}\n\n\n// define ngSanitize module and register $sanitize service\nangular.module('ngSanitize', []).provider('$sanitize', $SanitizeProvider);\n\n/* global sanitizeText: false */\n\n/**\n * @ngdoc filter\n * @name linky\n * @kind function\n *\n * @description\n * Finds links in text input and turns them into html links. Supports http/https/ftp/mailto and\n * plain email address links.\n *\n * Requires the {@link ngSanitize `ngSanitize`} module to be installed.\n *\n * @param {string} text Input text.\n * @param {string} target Window (_blank|_self|_parent|_top) or named frame to open links in.\n * @returns {string} Html-linkified text.\n *\n * @usage\n   <span ng-bind-html=\"linky_expression | linky\"></span>\n *\n * @example\n   <example module=\"linkyExample\" deps=\"angular-sanitize.js\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('linkyExample', ['ngSanitize'])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.snippet =\n               'Pretty text with some links:\\n'+\n               'http://angularjs.org/,\\n'+\n               'mailto:us@somewhere.org,\\n'+\n               'another@somewhere.org,\\n'+\n               'and one more: ftp://127.0.0.1/.';\n             $scope.snippetWithTarget = 'http://angularjs.org/';\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n       Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n       <table>\n         <tr>\n           <td>Filter</td>\n           <td>Source</td>\n           <td>Rendered</td>\n         </tr>\n         <tr id=\"linky-filter\">\n           <td>linky filter</td>\n           <td>\n             <pre>&lt;div ng-bind-html=\"snippet | linky\"&gt;<br>&lt;/div&gt;</pre>\n           </td>\n           <td>\n             <div ng-bind-html=\"snippet | linky\"></div>\n           </td>\n         </tr>\n         <tr id=\"linky-target\">\n          <td>linky target</td>\n          <td>\n            <pre>&lt;div ng-bind-html=\"snippetWithTarget | linky:'_blank'\"&gt;<br>&lt;/div&gt;</pre>\n          </td>\n          <td>\n            <div ng-bind-html=\"snippetWithTarget | linky:'_blank'\"></div>\n          </td>\n         </tr>\n         <tr id=\"escaped-html\">\n           <td>no filter</td>\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br>&lt;/div&gt;</pre></td>\n           <td><div ng-bind=\"snippet\"></div></td>\n         </tr>\n       </table>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should linkify the snippet with urls', function() {\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\n             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);\n       });\n\n       it('should not linkify snippet without the linky filter', function() {\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).\n             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');\n         expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);\n       });\n\n       it('should update', function() {\n         element(by.model('snippet')).clear();\n         element(by.model('snippet')).sendKeys('new http://link.');\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\n             toBe('new http://link.');\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())\n             .toBe('new http://link.');\n       });\n\n       it('should work with the target property', function() {\n        expect(element(by.id('linky-target')).\n            element(by.binding(\"snippetWithTarget | linky:'_blank'\")).getText()).\n            toBe('http://angularjs.org/');\n        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');\n       });\n     </file>\n   </example>\n */\nangular.module('ngSanitize').filter('linky', ['$sanitize', function($sanitize) {\n  var LINKY_URL_REGEXP =\n        /((ftp|https?):\\/\\/|(www\\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\\S*[^\\s.;,(){}<>\"”’]/i,\n      MAILTO_REGEXP = /^mailto:/i;\n\n  return function(text, target) {\n    if (!text) return text;\n    var match;\n    var raw = text;\n    var html = [];\n    var url;\n    var i;\n    while ((match = raw.match(LINKY_URL_REGEXP))) {\n      // We can not end in these as they are sometimes found at the end of the sentence\n      url = match[0];\n      // if we did not match ftp/http/www/mailto then assume mailto\n      if (!match[2] && !match[4]) {\n        url = (match[3] ? 'http://' : 'mailto:') + url;\n      }\n      i = match.index;\n      addText(raw.substr(0, i));\n      addLink(url, match[0].replace(MAILTO_REGEXP, ''));\n      raw = raw.substring(i + match[0].length);\n    }\n    addText(raw);\n    return $sanitize(html.join(''));\n\n    function addText(text) {\n      if (!text) {\n        return;\n      }\n      html.push(sanitizeText(text));\n    }\n\n    function addLink(url, text) {\n      html.push('<a ');\n      if (angular.isDefined(target)) {\n        html.push('target=\"',\n                  target,\n                  '\" ');\n      }\n      html.push('href=\"',\n                url.replace(/\"/g, '&quot;'),\n                '\">');\n      addText(text);\n      html.push('</a>');\n    }\n  };\n}]);\n\n\n})(window, window.angular);\n","'use strict';\n\nangular.module('chayka-buttons', ['chayka-utils']).provider('buttons', function () {\n\n    var stdButtonClass = '';\n\n    //var buttons = {\n    //\n    //};\n\n    //angular.extend(this, buttons);\n    var buttons = {\n\n        /**\n         * Set button class\n         * @param {string} cls\n         */\n        setButtonClass: function setButtonClass(cls) {\n            stdButtonClass = cls;\n        },\n\n        /**\n         * Get button class\n         * @return {string}\n         */\n        getButtonClass: function getButtonClass() {\n            return stdButtonClass;\n        },\n\n        $get: ['utils', function (utils) {\n\n            utils.ensure('Chayka.Buttons', buttons);\n\n            return buttons;\n        }]\n    };\n\n    return buttons;\n});","'use strict';\n\nangular.module('chayka-nls', ['chayka-utils']).provider('nls', function () {\n\n    var currentLocale = 'en-US';\n\n    var dictionaries = {};\n\n    var nls = {\n\n        /**\n         * Set current locale (e.g. 'en-US')\n         *\n         * @param {string} locale\n         */\n        setLocale: function setLocale(locale) {\n            currentLocale = locale;\n        },\n\n        /**\n         * Get current locale\n         *\n         * @return {string}\n         */\n        getLocale: function getLocale() {\n            return currentLocale;\n        },\n\n        /**\n         * Set translations for specified locale\n         *\n         * @param {string} locale\n         * @param {{}} translations\n         * @return {{}}\n         */\n        setTranslations: function setTranslations(locale, translations) {\n            dictionaries[locale] = dictionaries[locale] || {};\n            angular.extend(dictionaries[locale], translations);\n\n            return dictionaries[locale];\n        },\n\n        /**\n         * Returns array of registered locales\n         *\n         * @return {Array}\n         */\n        getSupportedLocales: function getSupportedLocales() {\n            return Object.keys(dictionaries);\n        },\n\n        /**\n         * Get translation for specified string\n         *\n         * @param {string} str\n         * @param {string} [locale]\n         */\n        _: function _(str, locale) {\n            locale = locale || currentLocale || 'en-US';\n            var dictionary = dictionaries[locale] || {};\n            var defaultDictionary = dictionaries['en-US'] || {};\n            return dictionary[str] || defaultDictionary[str] || str;\n        },\n\n        $get: ['utils', function (utils) {\n\n            utils.ensure('Chayka.NLS', nls);\n\n            return nls;\n        }]\n\n    };\n\n    return nls;\n}).filter('nls', ['nls', function (nls) {\n    return function (str, locale) {\n        return nls._(str, locale);\n    };\n}]).config(['nlsProvider', function (nlsProvider) {\n    var locale = window.Chayka && window.Chayka.Core && window.Chayka.Core.locale || 'en-US';\n    nlsProvider.setLocale(locale);\n}]);","'use strict';\n\nangular.module('chayka-spinners', ['chayka-nls', 'chayka-utils']).directive('spinner', [function () {\n    return {\n        restrict: 'AE',\n        scope: {\n            spinner: '=',\n            visible: '=?',\n            message: '=?'\n        },\n        replace: true,\n        template: '<div class=\"chayka-spinner\" data-ng-show=\"visible\" data-ng-bind-html=\"message\"></div>',\n\n        controller: function controller($scope) {\n\n            $scope.show = function (message) {\n                $scope.message = message || $scope.message || 'Loading...';\n                $scope.visible = true;\n            };\n\n            $scope.hide = function () {\n                $scope.visible = false;\n            };\n\n            $scope.spinner = $scope;\n        }\n    };\n}]).directive('multiSpinner', [function () {\n    return {\n        restrict: 'AE',\n        scope: {\n            spinner: '=multiSpinner'\n        },\n        replace: true,\n        template: '<div class=\"chayka-multi_spinner\" data-ng-show=\"total\"><div data-ng-repeat=\"(id, message) in messages\"><div data-spinner=\"spinners[id]\" data-message=\"message\" data-visible=\"true\"></div></div></div>',\n        //replace: true,\n        controller: function controller($scope) {\n            var ctrl = {};\n            $scope.spinners = {};\n            $scope.messages = {};\n            $scope.total = 0;\n\n            ctrl.show = function (message, id) {\n                if (!id) {\n                    id = 'spinner_' + $scope.total;\n                }\n                if (!$scope.messages[id]) {\n                    $scope.messages[id] = message;\n                    $scope.total++;\n                }\n                return id;\n            };\n\n            ctrl.hide = function (id) {\n                if ($scope.messages[id]) {\n                    $scope.total--;\n                    delete $scope.messages[id];\n                    $scope.spinners[id] = null;\n                    //$scope.$apply();\n                }\n            };\n\n            $scope.spinner = ctrl;\n        }\n    };\n}]).directive('generalSpinner', ['utils', 'generalSpinner', function (utils) {\n    return {\n        restrict: 'AE',\n        template: '<div class=\"chayka-general_spinner\"><div data-multi-spinner=\"spinner\"></div></div>',\n        //replace: true,\n        controller: function controller($scope) {\n            $scope.spinner = null;\n            var $ = angular.element;\n            $(document).on('Chayka.Spinners.show', function (e, message, id) {\n                if ($scope.spinner) {\n                    $scope.spinner.show(message, id);\n                    utils.patchScope($scope);\n                    //$scope.$apply();\n                }\n            });\n            $(document).on('Chayka.Spinners.hide', function (e, id) {\n                if ($scope.spinner) {\n                    $scope.spinner.hide(id);\n                    utils.patchScope($scope);\n                    //$scope.$apply();\n                }\n            });\n        }\n    };\n}]).factory('generalSpinner', ['utils', function (utils) {\n    var $ = angular.element;\n\n    return utils.ensure('Chayka.Spinners', {\n        show: function show(message, id) {\n            $(document).trigger('Chayka.Spinners.show', [message, id]);\n        },\n        hide: function hide(id) {\n            $(document).trigger('Chayka.Spinners.hide', [id]);\n        }\n    });\n}]);","'use strict';\n\nangular.module('chayka-ajax', ['chayka-modals', 'chayka-spinners']).factory('ajax', ['$window', '$http', '$timeout', 'modals', 'generalSpinner', 'utils', function ($window, $http, $timeout, modals, generalSpinner, utils) {\n    var $ = angular.element;\n    var Chayka = $window.Chayka || {};\n    var ajax = Chayka.Ajax = Chayka.Ajax || {\n\n        /**\n         * Registered error handlers for different error codes\n         */\n        errorHandlers: {},\n\n        /**\n         * Add error handler for errorCode.\n         * Handler may accept following params (code, message, payload),\n         * and should return true if error should not be processed with other handlers,\n         * false otherwise.\n         *\n         * @param {string} id   unique handler id\n         * @param {function} handler    error handler\n         * @param {string} errorCode    error code to process using handler\n         */\n        addErrorHandler: function addErrorHandler(id, handler, errorCode) {\n            errorCode = errorCode || null;\n            ajax.errorHandlers[id] = {\n                'code': errorCode,\n                'handler': handler\n            };\n        },\n\n        /**\n         * Remove error handler for specified id\n         * @param id\n         */\n        removeErrorHandler: function removeErrorHandler(id) {\n            ajax.errorHandlers[id] = null;\n        },\n\n        /**\n         * Handle error with all the registered error handlers\n         * Returns true if error was processed and should be removed from the stack\n         *\n         * @param code\n         * @param message\n         * @param payload\n         * @returns {boolean}\n         */\n        handleError: function handleError(code, message, payload) {\n            var res = false;\n            for (var id in ajax.errorHandlers) {\n                var reg = ajax.errorHandlers[id];\n                if (reg && (!reg.code || reg.code === code)) {\n                    res = res || reg.handler(code, message, payload);\n                    if (res) {\n                        break;\n                    }\n                }\n            }\n\n            return res;\n        },\n\n        /**\n         * Handle all the errors found in response including mass_errors\n         *\n         * @param data\n         * @returns {*}\n         */\n        handleErrors: function handleErrors(data) {\n            if (!data) {\n                return { 'empty_response': 'Empty response' };\n            }\n            if ('mass_errors' === data.code) {\n                for (var code in data.message) {\n                    if (ajax.handleError(code, data.message[code], data.payload)) {\n                        delete data.message[code];\n                    }\n                }\n                return data.message;\n            }\n\n            var errors = {};\n            if (!ajax.handleError(data.code, data.message, data.payload)) {\n                errors[data.code] = data.message;\n            }\n            return errors;\n        },\n\n        /**\n         * Parse json in case some empty or html response\n         *\n         * @param response\n         * @param defaultMessage\n         * @returns {*}\n         */\n        processResponse: function processResponse(response, defaultMessage) {\n            var message = defaultMessage || false;\n            var code = 1;\n            if (!angular.isUndefined(response.payload)) {\n                return response;\n            } else if (!response || angular.isString(response) && !response.length) {\n                message = 'Empty response';\n            } else if (angular.isString(response)) {\n                var m = response.match(/<body[^>]*>([\\s\\S]*)<\\/body>/m);\n                m = m ? m : response.match(/<br\\s*\\/>\\s*<b>[^<]+<\\/b>\\:\\s*(.*)<br\\s*\\/>/m);\n                message = m ? m[1].trim() : defaultMessage;\n            }\n            return { code: code, message: message, payload: null };\n        },\n\n        spinnersUsed: 0,\n\n        /**\n         * Prepares all the handlers to show all the spinners and errors\n         *\n         * @param options\n         * - spinner: reference to Chayka.Spinners.spinner or false if no spinners needed\n         * - spinnerId: id for generalSpinner\n         * - spinnerFieldId: field id for showing spinner in the form field (uses formValidator)\n         * - spinnerMessage: message to show with spinner\n         * - errorMessage: default error message to show in case of error. Pass 'false' to suppress.\n         * - successMessage: default success message to show in case of success. Pass 'false' to suppress.\n         * - formValidator: reference to Chayka.Forms.formValidator\n         * - validateOnSend: set to false if you don't want automatic validation\n         * - scope: scope to call $apply in callbacks\n         * - success: function(data, status, headers, config)\n         * - error: function(data, status, headers, config)\n         * - complete: function(data, status, headers, config)\n         *\n         * @returns {*}\n         */\n        prepare: function prepare(options) {\n            var defaults = {};\n\n            options = options || {};\n\n            options = angular.extend(defaults, options);\n\n            var spinner = options.spinner; //|| null;\n            if (!spinner && spinner !== false) {\n                spinner = null;\n            }\n            var spinnerId = options.spinnerId || 'spinner';\n            var spinnerFieldId = options.spinnerFieldId;\n            var spinnerMessage = options.spinnerMessage || 'Processing...';\n            var errorMessage = options.errorMessage || 'Operation failed';\n            var successMessage = options.successMessage;\n            var formValidator = options.formValidator;\n            var validateOnSend = angular.isUndefined(options.validateOnSend) ? true : options.validateOnSend;\n            var scope = options.scope;\n\n            var send = options.send;\n            var success = options.success;\n            var error = options.error;\n            var complete = options.complete;\n\n            spinnerId = spinnerId + ajax.spinnersUsed++;\n\n            var prepared = {};\n            /**\n             * Sender, ensures all the spinner initializations\n             *\n             * @returns {boolean}\n             */\n            var sendHandler = function sendHandler() {\n                var result = false;\n                if (formValidator && validateOnSend && !(!spinnerFieldId && formValidator.validateFields() || spinnerFieldId && formValidator.validateFieldById(spinnerId))) {\n                    return false;\n                }\n                if (send && angular.isFunction(send)) {\n                    result = send();\n                }\n                if (result) {\n                    if (spinner !== false) {\n                        if (spinner) {\n                            spinner.show(spinnerMessage);\n                        } else if (spinnerFieldId && formValidator) {\n                            formValidator.setFieldState(spinnerFieldId, 'progress', spinnerMessage);\n                        } else {\n                            generalSpinner.show(spinnerMessage, spinnerId);\n                        }\n                    }\n                    if (formValidator) {\n                        formValidator.clearMessage();\n                    }\n\n                    if (scope) {\n                        utils.patchScope(scope);\n                    }\n                    //if(scope && !scope.$$phase){\n                    //    scope.$apply();\n                    //}\n                }\n\n                return result;\n            };\n\n            prepared.send = sendHandler;\n\n            /**\n             * Complete handler, called no matter what.\n             *\n             * @param data\n             * @param status\n             * @param headers\n             * @param config\n             */\n            var completeHandler = function completeHandler(data, status, headers, config) {\n                if (spinner !== false) {\n                    if (spinner) {\n                        spinner.hide();\n                    } else if (spinnerFieldId && formValidator) {\n                        formValidator.setFieldState(spinnerFieldId, 'clean');\n                    } else {\n                        generalSpinner.hide(spinnerId);\n                    }\n                }\n                if (complete && angular.isFunction(complete)) {\n                    complete(data, status, headers, config);\n                }\n            };\n\n            prepared.complete = completeHandler;\n\n            /**\n             * Extended error handler, calls complete beforehand\n             *\n             * @param data\n             * @param status\n             * @param headers\n             * @param config\n             */\n            var errorHandler = function errorHandler(data, status, headers, config) {\n\n                data = ajax.processResponse(data, errorMessage);\n\n                completeHandler(data, status, headers, config);\n\n                var errors = ajax.handleErrors(data);\n                var message = errorMessage;\n                for (var i in errors) {\n                    if (errors.hasOwnProperty(i)) {\n                        message = errors[i] || errorMessage;\n                        break;\n                    }\n                }\n                if (formValidator) {\n                    if (spinnerFieldId) {\n                        formValidator.setFieldState(spinnerFieldId, 'error', message);\n                    } else {\n                        formValidator.showErrors(errors);\n                    }\n                } else if (message !== false) {\n                    modals.alert(message);\n                }\n\n                if (angular.isFunction(error)) {\n                    error(data, status, headers, config);\n                }\n                if (scope) {\n                    utils.patchScope(scope);\n                }\n            };\n\n            prepared.error = errorHandler;\n\n            /**\n             * Extended success handler, calls complete beforehand, and error if needed\n             *\n             * @param data\n             * @param status\n             * @param headers\n             * @param config\n             */\n            var successHandler = function successHandler(data, status, headers, config) {\n                //var data = $.brx.Ajax.detectArgData(arguments);\n                data = ajax.processResponse(data, errorMessage);\n                if (data.code) {\n                    errorHandler(data, status, headers, config);\n                } else {\n                    completeHandler(data, status, headers, config);\n                    var message = successMessage === false ? false : data.message || successMessage;\n                    if (formValidator && message) {\n                        formValidator.showMessage(message);\n                    }\n                    if (success && angular.isFunction(success)) {\n                        success(data, status, headers, config);\n                    }\n                }\n                if (scope) {\n                    utils.patchScope(scope);\n                }\n            };\n\n            prepared.success = successHandler;\n\n            return prepared;\n        },\n\n        /**\n         * Main request function.\n         * @param url\n         * @param options can contain all the 'prepare' options alongside with:\n         * - data: data for post, put, patch\n         * - method: http method ('get', 'post', etc)\n         * - config: config for angular.$http\n         *\n         * @returns {*}\n         */\n        request: function request(url, options) {\n\n            var data = options.data || null,\n                method = options.method || 'post',\n                config = options.config || {};\n\n            var send = null;\n\n            switch (method) {\n                case 'get':\n                    send = function send() {\n                        return $http.get(url, config);\n                    };\n                    break;\n                case 'delete':\n                    send = function send() {\n                        return $http.delete(url, config);\n                    };\n                    break;\n                case 'head':\n                    send = function send() {\n                        return $http.head(url, config);\n                    };\n                    break;\n                case 'jsonp':\n                    send = function send() {\n                        return $http.jsonp(url, config);\n                    };\n                    break;\n                case 'post':\n                    send = function send() {\n                        return $http.post(url, data, config);\n                    };\n                    break;\n                case 'put':\n                    send = function send() {\n                        return $http.put(url, data, config);\n                    };\n                    break;\n                case 'patch':\n                    send = function send() {\n                        return $http.patch(url, data, config);\n                    };\n                    break;\n                default:\n            }\n\n            options.send = send;\n\n            var prepared = ajax.prepare(options);\n\n            var promise = prepared.send();\n\n            if (promise) {\n                promise.success(prepared.success).error(prepared.error);\n            }\n\n            return promise;\n        },\n\n        get: function get(url, options, config) {\n            options = options || {};\n            options.method = 'get';\n            options.config = config;\n            return ajax.request(url, options);\n        },\n\n        del: function del(url, options, config) {\n            options = options || {};\n            options.method = 'delete';\n            options.config = config;\n            return ajax.request(url, options);\n        },\n\n        head: function head(url, options, config) {\n            options = options || {};\n            options.method = 'head';\n            options.config = config;\n            return ajax.request(url, options);\n        },\n\n        jsonp: function jsonp(url, options, config) {\n            options = options || {};\n            options.method = 'jsonp';\n            options.config = config;\n            return ajax.request(url, options);\n        },\n\n        post: function post(url, data, options, config) {\n            options = options || {};\n            options.method = 'post';\n            options.data = data;\n            options.config = config;\n            return ajax.request(url, options);\n        },\n\n        put: function put(url, data, options, config) {\n            options = options || {};\n            options.method = 'put';\n            options.data = data;\n            options.config = config;\n            return ajax.request(url, options);\n        },\n\n        patch: function patch(url, data, options, config) {\n            options = options || {};\n            options.method = 'patch';\n            options.data = data;\n            options.config = config;\n            return ajax.request(url, options);\n        }\n    };\n\n    return ajax;\n}]).directive('buttonAjaxRequest', ['ajax', 'modals', function (ajax, modals) {\n    return {\n        scope: {\n            url: '@buttonAjaxRequest',\n            postData: '=?post',\n            confirm: '@?'\n        },\n\n        link: function link($scope, $element) {\n            var onSuccess = function onSuccess(data) {\n                if (data.message) {\n                    modals.alert(data.message);\n                }\n            };\n            var sendRequest = function sendRequest() {\n                if ($scope.postData) {\n                    ajax.post($scope.url, $scope.postData, {\n                        success: onSuccess\n                    });\n                } else {\n                    ajax.get($scope.url, {\n                        success: onSuccess\n                    });\n                }\n            };\n\n            $element.click(function (e) {\n                e.preventDefault();\n                if ($scope.confirm) {\n                    modals.confirm($scope.confirm, sendRequest);\n                } else {\n                    sendRequest();\n                }\n            });\n        }\n    };\n}]);","'use strict';\n\nangular.module('chayka-modals', ['chayka-nls', 'chayka-buttons', 'chayka-utils']).provider('modals', function () {\n\n    return {\n        $get: ['$window', 'nls', 'buttons', 'utils', function ($window, nls, btn, utils) {\n\n            var modals = utils.ensure('Chayka.Modals', {\n                queue: [],\n                //queue: modals.queue,\n\n                //setQueueScope: ($scope) => {\n                //    modals.scope = $scope;\n                //},\n\n                /**\n                 * Creates config object to be pushed to a modal queue\n                 *\n                 * @param options\n                 * @returns {modal}\n                 */\n                create: function create(options) {\n                    if (options.buttons && angular.isObject(options.buttons) && !angular.isArray(options.buttons)) {\n                        var buttons = [];\n                        /**\n                         * @var {{\n                         *  text: string,\n                         *  click: function,\n                         *  persist: boolean,\n                         *  cls: string\n                         * }} button\n                         */\n                        angular.forEach(options.buttons, function (button, text) {\n                            button.text = text;\n                            buttons.push(button);\n                        });\n                        options.buttons = buttons;\n                    }\n                    var defaultOptions = {};\n                    var m = angular.extend(defaultOptions, options);\n                    //var m = angular.extend(defaultOptions, options, modal);\n                    //m.prototype = modal;\n                    //if (m.element) {\n                    //    m.element.data('modal', m);\n                    //}\n                    return m;\n                },\n\n                /**\n                 * Shows anything in a modal window.\n                 *\n                 * @param {object} options\n                 *  - title\n                 *  - content\n                 *  - element\n                 *  - width\n                 *  - height\n                 *  - buttons\n                 * @returns {object}\n                 */\n                show: function show(options) {\n                    var m = modals.create(options);\n                    modals.queue.push(m);\n                    return m;\n                },\n\n                /**\n                 * Shows alert box.\n                 *\n                 * @param {String} message\n                 * @param {String} [title]\n                 * @param {String} [modalClass]\n                 * @param {Function} [callback]\n                 */\n                alert: function alert(message, title, modalClass, callback) {\n                    modalClass = modalClass || 'modal_alert';\n                    modals.show({\n                        content: message,\n                        title: title || '',\n                        modalClass: modalClass,\n                        buttons: [{ text: nls._('Ok'), click: callback }]\n                    });\n                },\n\n                /**\n                 * Shows confirm box\n                 * @param {string} message\n                 * @param {Function} callback\n                 * @param {string} [title]\n                 * @returns {undefined}\n                 */\n                confirm: function confirm(message, callback, title) {\n                    modals.show({\n                        content: message,\n                        title: title || '',\n                        modalClass: 'modal_confirm',\n                        //modal: false,\n                        buttons: [{ text: nls._('Yes'), click: callback }, { text: nls._('No') }]\n                    });\n                },\n\n                /**\n                 * Close current modal\n                 */\n                close: function close($event) {\n                    if (!$event || $event.target === $event.currentTarget) {\n                        modals.queue.shift();\n                    }\n                },\n\n                /**\n                 * Get button class\n                 * @param {{text: string, click: function, cls: string}} button\n                 *\n                 * @return {string}\n                 */\n                getButtonClass: function getButtonClass(button) {\n                    //return buttonClass;\n                    var cls = [];\n                    var buttonClass = btn.getButtonClass();\n                    if (buttonClass) {\n                        cls.push(buttonClass);\n                    }\n                    if (button && button.cls) {\n                        cls.push(button.cls);\n                    }\n                    return cls.join(' ');\n                }\n            });\n\n            //modals = angular.extend(modals, api);\n\n            return modals;\n        }]\n    };\n}).directive('modalsManager', ['modals', 'buttons', function (modals) {\n    return {\n        restrict: 'AE',\n        controllerAs: 'mm',\n        bindToController: {},\n        template: '<div id=\"chayka-modals\" data-ng-show=\"mm.queue.length\" class=\"ng-cloak chayka-modals\" data-ng-cloak=\"\">' + '   <div class=\"chayka-modals-fader\" data-ng-click=\"mm.close($event)\">' + '       <div data-ng-repeat=\"item in mm.queue | limitTo: 1\" class=\"chayka-modals-modal\">' + '           <div class=\"modal_header\">' + '               <div class=\"modal_header-title\">{{item.title | nls}}</div>' + '               <div class=\"modal_header-close\" data-ng-click=\"mm.close($event)\">&times;</div>' + '           </div>' + '           <div class=\"modal_body\">' + '               <div class=\"modal_body-content\" data-ng-bind-html=\"item.content\"></div>' + '           </div>' + '           <div class=\"modal_buttons\" data-ng-show=\"item.buttons && item.buttons.length\">' + '               <button data-ng-repeat=\"button in item.buttons\" data-ng-click=\"button.persist || mm.close(); button.click && button.click();\" class=\"{{mm.getButtonClass(button)}}\">{{button.text | nls}}</button>' + '           </div>' + '       </div>' + '   </div>' +\n        //'   <div class=\"ng-hide\" id=\"chayka-modals-pool\"></div>' +\n        '</div>',\n        controller: function controller() {\n            return {\n                close: modals.close,\n                queue: modals.queue,\n                getButtonClass: modals.getButtonClass\n            };\n        }\n    };\n}]).directive('modal', ['modals', function (modals) {\n    return {\n        restrict: 'AE',\n        transclude: true,\n        controllerAs: 'm',\n        scope: {\n            modal: '=modal',\n            title: '@?modalTitle',\n            show: '@modalShow',\n            buttons: '=?modalButtons',\n            width: '@modalWidth',\n            height: '@modalHeight',\n            onClose: '&?onModalClose'\n\n        },\n        template: '<div class=\"chayka-modals ng-cloak\" data-ng-show=\"m.isOpen\">' + '   <div class=\"chayka-modals-fader\" data-ng-click=\"m.hide($event)\">' + '       <div class=\"chayka-modals-modal\">' + '           <div class=\"modal_header\">' + '               <div class=\"modal_header-title\">{{m.title | nls}}</div>' + '               <div class=\"modal_header-close\" data-ng-click=\"m.hide($event)\">&times;</div>' + '           </div>' + '           <div class=\"modal_body\" data-ng-transclude></div>' + '           <div class=\"modal_buttons\" data-ng-show=\"m.buttons && m.buttons.length\">' + '               <button data-ng-repeat=\"button in buttons\" data-ng-click=\"button.persist || m.hide(); button.click && button.click();\" class=\"{{m.getButtonClass(button)}}\">{{button.text | nls}}</button>' + '           </div>' + '       </div>' + '   </div>' + '</div>',\n        controller: function controller($scope, $element) {\n            //console.log('modal.directive');\n\n            var ctrl = {\n\n                isOpen: false,\n                title: '',\n                buttons: [],\n\n                /**\n                 * Show element within modal popup.\n                 */\n                show: function show() {\n                    ctrl.isOpen = true;\n                },\n\n                /**\n                 * Hide modal popup.\n                 *\n                 * @type {Function}\n                 */\n                hide: function hide($event) {\n                    if (!$event || $event.target === $event.currentTarget) {\n                        ctrl.isOpen = false;\n                        if ($scope.onClose) {\n                            $scope.onClose();\n                        }\n                    }\n                },\n\n                /**\n                 * Set popup window.\n                 *\n                 * @param {string} title\n                 */\n                setTitle: function setTitle(title) {\n                    ctrl.title = title;\n                },\n\n                /**\n                 * Set button set.\n                 *\n                 * @param {object|Array} buttons\n                 */\n                setButtons: function setButtons(buttons) {\n                    if (buttons && angular.isObject(buttons) && !angular.isArray(buttons)) {\n                        var btns = [];\n                        angular.forEach(buttons, function (button, text) {\n                            button.text = text;\n                            btns.push(button);\n                        });\n                        buttons = btns;\n                    }\n                    ctrl.buttons = $scope.buttons = buttons;\n                },\n\n                /**\n                 *\n                 * @param button\n                 * @return {string}\n                 */\n                getButtonClass: function getButtonClass(button) {\n                    return modals.getButtonClass(button);\n                }\n            };\n\n            if ($scope.buttons) {\n                ctrl.setButtons($scope.buttons);\n            }\n\n            $scope.modal = ctrl;\n            if ($scope.show) {\n                ctrl.show();\n            }\n\n            if ($scope.height) {\n                $element.css('height', $scope.height);\n            }\n\n            if ($scope.width) {\n                $element.css('width', $scope.width);\n            }\n\n            return ctrl;\n        }\n    };\n}]).config(['nlsProvider', function (nlsProvider) {\n\n    // Adding a translation table for the English language\n    nlsProvider.setTranslations('en-US', {\n        'Yes': 'Yes',\n        'No': 'No',\n        'Ok': 'Ok'\n    });\n\n    nlsProvider.setTranslations('ru-RU', {\n        'Yes': 'Да',\n        'No': 'Нет',\n        'Ok': 'Ok'\n    });\n}]);","'use strict';\n\n/**\n * @ngdoc module\n * @name chayka-forms\n * @description\n *\n * This is a module that enables form validation stuff.\n */\n\nangular.module('chayka-forms', ['ngSanitize', 'chayka-modals', 'chayka-nls', 'chayka-ajax'])\n/**\n * @ngdoc directive\n * @name chayka-forms#formValidator\n * @description\n *\n * This directive creates wrapper for the fields that should be validated.\n * Then you can access it and perform field set validation.\n */\n.directive('formValidator', ['$window', 'modals', 'ajax', 'utils', function ($window, modals, ajax, utils) {\n    return {\n        restrict: 'AE',\n        //transclude: true,\n        scope: {\n            validator: '=?formValidator',\n            scrollMargin: '@',\n            scrollDuration: '@'\n        },\n        link: function link(scope, element) {\n            scope.element = element;\n        },\n        controller: function controller($scope) {\n            var fields = $scope.fields = {};\n            var ctrl = {};\n            var messageBox = null;\n            $scope.scrollMargin = $scope.scrollMargin || 50;\n            //console.log('validation form');\n\n            /**\n             * Sets message box for validator.\n             * The box that will show common errors.\n             * This function is called by 'form-message' directive.\n             *\n             * If not set, Chayka.Modals.alert() will be utilized.\n             *\n             * @param {$scope} msgBox\n             */\n            ctrl.setMessageBox = function (msgBox) {\n                messageBox = msgBox;\n            };\n\n            /**\n             * Show message using message box or Chayka.Modals.alert()\n             *\n             * @param {string} message\n             * @param {string} state\n             * @returns {boolean}\n             */\n            ctrl.showMessage = function (message, state) {\n                if (messageBox) {\n                    messageBox.message = message;\n                    messageBox.state = state || '';\n                    return true;\n                }\n                modals.alert(message, '', state);\n                return false;\n            };\n\n            /**\n             * Hide message shown by message box\n             *\n             * @returns {boolean}\n             */\n            ctrl.clearMessage = function () {\n                if (messageBox) {\n                    messageBox.message = '';\n                    messageBox.state = '';\n                    return true;\n                }\n                return false;\n            };\n\n            /**\n             * Add field to the set of validated fields\n             *\n             * @param {$scope} field\n             */\n            ctrl.addField = function (field) {\n                fields[field['name']] = field;\n            };\n\n            /**\n             * Set field state and message (hint)\n             *\n             * @param {string|$scope} field\n             * @param {string} state\n             * @param {string} [message]\n             */\n            ctrl.setFieldState = function (field, state, message) {\n                if (angular.isString(field)) {\n                    field = fields[field];\n                    if (!field) {\n                        return;\n                    }\n                }\n                field['valid'] = state === 'valid' || state === 'clean';\n                field['state'] = state;\n                field['message'] = message || field['hint'];\n\n                utils.patchScope(field);\n            };\n\n            /**\n             * Set field state to error\n             *\n             * @param {string|scope} field\n             * @param message\n             */\n            ctrl.setFieldError = function (field, message) {\n                ctrl.setFieldState(field, 'invalid', message);\n            };\n\n            /**\n             * Clear field error state.\n             *\n             * @param {string|scope} field\n             */\n            ctrl.clearFieldError = function (field) {\n                ctrl.setFieldState(field, 'clear');\n            };\n\n            /**\n             * Check required field\n             *\n             * @param {$scope} field\n             * @returns {boolean}\n             */\n            ctrl.checkRequired = function (field) {\n                var c = field['checks'].required;\n                return !c.active || !!field['value'];\n            };\n\n            /**\n             * Check field length.\n             *\n             * @param {$scope} field\n             * - length\n             * @returns {boolean}\n             */\n            ctrl.checkLength = function (field) {\n                var c = field['checks'].length;\n                return !c.active || !(c.max && field['value'].length > c.max || field['value'].length < c.min);\n            };\n\n            /**\n             * Check field value range.\n             *\n             * @param {$scope} field\n             * - min\n             * - minE\n             * - max\n             * - maxE\n             * @returns {boolean}\n             */\n            ctrl.checkRange = function (field) {\n                var c = field['checks'].range;\n                var lower = c.min && (c.minE && field['value'] < c.min || !c.minE && field['value'] <= c.min);\n                var greater = c.max && (c.maxE && field['value'] > c.max || !c.minE && field['value'] >= c.max);\n                return !c.active || !(lower || greater);\n            };\n\n            /**\n             * Check field value lt (<).\n             *\n             * @param {$scope} field\n             * - max\n             * @returns {boolean}\n             */\n            ctrl.checkLt = function (field) {\n                var c = field['checks'].lt;\n                return !c.active || field['value'] < c.max;\n            };\n\n            /**\n             * Check field value le (<=).\n             *\n             * @param {$scope} field\n             * - max\n             * @returns {boolean}\n             */\n            ctrl.checkLe = function (field) {\n                var c = field['checks'].le;\n                return !c.active || field['value'] <= c.max;\n            };\n\n            /**\n             * Check field value gt (>).\n             *\n             * @param {$scope} field\n             * - min\n             * @returns {boolean}\n             */\n            ctrl.checkGt = function (field) {\n                var c = field['checks'].gt;\n                return !c.active || field['value'] > c.min;\n            };\n\n            /**\n             * Check field value ge (>=).\n             *\n             * @param {$scope} field\n             * - min\n             * @returns {boolean}\n             */\n            ctrl.checkGe = function (field) {\n                var c = field['checks'].ge;\n                return !c.active || field['value'] >= c.min;\n            };\n\n            /**\n             * Check field value against regexp.\n             *\n             * @param {$scope} field\n             * - regexp\n             * @returns {*|boolean}\n             */\n            ctrl.checkRegexp = function (field) {\n                var c = field['checks'].regexp;\n                var valid = c.regexp.test(field['value']);\n                if (c.forbid) {\n                    valid = !valid;\n                }\n                return !c.active || valid;\n            };\n\n            /**\n             * Compare two password field values.\n             *\n             * @param {$scope} field\n             * - repeat\n             * @returns {boolean}\n             */\n            ctrl.checkPasswords = function (field) {\n                var c = field['checks'].passwords;\n                var repeatField = fields[c.repeat] || field;\n                return !c.active || field['value'] === repeatField.value;\n            };\n\n            /**\n             * Check value using api call.\n             * Stores checked values to cache.\n             *\n             * @param {$scope} field\n             * - url\n             * - delay\n             * @returns {string} state\n             */\n            ctrl.checkApi = function (field) {\n                var c = field['checks'].api;\n                var url = utils.template(c.url, { name: encodeURIComponent(field['name']), value: encodeURIComponent(field['value']) });\n                var value = field['value'] + '';\n                if (c.active) {\n                    if (value in c.dictionary) {\n                        if ('valid' === c.dictionary[value]) {\n                            ctrl.setFieldState(field, 'valid', null);\n                        } else {\n                            ctrl.setFieldState(field, 'invalid', c.message);\n                        }\n                        return c.dictionary[value];\n                    }\n\n                    c.dictionary[value] = 'progress';\n                    ajax.get(url, {\n                        spinner: $scope.spinner,\n                        spinnerFieldId: field['name'],\n                        spinnerMessage: ' ',\n                        showMessage: false,\n                        formValidator: ctrl,\n                        errorMessage: c.message,\n                        validateOnSend: false,\n                        scope: field,\n                        success: function success(data) {\n                            //console.dir({'data': data});\n                            c.dictionary[value] = 'valid';\n                            ctrl.setFieldState(field, 'valid', null);\n                        },\n                        error: function error(data) {\n                            c.dictionary[value] = 'invalid';\n                            c.message = c.message || 'mass_errors' === data.code && data.message[field['name']] || data.message;\n                        }\n                    });\n                }\n                return !c.active || c.dictionary[value];\n            };\n\n            /**\n             * Perform custom check by calling provided scope callback.\n             *\n             * @param {$scope} field\n             * @returns {*}\n             */\n            ctrl.checkCustom = function (field) {\n                var c = field['checks'].custom;\n                var callback = c.callback;\n                return !c.active || $scope.$parent[callback].call($scope, field['value']);\n            };\n\n            /**\n             * Perform all the set up checks for the given field.\n             * If silent, does not visualize validation state.\n             *\n             * @param {$scope} field\n             * @param {boolean} [silent]\n             * @returns {bolean}\n             */\n            ctrl.validateField = function (field, silent) {\n                var valid = true,\n                    message = '',\n                    state,\n                    checks = field['checks'];\n\n                if (!field['active']) {\n                    return true;\n                }\n\n                if (checks.required && !ctrl.checkRequired(field)) {\n                    valid = false;\n                    message = checks.required.message;\n                }\n\n                if (field['value']) {\n                    angular.forEach(checks, function (c, check) {\n                        if (!valid) {\n                            return;\n                        }\n                        switch (check) {\n                            case 'length':\n                                valid = ctrl.checkLength(field);\n                                break;\n                            case 'range':\n                                valid = ctrl.checkRange(field);\n                                break;\n                            case 'lt':\n                                valid = ctrl.checkLt(field);\n                                break;\n                            case 'le':\n                                valid = ctrl.checkLe(field);\n                                break;\n                            case 'gt':\n                                valid = ctrl.checkGt(field);\n                                break;\n                            case 'ge':\n                                valid = ctrl.checkGe(field);\n                                break;\n                            case 'regexp':\n                                valid = ctrl.checkRegexp(field);\n                                break;\n                            case 'passwords':\n                                valid = ctrl.checkPasswords(field);\n                                break;\n                            default:\n                        }\n                        if (!valid) {\n                            message = c.message;\n                        }\n                    });\n                }\n\n                if (valid && checks.custom) {\n                    valid = ctrl.checkCustom(field);\n                    message = valid ? '' : checks.custom.message;\n                }\n\n                state = valid ? 'valid' : 'invalid';\n\n                if (valid && checks.api) {\n                    state = ctrl.checkApi(field);\n                    message = state === 'invalid' ? checks.api.message : '';\n                }\n\n                if (!silent) {\n                    ctrl.setFieldState(field, state, message);\n                }\n\n                return field.valid;\n            };\n\n            /**\n             * Validate field by field id\n             * @param fieldId\n             * @param [silent]\n             * @return {boolean}\n             */\n            ctrl.validateFieldById = function (fieldId, silent) {\n                var field = fields[fieldId];\n                return ctrl.validateField(field, silent);\n            };\n\n            /**\n             * Validate all registered fields and scroll to\n             * top invalid field in case it is invisible.\n             *\n             * @returns {boolean}\n             */\n            ctrl.validateFields = function () {\n                var valid = true;\n\n                var scrollTo = 0;\n\n                angular.forEach(fields, function (field) {\n                    if (!ctrl.validateField(field)) {\n                        var scrollPos = field.element.offset().top;\n                        if (!scrollTo || scrollPos && scrollTo > scrollPos) {\n                            scrollTo = scrollPos;\n                        }\n                        valid = false;\n                    }\n                });\n\n                if (!valid && scrollTo) {\n                    ctrl.scrollTo(scrollTo);\n                }\n\n                $scope.valid = valid;\n\n                return valid;\n            };\n\n            /**\n             * Scroll to set position in case if position is out of the vieport.\n             * If duration is 0, scroll is not animated.\n             * Default duration value is taken from markup (see scroll-duration directive).\n             *\n             * @param {int} scrollTo\n             * @param {int|string} [duration]\n             */\n            ctrl.scrollTo = function (scrollTo, duration) {\n\n                if (angular.isUndefined(duration)) {\n                    duration = parseInt($scope.scrollDuration) || $scope.scrollDuration;\n                }\n\n                scrollTo -= parseInt($scope.scrollMargin);\n                if ($window.jQuery) {\n                    var $ = $window.jQuery;\n                    if (scrollTo < $window.pageYOffset || scrollTo > $window.pageYOffset + $($window).height()) {\n                        if (duration) {\n                            $window.jQuery('html, body').animate({ scrollTop: scrollTo }, duration);\n                        } else {\n                            $window.jQuery('html, body').scrollTop(scrollTo);\n                        }\n                    }\n                }\n            };\n\n            /**\n             * Scroll to top of the form-validator DOM-element if one is not visible.\n             *\n             * @param {int|string} [duration]\n             */\n            ctrl.scrollUp = function (duration) {\n                ctrl.scrollTo($scope.element.offset().top, duration);\n            };\n\n            /**\n             * Show set of errors organized by fields.\n             * This function is handy to show errors from backend api call.\n             *\n             * Errors for non-existing fields will be shown in message box\n             * or via Chayka.Modals.alert();\n             *\n             * @param {object} errors\n             */\n            ctrl.showErrors = function (errors) {\n                var scrollTo = 0;\n                angular.forEach(errors, function (message, key) {\n                    var field = fields[key];\n                    if (field) {\n                        ctrl.setFieldState(field, 'invalid', message);\n                        var scrollPos = field.element.offset().top;\n                        if (!scrollTo || scrollPos && scrollTo > scrollPos) {\n                            scrollTo = scrollPos;\n                        }\n                    } else {\n                        ctrl.showMessage(message, 'error');\n                    }\n                });\n\n                if (scrollTo) {\n                    ctrl.scrollTo(scrollTo);\n                }\n            };\n\n            $scope.validator = ctrl;\n\n            return ctrl;\n        }\n    };\n}]).directive('formField', ['nls', 'delayedCall', 'utils', function (nls, delayedCall, utils) {\n    return {\n        require: '^formValidator',\n        restrict: 'AE',\n        transclude: true,\n        template: '<label>{{label|nls}}</label><div class=\"input\" data-ng-transclude></div><div class=\"message\" data-ng-class=\"{error: !valid}\" data-ng-bind-html=\"message\">{{message}}</div>',\n        scope: {\n            name: '@formField',\n            label: '@',\n            hint: '@',\n            message: '@hint'\n            //value: '='\n        },\n        link: function link($scope, $element, attrs, formCtrl) {\n            var $input = $element.find('[ng-model],[data-ng-model]'),\n                inputType = $input.attr('type'),\n\n            //hint = element.find('.message'),\n            model = $input.attr('data-ng-model') || $input.attr('ng-model'),\n                $oldLabel = $element.find('.input > label:first-child'),\n                $newLabel = $element.find('> label');\n            if (!$scope.label && inputType !== 'checkbox' /*&& inputType !== 'radio'*/) {\n                    //element.find('> label').remove();\n                    $scope.label = $oldLabel.text().replace(/\\s*:\\s*$/, '');\n                    angular.forEach($oldLabel.attributes, function (i, attr) {\n                        var name = attr.name;\n                        var value = attr.value;\n                        $newLabel.attr(name, value);\n                    });\n                    $newLabel.addClass($oldLabel.attr('class'));\n                    $newLabel.text($scope.label);\n                    $oldLabel.remove();\n                    //scope.$digest();\n                }\n            //console.log('model binding: '+model);\n\n            //console.dir({'attrs': attrs, element: element, input: input});\n\n            $scope.valid = true;\n\n            $scope.state = 'clean'; // clean|progress|valid|invalid\n\n            $scope.active = true;\n\n            $scope.checks = {};\n\n            $scope.element = $element;\n\n            $input.focus(function () {\n                //formCtrl.clearFieldError(scope);\n                //formCtrl.setFieldState(field, 'clean');\n            });\n\n            $input.blur(function () {\n                //formCtrl.setFieldError(scope, 'error');\n                if ($scope.value) {\n                    //console.log('validating value: '+scope.value);\n                    formCtrl.validateField($scope, false);\n                }\n                utils.patchScope($scope);\n                //scope.$apply(); // ok\n            });\n\n            /**\n             * setup data-check-if=\"condition\"\n             */\n            function setupIf() {\n                if (attrs['checkIf']) {\n                    $scope.$parent.$watch(attrs['checkIf'], function (value) {\n                        $scope.active = value;\n                    });\n                }\n            }\n\n            /**\n             * Setup required field check.\n             *\n             * Html format:\n             *      data-required = \"This field is required|scopeCondition\"\n             * or\n             *      data-check-required-message = \"This field is required\"\n             *      data-check-required-if = \"scopeCondition\"\n             */\n            function setupRequired() {\n                var short = attrs['checkRequired'];\n                var shorts = short ? short.split('|') : [];\n                var message = nls._(shorts[0] || attrs['checkRequiredMessage'] || 'message_required');\n\n                $scope.checks.required = {\n                    message: message,\n                    active: true\n                };\n                var condition = shorts[1] || attrs['checkRequiredIf'];\n                if (condition) {\n                    $scope.$parent.$watch(condition, function (value) {\n                        $scope.checks.required.active = value;\n                    });\n                }\n            }\n\n            /**\n             * Setup field value length check.\n             *\n             * Html format:\n             *      data-check-length = \"The length of this value should be between {min} and {max} symbols|0|16|scopeCondition\"\n             * or\n             *      data-check-length-message = \"The length of this value should be between {min} and {max} symbols\"\n             *      data-check-length-min = \"0\"\n             *      data-check-length-max = \"16\"\n             *      data-check-length-if = \"scopeCondition\"\n             *\n             */\n            function setupLength() {\n                var short = attrs['checkLength'];\n                var shorts = short ? short.split('|') : [];\n                var min = parseInt(shorts[1] || attrs['checkLengthMin'] || 0);\n                var max = parseInt(shorts[2] || attrs['checkLengthMax'] || 0);\n                var messageTemplate = nls._(shorts[0] || attrs['checkLengthMessage'] || 'message_length');\n                var message = utils.template(messageTemplate, { min: min, max: max, label: $scope.label });\n                $scope.checks.length = {\n                    message: message,\n                    min: min,\n                    max: max,\n                    active: true\n                };\n                var condition = shorts[3] || attrs['checkLengthIf'];\n                if (condition) {\n                    $scope.$parent.$watch(condition, function (value) {\n                        $scope.checks.length.active = value;\n                    });\n                }\n            }\n\n            /**\n             * Setup field value range check.\n             *\n             * Html format:\n             *      data-check-range = \"The value should be between {min} and {max}|=0|16|int|scopeCondition\"\n             * or\n             *      data-check-range-message = \"The value should be between {min} and {max}\"\n             *      data-check-range-min = \"=0\" ('=' means 'inclusive')\n             *      data-check-range-max = \"16\"\n             *      data-check-range-format = \"int\"\n             *      data-check-range-if = \"scopeCondition\"\n             *\n             */\n            function setupRange() {\n                var short = attrs['checkRange'];\n                var shorts = short ? short.split('|') : [];\n                var minStr = shorts[1] || attrs['checkRangeMin'] || 0;\n                var minE = !!minStr.match(/^=/);\n                var min = minE ? minStr.substr(1) : minStr;\n                var maxStr = shorts[2] || attrs['checkRangeMax'] || 0;\n                var maxE = !!maxStr.match(/^=/);\n                var max = maxE ? maxStr.substr(1) : maxStr;\n                var format = shorts[3] || attrs['checkRangeFormat'] || 'int';\n                switch (format) {\n                    case 'int':\n                        min = parseInt(min);\n                        max = parseInt(max);\n                        break;\n                    case 'float':\n                        min = parseFloat(min);\n                        max = parseFloat(max);\n                        break;\n                    default:\n                }\n                var messageTemplate = shorts[0] || attrs['checkRangeMessage'] || nls._('message_range');\n                var message = utils.template(messageTemplate, { min: min, max: max, label: $scope.label });\n                $scope.checks.range = {\n                    message: message,\n                    min: min,\n                    minE: minE,\n                    max: max,\n                    maxE: maxE,\n                    active: true\n                };\n                var condition = shorts[4] || attrs['checkRangeIf'];\n                if (condition) {\n                    $scope.$parent.$watch(condition, function (value) {\n                        $scope.checks.range.active = value;\n                    });\n                }\n            }\n\n            /**\n             * Setup field value 'lower than (<)'.\n             *\n             * Html format:\n             *      data-check-lt = \"The value should be lower than {max}|0|int|scopeCondition\"\n             * or\n             *      data-check-lt-message = \"The value should be lower than {max}\"\n             *      data-check-lt-max = \"0\"\n             *      data-check-lt-format = \"int\"\n             *      data-check-lt-if = \"scopeCondition\"\n             */\n            function setupLt() {\n                var short = attrs['checkLt'];\n                var shorts = short ? short.split('|') : [];\n                var max = shorts[1] || attrs['checkLtMax'] || 0;\n                var messageTemplate = shorts[0] || attrs['checkLtMessage'] || nls._('message_lt');\n                var message = utils.template(messageTemplate, { max: max, label: $scope.label });\n                var format = shorts[2] || attrs['checkLtFormat'] || 'int';\n                switch (format) {\n                    case 'int':\n                        max = parseInt(max);\n                        break;\n                    case 'float':\n                        max = parseFloat(max);\n                        break;\n                    default:\n                }\n                $scope.checks.lt = {\n                    message: message,\n                    max: max,\n                    active: true\n                };\n                var condition = shorts[3] || attrs['checkLtIf'];\n                if (condition) {\n                    $scope.$parent.$watch(condition, function (value) {\n                        $scope.checks.lt.active = value;\n                    });\n                }\n            }\n\n            /**\n             * Setup field value 'lower or equal (<=)'.\n             *\n             * Html format:\n             *      data-check-le = \"The value should be lower than {max} or equal|0|int|scopeCondition\"\n             * or\n             *      data-check-le-message = \"The value should be lower than {max} or equal\"\n             *      data-check-le-max = \"0\"\n             *      data-check-le-format = \"int\"\n             *      data-check-le-if = \"scopeCondition\"\n             */\n            function setupLe() {\n                var short = attrs['checkLe'];\n                var shorts = short ? short.split('|') : [];\n                var max = shorts[1] || attrs['checkLeMax'] || 0;\n                var messageTemplate = shorts[0] || attrs['checkLeMessage'] || nls._('message_le');\n                var message = utils.template(messageTemplate, { max: max, label: $scope.label });\n                var format = shorts[2] || attrs['checkLeFormat'] || 'int';\n                switch (format) {\n                    case 'int':\n                        max = parseInt(max);\n                        break;\n                    case 'float':\n                        max = parseFloat(max);\n                        break;\n                    default:\n                }\n                $scope.checks.le = {\n                    message: message,\n                    max: max,\n                    active: true\n                };\n                var condition = shorts[3] || attrs['checkLeIf'];\n                if (condition) {\n                    $scope.$parent.$watch(condition, function (value) {\n                        $scope.checks.le.active = value;\n                    });\n                }\n            }\n\n            /**\n             * Setup field value 'greater than (>)'.\n             *\n             * Html format:\n             *      data-check-gt = \"The value should be greater than {min}|0|int|scopeCondition\"\n             * or\n             *      data-check-gt-message = \"The value should be greater than {min}\"\n             *      data-check-gt-max = \"0\"\n             *      data-check-gt-format = \"int\"\n             *      data-check-gt-if = \"scopeCondition\"\n             */\n            function setupGt() {\n                var short = attrs['checkGt'];\n                var shorts = short ? short.split('|') : [];\n                var min = shorts[1] || attrs['checkGtMin'] || 0;\n                var messageTemplate = shorts[0] || attrs['checkGtMessage'] || nls._('message_gt');\n                var message = utils.template(messageTemplate, { min: min, label: $scope.label });\n                var format = shorts[2] || attrs['checkGtFormat'] || 'int';\n                switch (format) {\n                    case 'int':\n                        min = parseInt(min);\n                        break;\n                    case 'float':\n                        min = parseFloat(min);\n                        break;\n                    default:\n                }\n                $scope.checks.gt = {\n                    message: message,\n                    min: min,\n                    active: true\n                };\n                var condition = shorts[3] || attrs['checkGtIf'];\n                if (condition) {\n                    $scope.$parent.$watch(condition, function (value) {\n                        $scope.checks.gt.active = value;\n                    });\n                }\n            }\n\n            /**\n             * Setup field value 'greater or equal (<=)'.\n             *\n             * Html format:\n             *      data-check-ge = \"The value should be greater than {min} or equal|0|int|scopeCondition\"\n             * or\n             *      data-check-ge-message = \"The value should be greater than {min} or equal\"\n             *      data-check-ge-min = \"0\"\n             *      data-check-ge-format = \"int\"\n             *      data-check-ge-if = \"scopeCondition\"\n             */\n            function setupGe() {\n                var short = attrs['checkGe'];\n                var shorts = short ? short.split('|') : [];\n                var min = shorts[1] || attrs['checkGeMin'] || 0;\n                var messageTemplate = shorts[0] || attrs['checkGeMessage'] || nls._('message_ge');\n                var message = utils.template(messageTemplate, { min: min, label: $scope.label });\n                var format = shorts[2] || attrs['checkGeFormat'] || 'int';\n                switch (format) {\n                    case 'int':\n                        min = parseInt(min);\n                        break;\n                    case 'float':\n                        min = parseFloat(min);\n                        break;\n                    default:\n                }\n                $scope.checks.ge = {\n                    message: message,\n                    min: min,\n                    active: true\n                };\n                var condition = shorts[3] || attrs['checkGeIf'];\n                if (condition) {\n                    $scope.$parent.$watch(condition, function (value) {\n                        $scope.checks.ge.active = value;\n                    });\n                }\n            }\n\n            /**\n             * Setup field regexp check.\n             * Heads up: If you need '/' char in a message or '|' char in a pattern,\n             * You'd better use extended format instead of short one.\n             *\n             * Html format:\n             *      data-check-regexp = \"Invalid phone format|/\\d{7}/i|forbid|scopeCondition\"\n             * or\n             *      data-check-regexp-message = \"Invalid phone format\"\n             *      data-check-regexp-pattern = \"\\d{7}\"\n             *      data-check-regexp-modifiers = \"i\"\n             *      data-check-regexp-forbid = \"forbid\"\n             *      data-check-regexp-if = \"scopeCondition\"\n             */\n            function setupRegExp() {\n                var short = attrs['checkRegexp'];\n                var shorts = short ? short.split('|') : [];\n                var patternAndModifiers = short && /\\/(.*)\\/(\\w*)$/.exec(shorts[1]) || [];\n                var message = shorts[0] || attrs['checkRegexpMessage'] || nls._('message_regexp');\n                var pattern = patternAndModifiers[1] || attrs['checkRegexpPattern'] || '.*';\n                var modifiers = patternAndModifiers[2] || attrs['checkRegexpModifiers'] || '';\n                var forbid = shorts[2] || attrs['checkRegexpForbid'] || false;\n\n                var regexp = new RegExp(pattern, modifiers);\n\n                $scope.checks.regexp = {\n                    message: message,\n                    regexp: regexp,\n                    forbid: forbid,\n                    active: true\n                };\n                var condition = shorts[4] || attrs['checkRegexpIf'];\n                if (condition) {\n                    $scope.$parent.$watch(condition, function (value) {\n                        $scope.checks.regexp.active = value;\n                    });\n                }\n\n                //console.dir({'regexp':scope.checks.regexp});\n            }\n\n            /**\n             * Setup email field check.\n             *\n             * Html format:\n             *      data-check-email = \"Valid email format: user@domain.com|scopeCondition\"\n             * or\n             *      data-check-email-message = \"Valid email format: user@domain.com\"\n             *      data-check-email-if = \"scopeCondition\"\n             */\n            function setupEmail() {\n                var short = attrs['checkEmail'];\n                var shorts = short ? short.split('|') : [];\n                var message = nls._(shorts[0] || attrs['checkEmailMessage'] || 'message_email');\n                $scope.checks.regexp = {\n                    message: message,\n                    regexp: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i,\n                    forbid: false,\n                    active: true\n                };\n                var condition = shorts[1] || attrs['checkEmailIf'];\n                if (condition) {\n                    $scope.$parent.$watch(condition, function (value) {\n                        $scope.checks.regexp.active = value;\n                    });\n                }\n            }\n\n            /**\n             * Setup password compare check.\n             *\n             * Html format:\n             *      data-check-passwords = \"pass1_id|Passwords do not match|scopeCondition\"\n             * or\n             *      data-check-passwords-message = \"Invalid phone format\"\n             *      data-check-passwords-repeat = \"pass1_id\"\n             *      data-check-passwords-if = \"scopeCondition\"\n             */\n            function setupPasswords() {\n                var short = attrs['checkPasswords']; // 'pass1id|Введенные пароли отличаются'\n                var shorts = short ? short.split('|') : [];\n\n                var repeat = shorts[0] || attrs['checkPasswordsRepeat'];\n\n                var message = shorts[1] || attrs['checkPasswordsMessage'] || nls._('message_passwords');\n\n                $scope.checks.passwords = {\n                    message: message,\n                    repeat: repeat,\n                    active: true\n                };\n                var condition = shorts[2] || attrs['checkPasswordsIf'];\n                if (condition) {\n                    $scope.$parent.$watch(condition, function (value) {\n                        $scope.checks.passwords.active = value;\n                    });\n                }\n            }\n\n            /**\n             * Setup backend api check.\n             *\n             * Html format:\n             *      data-check-api = \"/api/check-existing/{name}/{value}|Email exists|500|scopeCondition\"\n             * or\n             *      data-check-api-message = \"Invalid phone format\"\n             *      data-check-api-url = \"/api/check-existing/{name}/{value}\"\n             *      data-check-api-delay = \"500\"\n             *      data-check-api-if = \"scopeCondition\"\n             */\n            function setupApiCall() {\n                var short = attrs['checkApi']; // '/api/check-existing/{name}/{value}|Email exists|500'\n                var shorts = short ? short.split('|') : [];\n\n                var url = shorts[0] || attrs['checkApiUrl'];\n\n                var message = shorts[1] || attrs['checkApiMessage'];\n\n                var delay = shorts[2] || attrs['checkApiDelay'] || 0;\n\n                $scope.checks.api = {\n                    message: message,\n                    url: url,\n                    delay: delay,\n                    dictionary: {},\n                    active: true\n                };\n                var condition = shorts[3] || attrs['checkApiIf'];\n                if (condition) {\n                    $scope.$parent.$watch(condition, function (value) {\n                        $scope.checks.api.active = value;\n                    });\n                }\n\n                $input.on('keyup change', function () {\n                    formCtrl.setFieldState($scope, 'clean');\n                    utils.patchScope($scope);\n                    //scope.$apply(); // ok\n                    if ($scope.value) {\n                        delayedCall('check-api-' + $scope.name, delay, function () {\n                            formCtrl.validateField($scope, true);\n                            utils.patchScope($scope);\n                            //scope.$apply();\n                        });\n                    }\n                });\n            }\n\n            /**\n             * Setup custom check.\n             *\n             * Html format:\n             *      data-check-custom = \"validateProjectTitle|Project Title should be sweet|scopeCondition\"\n             * or\n             *      data-check-custom-message = \"Project Title should be sweet\"\n             *      data-check-custom-callback = \"validateProjectTitle\"\n             *      data-check-custom-if = \"scopeCondition\"\n             *\n             * callback.call($scope, value) will be called\n             */\n            function setupCustom() {\n                var short = attrs['checkCustom'];\n                var shorts = short ? short.split('|') : [];\n\n                var callback = shorts[0] || attrs['checkCustomCallback'];\n\n                var message = shorts[1] || attrs['checkCustomMessage'] || nls._('message_custom');\n\n                $scope.checks.custom = {\n                    message: message,\n                    callback: callback,\n                    active: true\n                };\n                var condition = shorts[2] || attrs['checkCustomeIf'];\n                if (condition) {\n                    $scope.$parent.$watch(condition, function (value) {\n                        $scope.checks.custom.active = value;\n                    });\n                }\n            }\n\n            angular.forEach(attrs, function (attr, key) {\n                var m = key.match(/^check([A-Z][a-z]*)/),\n                    check = m && m[1];\n                if (check && !$scope.checks[check]) {\n                    switch (check) {\n                        case 'If':\n                            setupIf();\n                            break;\n                        case 'Required':\n                            setupRequired();\n                            break;\n                        case 'Length':\n                            setupLength();\n                            break;\n                        case 'Le':\n                            setupLe();\n                            break;\n                        case 'Lt':\n                            setupLt();\n                            break;\n                        case 'Ge':\n                            setupGe();\n                            break;\n                        case 'Gt':\n                            setupGt();\n                            break;\n                        case 'Range':\n                            setupRange();\n                            break;\n                        case 'Regexp':\n                            setupRegExp();\n                            break;\n                        case 'Email':\n                            setupEmail();\n                            break;\n                        case 'Passwords':\n                            setupPasswords();\n                            break;\n                        case 'Api':\n                            setupApiCall();\n                            break;\n                        case 'Custom':\n                            setupCustom();\n                            break;\n                        default:\n                    }\n                }\n            });\n            //console.dir({'checks': scope.checks});\n\n            $scope.$parent.$watch(model, function (value) {\n                //console.log('we are watching: '+value);\n                $scope.value = value;\n                //formCtrl.validateField(scope);\n            });\n\n            $scope.$watch('state', function (value) {\n                $element.removeClass('clean progress valid invalid');\n                $element.addClass(value);\n            });\n\n            formCtrl.addField($scope);\n        },\n        controller: function controller($scope) {}\n    };\n}]).directive('formMessage', function () {\n    return {\n        require: '^formValidator',\n        restrict: 'AE',\n        replace: true,\n        template: '<div class=\"form-message {{state}}\" data-ng-show=\"!!message\" data-ng-bind-html=\"message\"></div>',\n        scope: {\n            message: '@'\n        },\n        link: function link($scope, $element, attrs, formCtrl) {\n            $scope.message = '';\n            $scope.state = '';\n            formCtrl.setMessageBox($scope);\n        }\n    };\n}).directive('autoHeight', [function () {\n    return {\n        restrict: 'A',\n        link: function link($scope, $element) {\n            var resizeTextarea = function resizeTextarea() {\n                var height = $element.css('box-sizing') === 'border-box' ? parseInt($element.css('borderTopWidth')) + $element.prop('scrollHeight') + parseInt($element.css('borderBottomWidth')) : $element.prop('scrollHeight');\n                $element.css('height', height + 'px');\n            };\n\n            $element.on('change input cut paste drop keydown', resizeTextarea);\n        }\n    };\n}]).factory('delayedCall', ['$timeout', function ($timeout) {\n    var timeouts = {};\n\n    /**\n     * This function created named timeout that is canceled and rescheduled\n     * if function was called once again before timeout happened.\n     * Handy for field checks while user types in.\n     *\n     * @param {string} callId\n     * @param {int} timeout\n     * @param {function} callback\n     */\n    return function (callId, delay, callback) {\n        var handle = timeouts[callId];\n        if (handle) {\n            $timeout.cancel(handle);\n        }\n        timeouts[callId] = $timeout(function () {\n            timeouts[callId] = null;\n            callback();\n        }, delay);\n    };\n}]).config(['nlsProvider', function (nlsProvider) {\n\n    // Adding a translation table for the English language\n    nlsProvider.setTranslations('en-US', {\n        'message_required': 'Required Field',\n        'message_length': 'The length of this value should be between {min} and {max} symbols',\n        'message_range': 'The value should be between {min} and {max}',\n        'message_lt': 'The value should be lower than {max}',\n        'message_le': 'The value should be lower than {max} or equal',\n        'message_gt': 'The value should be greater than {min}',\n        'message_ge': 'The value should be greater than {min} or equal',\n        'message_regexp': 'Invalid format',\n        'message_email': 'Valid email format: user@domain.com',\n        'message_passwords': 'Passwords do not match',\n        'message_custom': 'Invalid value'\n\n    });\n\n    nlsProvider.setTranslations('ru-RU', {\n        'message_required': 'Обязательное поле',\n        'message_length': 'Длина значения должна быть от {min} до {max} символов',\n        'message_range': 'Значение должно быть в диапазоне от {min} до {max}',\n        'message_lt': 'Значение должно быть меньше {max}',\n        'message_le': 'Значение должно быть меньше или равно {max}',\n        'message_gt': 'Значение должно быть больше {min}',\n        'message_ge': 'Значение должно быть больше или равно {min}',\n        'message_regexp': 'Некорректный формат',\n        'message_email': 'Формат email: user@domain.com',\n        'message_passwords': 'Введенные пароли отличаются',\n        'message_custom': 'Некорректное значение'\n    });\n}]);","'use strict';\n\nangular.module('chayka-pagination', ['chayka-nls', 'chayka-utils']).directive('pagination', ['utils', function (utils) {\n\n    return {\n        restrict: 'AE',\n        template: '<ul data-ng-show=\"totalPages > 1\">' + '<li data-ng-repeat=\"item in items\" class=\"{{item.cls}}\"><a data-ng-click=\"item.click();\" data-ng-bind-html=\"item.text\"></a></li>' + '</ul>',\n        scope: {\n            pagination: '=',\n            currentPage: '=?',\n            totalPages: '=?',\n            packSize: '=?',\n            hrefTemplate: '@?',\n            click: '=?',\n            order: '@'\n        },\n\n        controller: function controller($scope) {\n\n            $scope.state = '';\n            $scope.currentPage = $scope.currentPage || 1;\n            $scope.totalPages = $scope.totalPages || 0;\n            $scope.packSize = $scope.packSize || 10;\n            $scope.hrefTemplate = $scope.hrefTemplate || '/page/<%= page %>';\n            $scope.items = [];\n            //$scope.order = $scope.order?\n            //    $scope.order.split(/\\s+/):\n            //    ['previous', 'first', 'rewind', 'pages', 'forward', 'last', 'next'];\n\n            if (!$scope.click) {\n                $scope.click = function (page) {\n                    $scope.$emit('Pagination.currentPage', page);\n                    if (page !== $scope.currentPage) {\n                        $scope.$emit('Pagination.pageChanged', page);\n                    }\n                };\n            }\n\n            /**\n             * Set current page\n             *\n             * @param {int} val\n             * @param {bool} render\n             * @returns {*}\n             */\n            $scope.setCurrentPage = function (val, render) {\n                $scope.currentPage = val;\n                if (render) {\n                    $scope.render();\n                }\n                return $scope;\n            };\n\n            /**\n             * Get current page\n             *\n             * @returns {*|number}\n             */\n            $scope.getCurrentPage = function () {\n                return $scope.currentPage;\n            };\n\n            /**\n             * Set total amount of pages\n             *\n             * @param val\n             * @param render\n             * @returns {*}\n             */\n            $scope.setTotalPages = function (val, render) {\n                $scope.totalPages = val;\n                if (render) {\n                    $scope.render();\n                }\n                return $scope;\n            };\n\n            /**\n             * Get total amount of pages\n             *\n             * @returns {*|number}\n             */\n            $scope.getTotalPages = function () {\n                return $scope.totalPages;\n            };\n\n            /**\n             * Set number of pages between [...]\n             *\n             * @param val\n             * @param render\n             * @returns {*}\n             */\n            $scope.setPackSize = function (val, render) {\n                $scope.packSize = val;\n                if (render) {\n                    $scope.render();\n                }\n                return $scope;\n            };\n\n            /**\n             * Get number of pages between [...]\n             * @returns {*|number}\n             */\n            $scope.getPackSize = function () {\n                return $scope.packSize;\n            };\n\n            /**\n             * Set href template\n             *\n             * @param val\n             * @param render\n             * @returns {*}\n             */\n            $scope.setHrefTemplate = function (val, render) {\n                $scope.hrefTemplate = val;\n                if (render) {\n                    $scope.render();\n                }\n                return $scope;\n            };\n\n            /**\n             * Get href template\n             *\n             * @returns {*|string}\n             */\n            $scope.getHrefTemplate = function () {\n                return $scope.hrefTemplate;\n            };\n\n            /**\n             * Get page href\n             *\n             * @param page\n             * @returns {*}\n             */\n            $scope.getHref = function (page) {\n\n                if (page >= 1 && page <= $scope.getTotalPages() && $scope.getHrefTemplate()) {\n                    return utils.template($scope.getHrefTemplate(), { page: page });\n                }\n\n                return '#';\n            };\n\n            /**\n             * Generate page nav link item\n             *\n             * @param page\n             * @param text\n             * @returns {{page: Number, text: *, href: *, cls: string, click: Function}}\n             */\n            $scope.getItem = function (page, text) {\n\n                page = parseInt(page);\n                text = text || page;\n\n                var cls = '';\n                if (page === $scope.getCurrentPage()) {\n                    cls = 'active';\n                }\n                if (page < 1 || page > $scope.getTotalPages()) {\n                    cls = 'disabled';\n                }\n\n                return {\n                    page: page,\n                    text: text,\n                    href: $scope.getHref(page),\n                    cls: cls,\n                    click: function click() {\n                        if (page > 0 && page <= $scope.totalPages) {\n                            $scope.click(page);\n                        }\n                        return false;\n                    }\n                };\n            };\n\n            /**\n             * Generate page nav link items\n             *\n             * @returns {Array}\n             */\n            $scope.getItems = function () {\n                var current = $scope.getCurrentPage();\n                var packSize = $scope.getPackSize();\n                var totalPages = $scope.getTotalPages();\n                var packStart = 1;\n                var packFinish = totalPages;\n                var items = [];\n\n                if (packSize < totalPages) {\n                    packStart = current - Math.floor((packSize - 1) / 2);\n                    packFinish = current + Math.ceil((packSize - 1) / 2);\n                    var offset = 0;\n                    if (packStart < 1) {\n                        offset = 1 - packStart;\n                    }\n                    if (packFinish > totalPages) {\n                        offset = totalPages - packFinish;\n                    }\n                    packStart += offset;\n                    packFinish += offset;\n                }\n\n                /**\n                 *  ['previous', 'first', 'rewind', 'pages', 'forward', 'last', 'next'];\n                 */\n                $scope.order.split(/\\s+/).forEach(function (item) {\n                    switch (item) {\n                        case 'previous':\n                            items.push($scope.getItem(current - 1, '&larr;'));\n                            break;\n                        case 'first':\n                            if (packStart > 1) {\n                                items.push($scope.getItem(1));\n                            }\n                            break;\n                        case 'rewind':\n                            if (packStart > 2) {\n                                items.push($scope.getItem(packStart - 1, '...'));\n                            }\n                            break;\n                        case 'pages':\n                            for (var i = packStart; i <= packFinish; i++) {\n                                items.push($scope.getItem(i));\n                            }\n                            break;\n                        case 'forward':\n                            if (totalPages - packFinish >= 2) {\n                                items.push($scope.getItem(packFinish + 1, '...'));\n                            }\n                            break;\n                        case 'last':\n                            if (totalPages > packFinish) {\n                                items.push($scope.getItem(totalPages));\n                            }\n                            break;\n                        case 'next':\n                            items.push($scope.getItem(current + 1, '&rarr;'));\n                            break;\n                    }\n                });\n\n                return items;\n            };\n\n            /**\n             * Render pagination\n             */\n            $scope.render = function () {\n                $scope.items = $scope.getItems();\n            };\n\n            $scope.pagination = $scope;\n        }\n    };\n}]).config(['nlsProvider', function (nlsProvider) {\n\n    // Adding a translation table for the English language\n    nlsProvider.setTranslations('en-US', {\n        'next': 'Next',\n        'previous': 'Previous',\n        'next_page': 'Next page',\n        'previous_page': 'Previous Page'\n    });\n\n    nlsProvider.setTranslations('ru-RU', {\n        'next': 'Следующая',\n        'previous': 'Предыдущая',\n        'next_page': 'Следующая страница',\n        'previous_page': 'Предыдущая страница'\n    });\n}]);"],"sourceRoot":"/source/"}