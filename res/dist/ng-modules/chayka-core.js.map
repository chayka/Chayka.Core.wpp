{"version":3,"sources":["chayka-utils.js","angular-sanitize.js","chayka-buttons.js","chayka-nls.js","chayka-spinners.js","chayka-ajax.js","chayka-modals.js","chayka-forms.js","chayka-pagination.js"],"names":["angular","module","factory","$window","$timeout","$compile","Chayka","Utils","declare","classname","parent","implementation","parts","split","root","part","i","length","isUndefined","extend","isFunction","ensure","isObject","getItem","obj","key","defaultValue","undefined","isArray","setObjectDefaults","defaults","hasOwnProperty","updateObject","update","property","getHtmlParam","$element","name","value","attr","data","template","tpl","params","replace","all","param","toString","patchScope","scope","$apply","getResourceUrl","appId","resPath","Core","appResFolderUrls","recursiveDirectiveCompile","element","link","post","compiledContents","contents","remove","pre","clone","append","apply","arguments","ordinal","input","n","Math","min","directive","utils","restrict","templateUrl","attributes","include","src","filter","window","$SanitizeProvider","this","$get","$$sanitizeUri","html","buf","htmlParser","htmlSanitizeWriter","uri","isImage","test","join","sanitizeText","chars","writer","noop","makeMap","str","items","handler","parseStartTag","tag","tagName","rest","unary","lowercase","blockElements","stack","last","inlineElements","parseEndTag","optionalEndTagElements","voidElements","push","attrs","ATTR_REGEXP","match","doubleQuotedValue","singleQuotedValue","unquotedValue","decodeEntities","start","pos","end","index","text","specialElements","RegExp","COMMENT_REGEXP","CDATA_REGEXP","indexOf","lastIndexOf","comment","substring","DOCTYPE_REGEXP","BEGING_END_TAGE_REGEXP","END_TAG_REGEXP","BEGIN_TAG_REGEXP","START_TAG_REGEXP","$sanitizeMinErr","hiddenPre","innerHTML","textContent","encodeEntities","SURROGATE_PAIR_REGEXP","hi","charCodeAt","low","NON_ALPHANUMERIC_REGEXP","uriValidator","ignore","out","bind","validElements","forEach","lkey","validAttrs","uriAttrs","$$minErr","optionalEndTagBlockElements","optionalEndTagInlineElements","svgElements","htmlAttrs","svgAttrs","document","createElement","provider","$sanitize","LINKY_URL_REGEXP","MAILTO_REGEXP","target","addText","addLink","url","isDefined","raw","substr","stdButtonClass","buttons","setButtonClass","cls","getButtonClass","currentLocale","dictionaries","nls","setLocale","locale","getLocale","setTranslations","translations","getSupportedLocales","Object","keys","_","dictionary","defaultDictionary","config","nlsProvider","spinner","visible","message","controller","$scope","show","hide","ctrl","spinners","messages","total","id","$","on","e","trigger","$http","modals","generalSpinner","ajax","Ajax","errorHandlers","addErrorHandler","errorCode","code","removeErrorHandler","handleError","payload","res","reg","handleErrors","empty_response","errors","processResponse","response","defaultMessage","isString","m","trim","spinnersUsed","prepare","options","spinnerId","spinnerFieldId","spinnerMessage","errorMessage","successMessage","formValidator","validateOnSend","send","success","error","complete","prepared","sendHandler","result","validateFields","validateFieldById","setFieldState","clearMessage","completeHandler","status","headers","errorHandler","showErrors","alert","successHandler","showMessage","request","method","get","head","jsonp","put","patch","promise","del","postData","confirm","onSuccess","sendRequest","click","preventDefault","btn","queue","create","button","defaultOptions","title","modalClass","callback","content","close","$event","currentTarget","shift","buttonClass","controllerAs","bindToController","transclude","modal","width","height","onClose","isOpen","setTitle","setButtons","btns","css","Yes","No","Ok","validator","scrollMargin","scrollDuration","fields","messageBox","setMessageBox","msgBox","state","addField","field","setFieldError","clearFieldError","checkRequired","c","required","active","checkLength","max","checkRange","range","lower","minE","greater","maxE","checkLt","lt","checkLe","le","checkGt","gt","checkGe","ge","checkRegexp","regexp","valid","forbid","checkPasswords","passwords","repeatField","repeat","checkApi","api","encodeURIComponent","checkCustom","custom","$parent","call","validateField","silent","checks","check","fieldId","scrollTo","scrollPos","offset","top","duration","parseInt","jQuery","pageYOffset","animate","scrollTop","scrollUp","getFieldValues","values","delayedCall","require","label","hint","$attrs","controllers","setupIf","$watch","setupRequired","short","shorts","condition","setupLength","messageTemplate","setupRange","minStr","maxStr","format","parseFloat","setupLt","setupLe","setupGt","setupGe","setupRegExp","patternAndModifiers","exec","pattern","modifiers","setupEmail","setupPasswords","setupApiCall","delay","$input","formCtrl","setupCustom","find","inputType","$oldLabel","$newLabel","model","addClass","focus","blur","removeClass","resizeTextarea","prop","timeouts","callId","handle","cancel","message_required","message_length","message_range","message_lt","message_le","message_gt","message_ge","message_regexp","message_email","message_passwords","message_custom","pagination","currentPage","totalPages","packSize","hrefTemplate","order","page","$emit","setCurrentPage","val","render","getCurrentPage","setTotalPages","getTotalPages","setPackSize","getPackSize","setHrefTemplate","getHrefTemplate","getHref","href","getItems","current","packStart","packFinish","floor","ceil","item","next","previous","next_page","previous_page"],"mappings":"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","file":"chayka-core.js","sourcesContent":["'use strict';\n\nangular.module('chayka-utils', [])\n    .factory('utils', ['$window', '$timeout', '$compile', function($window, $timeout, $compile){\n        var Chayka = $window.Chayka || {};\n\n        Chayka.Utils = Chayka.Utils ||\n        {\n\n\n            /**\n             * Convenient way do define some object with complex names like Chayka.Auth.aaa\n             *\n             * @param {String} classname\n             * @param {Object} parent\n             * @param {Object} implementation\n             * @returns {*}\n             */\n            declare: function(classname, parent, implementation){\n                var parts = classname.split('.');\n                var root = $window;\n                var part = '';\n                for(var i = 0; i < parts.length; i++){\n                    part = parts[i];\n                    if(i === parts.length - 1){\n                        break;\n                    }\n                    root[part] = root[part] || {};\n                    root = root[part];\n                }\n\n                if(angular.isUndefined(implementation)){\n                    implementation = parent;\n                    parent = null;\n                }\n\n                if(parent){\n                    if(parent.extend && angular.isFunction(parent.extend)){\n                        root[part] = parent.extend(implementation);\n                    }else{\n                        root[part] = angular.extend(parent, implementation);\n                    }\n                }else{\n                    root[part] = implementation;\n                }\n\n                return root[part];\n            },\n\n            /**\n             * Ensure that object exists, extends it if needed and returns reference to it.\n             *\n             * @param {String} classname\n             * @param {Object} extend\n             * @returns {*}\n             */\n            ensure: function(classname, extend){\n                var parts = classname.split('.');\n                var root = $window;\n                var part = '';\n                for(var i = 0; i < parts.length; i++){\n                    part = parts[i];\n                    root[part] = root[part] || {};\n                    root = root[part];\n                }\n                if(extend && angular.isObject(extend)){\n                    angular.extend(root, extend);\n                }\n\n                return root;\n            },\n\n            /**\n             * Some little helper to get default values,\n             * Key can be complex like Chayka.Auth.aaa\n             *\n             * @param obj\n             * @param key\n             * @param defaultValue\n             * @returns {*}\n             */\n            getItem: function(obj, key, defaultValue){\n                if(defaultValue === undefined){\n                    defaultValue = null;\n                }\n                var parts = (key+'').split('.');\n                if(obj && (angular.isObject(obj) || angular.isArray(obj))){\n                    var root = obj;\n                    for(var i = 0; i < parts.length; i++){\n                        var part = parts[i];\n                        if((angular.isObject(root) || angular.isArray(root)) && root[part]!==undefined){\n                            root = root[part];\n                        }else{\n                            return defaultValue;\n                        }\n                    }\n                    return root;\n                }\n\n                return defaultValue;\n            },\n\n            /**\n             * Set default values if object members not set\n             *\n             * @param {{}} obj\n             * @param {{}} defaults\n             */\n            setObjectDefaults: function(obj, defaults){\n                obj = obj || {};\n                for(var key in defaults){\n                    if(defaults.hasOwnProperty(key)){\n                        if(typeof defaults[key] === 'object'){\n                            obj[key] = Chayka.Utils.setObjectDefaults(obj[key] || {}, defaults[key]);\n                        }else if(obj[key] === undefined){\n                            obj[key] = defaults[key];\n                        }\n                    }\n                }\n\n                return obj;\n            },\n\n            /**\n             * Remove all existing object members and set new ones from update.\n             * Returns updated object\n             *\n             * @param {{}} obj\n             * @param {{}} update\n             * @return {{}}\n             */\n            updateObject: function(obj, update){\n                for(var property in obj){\n                    if(obj.hasOwnProperty(property)){\n                        if(update[property] !== undefined){\n                            obj[property] = null;\n                        }else{\n                            delete obj[property];\n                        }\n                    }\n                }\n\n                return angular.extend(obj, update);\n            },\n\n            /**\n             * Get param from html tag\n             *\n             * @param {jQuery} $element\n             * @param {string} name\n             * @param {*} defaultValue\n             * @return {*}\n             */\n            getHtmlParam: function($element, name, defaultValue){\n                var value = $element.attr(name) || $element.attr('data-'+name) || $element.data(name);\n                if(value === undefined){\n                    value = defaultValue;\n                }\n                return value;\n            },\n\n            /**\n             * Simple template function, replaces '{var}' with var value.\n             *\n             * @param {string} tpl\n             * @param {obj} params\n             * @returns {string}\n             */\n            template: function(tpl, params){\n                return tpl.replace(/{([^}]+)}/g, function(all, param){\n                    return params[param].toString() || '';\n                });\n            },\n\n            /**\n             * Bullet proof scope.$apply() caller\n             * @param scope\n             */\n            patchScope: function(scope){\n                if(scope && angular.isFunction(scope.$apply)){\n                    $timeout(function(){scope.$apply();}, 0);\n                }\n\n            },\n\n            /**\n             * Get resource url from specified chayka application (plugin or theme)\n             *\n             * @param appId\n             * @param resPath\n             * @return {*}\n             */\n            getResourceUrl: function(appId, resPath){\n                return Chayka.Utils.getItem(Chayka.Core.appResFolderUrls, appId, '/no_app_url_found/') + resPath;\n            },\n\n\n            /**\n             * Manually compiles the element, fixing the recursion loop.\n             * @see http://stackoverflow.com/questions/14430655/recursion-in-angular-directives\n             *\n             * @param element\n             * @param [link] A post-link function, or an object with function(s) registered via pre and post properties.\n             * @returns An object containing the linking functions.\n             */\n            recursiveDirectiveCompile: function(element, link){\n                // Normalize the link parameter\n                if(angular.isFunction(link)){\n                    link = { post: link };\n                }\n\n                // Break the recursion loop by removing the contents\n                var contents = element.contents().remove();\n                var compiledContents;\n                return {\n                    pre: (link && link.pre) ? link.pre : null,\n                    /**\n                     * Compiles and re-adds the contents\n                     */\n                    post: function(scope, element){\n                        // Compile the contents\n                        if(!compiledContents){\n                            compiledContents = $compile(contents);\n                        }\n                        // Re-add the compiled contents to the element\n                        compiledContents(scope, function(clone){\n                            element.append(clone);\n                        });\n\n                        // Call the post-linking function, if any\n                        if(link && link.post){\n                            link.post.apply(null, arguments);\n                        }\n                    }\n                };\n            },\n\n            /**\n             * Return ordinal suffix of an integer\n             * @param {int} input\n             * @return {string}\n             */\n            ordinal: function(input){\n                var n = input % 100;\n                return (n < 11 || n > 13) ?\n                        ['st', 'nd', 'rd', 'th'][Math.min((n - 1) % 10, 3)] :\n                        'th';\n            }\n\n        };\n\n        Chayka.Utils.ensure('Chayka.Utils', Chayka.Utils);\n\n        return Chayka.Utils;\n    }])\n    /**\n     * Angular directive that includes a template from WP plugin or theme.\n     * You don't have to know plugin server path but it's ID instead\n     * Works like that:\n     *      <div wp-include=\"Chayka.Core:ng/template.html\"></div>\n     *      <div wp-include=\"ng/template.html\" wp-app=\"Chayka.Core\"></div>\n     *      <wp-include=\"Chayka.Core:ng/template.html\"></wp-include>\n     *      <wp-include=\"ng/template.html\" app-id=\"Chayka.Core\"></wp-include>\n     */\n    .directive('wpInclude', ['utils', function(utils){\n        return {\n            restrict: 'AE',\n            templateUrl: function(element, attributes){\n                var include = attributes['wpInclude'] ||\n                    attributes['wp-include'] ||\n                    attributes['data-wp-include'] ||\n                    attributes['src'];\n                var src = include,\n                    params = include.split(':');\n                var appId = attributes['wpApp'] ||\n                    attributes['wp-app'] ||\n                    attributes['data-wp-app'] ||\n                    attributes['app-id'];\n                if(params.length > 1){\n                    appId = params[0];\n                    src = params[1];\n                }\n                return utils.getResourceUrl(appId, src);\n            }\n        };\n    }])\n    .filter('ordinal', ['utils', function(utils){\n        return function(input){\n            return input + utils.ordinal(input);\n        };\n    }])\n;","/**\n * @license AngularJS v1.3.20\n * (c) 2010-2014 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *     Any commits to this file should be reviewed with security in mind.  *\n *   Changes to this file can potentially create security vulnerabilities. *\n *          An approval from 2 Core members with history of modifying      *\n *                         this file is required.                          *\n *                                                                         *\n *  Does the change somehow allow for arbitrary javascript to be executed? *\n *    Or allows for someone to change the prototype of built-in objects?   *\n *     Or gives undesired access to variables likes document or window?    *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\nvar $sanitizeMinErr = angular.$$minErr('$sanitize');\n\n/**\n * @ngdoc module\n * @name ngSanitize\n * @description\n *\n * # ngSanitize\n *\n * The `ngSanitize` module provides functionality to sanitize HTML.\n *\n *\n * <div doc-module-components=\"ngSanitize\"></div>\n *\n * See {@link ngSanitize.$sanitize `$sanitize`} for usage.\n */\n\n/*\n * HTML Parser By Misko Hevery (misko@hevery.com)\n * based on:  HTML Parser By John Resig (ejohn.org)\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n *\n * // Use like so:\n * htmlParser(htmlString, {\n *     start: function(tag, attrs, unary) {},\n *     end: function(tag) {},\n *     chars: function(text) {},\n *     comment: function(text) {}\n * });\n *\n */\n\n\n/**\n * @ngdoc service\n * @name $sanitize\n * @kind function\n *\n * @description\n *   The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are\n *   then serialized back to properly escaped html string. This means that no unsafe input can make\n *   it into the returned string, however, since our parser is more strict than a typical browser\n *   parser, it's possible that some obscure input, which would be recognized as valid HTML by a\n *   browser, won't make it through the sanitizer. The input may also contain SVG markup.\n *   The whitelist is configured using the functions `aHrefSanitizationWhitelist` and\n *   `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider `$compileProvider`}.\n *\n * @param {string} html HTML input.\n * @returns {string} Sanitized HTML.\n *\n * @example\n   <example module=\"sanitizeExample\" deps=\"angular-sanitize.js\">\n   <file name=\"index.html\">\n     <script>\n         angular.module('sanitizeExample', ['ngSanitize'])\n           .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {\n             $scope.snippet =\n               '<p style=\"color:blue\">an html\\n' +\n               '<em onmouseover=\"this.textContent=\\'PWN3D!\\'\">click here</em>\\n' +\n               'snippet</p>';\n             $scope.deliberatelyTrustDangerousSnippet = function() {\n               return $sce.trustAsHtml($scope.snippet);\n             };\n           }]);\n     </script>\n     <div ng-controller=\"ExampleController\">\n        Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n       <table>\n         <tr>\n           <td>Directive</td>\n           <td>How</td>\n           <td>Source</td>\n           <td>Rendered</td>\n         </tr>\n         <tr id=\"bind-html-with-sanitize\">\n           <td>ng-bind-html</td>\n           <td>Automatically uses $sanitize</td>\n           <td><pre>&lt;div ng-bind-html=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n           <td><div ng-bind-html=\"snippet\"></div></td>\n         </tr>\n         <tr id=\"bind-html-with-trust\">\n           <td>ng-bind-html</td>\n           <td>Bypass $sanitize by explicitly trusting the dangerous value</td>\n           <td>\n           <pre>&lt;div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"&gt;\n&lt;/div&gt;</pre>\n           </td>\n           <td><div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"></div></td>\n         </tr>\n         <tr id=\"bind-default\">\n           <td>ng-bind</td>\n           <td>Automatically escapes</td>\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n           <td><div ng-bind=\"snippet\"></div></td>\n         </tr>\n       </table>\n       </div>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     it('should sanitize the html snippet by default', function() {\n       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).\n         toBe('<p>an html\\n<em>click here</em>\\nsnippet</p>');\n     });\n\n     it('should inline raw snippet if bound to a trusted value', function() {\n       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).\n         toBe(\"<p style=\\\"color:blue\\\">an html\\n\" +\n              \"<em onmouseover=\\\"this.textContent='PWN3D!'\\\">click here</em>\\n\" +\n              \"snippet</p>\");\n     });\n\n     it('should escape snippet without any filter', function() {\n       expect(element(by.css('#bind-default div')).getInnerHtml()).\n         toBe(\"&lt;p style=\\\"color:blue\\\"&gt;an html\\n\" +\n              \"&lt;em onmouseover=\\\"this.textContent='PWN3D!'\\\"&gt;click here&lt;/em&gt;\\n\" +\n              \"snippet&lt;/p&gt;\");\n     });\n\n     it('should update', function() {\n       element(by.model('snippet')).clear();\n       element(by.model('snippet')).sendKeys('new <b onclick=\"alert(1)\">text</b>');\n       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).\n         toBe('new <b>text</b>');\n       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).toBe(\n         'new <b onclick=\"alert(1)\">text</b>');\n       expect(element(by.css('#bind-default div')).getInnerHtml()).toBe(\n         \"new &lt;b onclick=\\\"alert(1)\\\"&gt;text&lt;/b&gt;\");\n     });\n   </file>\n   </example>\n */\nfunction $SanitizeProvider() {\n  this.$get = ['$$sanitizeUri', function($$sanitizeUri) {\n    return function(html) {\n      var buf = [];\n      htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {\n        return !/^unsafe/.test($$sanitizeUri(uri, isImage));\n      }));\n      return buf.join('');\n    };\n  }];\n}\n\nfunction sanitizeText(chars) {\n  var buf = [];\n  var writer = htmlSanitizeWriter(buf, angular.noop);\n  writer.chars(chars);\n  return buf.join('');\n}\n\n\n// Regular Expressions for parsing tags and attributes\nvar START_TAG_REGEXP =\n       /^<((?:[a-zA-Z])[\\w:-]*)((?:\\s+[\\w:-]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)\\s*(>?)/,\n  END_TAG_REGEXP = /^<\\/\\s*([\\w:-]+)[^>]*>/,\n  ATTR_REGEXP = /([\\w:-]+)(?:\\s*=\\s*(?:(?:\"((?:[^\"])*)\")|(?:'((?:[^'])*)')|([^>\\s]+)))?/g,\n  BEGIN_TAG_REGEXP = /^</,\n  BEGING_END_TAGE_REGEXP = /^<\\//,\n  COMMENT_REGEXP = /<!--(.*?)-->/g,\n  DOCTYPE_REGEXP = /<!DOCTYPE([^>]*?)>/i,\n  CDATA_REGEXP = /<!\\[CDATA\\[(.*?)]]>/g,\n  SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,\n  // Match everything outside of normal chars and \" (quote character)\n  NON_ALPHANUMERIC_REGEXP = /([^\\#-~| |!])/g;\n\n\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\nvar voidElements = makeMap(\"area,br,col,hr,img,wbr\");\n\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\nvar optionalEndTagBlockElements = makeMap(\"colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr\"),\n    optionalEndTagInlineElements = makeMap(\"rp,rt\"),\n    optionalEndTagElements = angular.extend({},\n                                            optionalEndTagInlineElements,\n                                            optionalEndTagBlockElements);\n\n// Safe Block Elements - HTML5\nvar blockElements = angular.extend({}, optionalEndTagBlockElements, makeMap(\"address,article,\" +\n        \"aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,\" +\n        \"h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul\"));\n\n// Inline Elements - HTML5\nvar inlineElements = angular.extend({}, optionalEndTagInlineElements, makeMap(\"a,abbr,acronym,b,\" +\n        \"bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,\" +\n        \"samp,small,span,strike,strong,sub,sup,time,tt,u,var\"));\n\n// SVG Elements\n// https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Elements\nvar svgElements = makeMap(\"animate,animateColor,animateMotion,animateTransform,circle,defs,\" +\n        \"desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,\" +\n        \"line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,set,\" +\n        \"stop,svg,switch,text,title,tspan,use\");\n\n// Special Elements (can contain anything)\nvar specialElements = makeMap(\"script,style\");\n\nvar validElements = angular.extend({},\n                                   voidElements,\n                                   blockElements,\n                                   inlineElements,\n                                   optionalEndTagElements,\n                                   svgElements);\n\n//Attributes that have href and hence need to be sanitized\nvar uriAttrs = makeMap(\"background,cite,href,longdesc,src,usemap,xlink:href\");\n\nvar htmlAttrs = makeMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' +\n    'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' +\n    'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,span,start,summary,target,title,type,' +\n    'valign,value,vspace,width');\n\n// SVG attributes (without \"id\" and \"name\" attributes)\n// https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Attributes\nvar svgAttrs = makeMap('accent-height,accumulate,additive,alphabetic,arabic-form,ascent,' +\n    'attributeName,attributeType,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,' +\n    'color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,' +\n    'font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,' +\n    'gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,' +\n    'keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,' +\n    'markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,' +\n    'overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,' +\n    'repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,' +\n    'stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,' +\n    'stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,' +\n    'stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,' +\n    'underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,' +\n    'viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,' +\n    'xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,' +\n    'zoomAndPan');\n\nvar validAttrs = angular.extend({},\n                                uriAttrs,\n                                svgAttrs,\n                                htmlAttrs);\n\nfunction makeMap(str) {\n  var obj = {}, items = str.split(','), i;\n  for (i = 0; i < items.length; i++) obj[items[i]] = true;\n  return obj;\n}\n\n\n/**\n * @example\n * htmlParser(htmlString, {\n *     start: function(tag, attrs, unary) {},\n *     end: function(tag) {},\n *     chars: function(text) {},\n *     comment: function(text) {}\n * });\n *\n * @param {string} html string\n * @param {object} handler\n */\nfunction htmlParser(html, handler) {\n  if (typeof html !== 'string') {\n    if (html === null || typeof html === 'undefined') {\n      html = '';\n    } else {\n      html = '' + html;\n    }\n  }\n  var index, chars, match, stack = [], last = html, text;\n  stack.last = function() { return stack[stack.length - 1]; };\n\n  while (html) {\n    text = '';\n    chars = true;\n\n    // Make sure we're not in a script or style element\n    if (!stack.last() || !specialElements[stack.last()]) {\n\n      // Comment\n      if (html.indexOf(\"<!--\") === 0) {\n        // comments containing -- are not allowed unless they terminate the comment\n        index = html.indexOf(\"--\", 4);\n\n        if (index >= 0 && html.lastIndexOf(\"-->\", index) === index) {\n          if (handler.comment) handler.comment(html.substring(4, index));\n          html = html.substring(index + 3);\n          chars = false;\n        }\n      // DOCTYPE\n      } else if (DOCTYPE_REGEXP.test(html)) {\n        match = html.match(DOCTYPE_REGEXP);\n\n        if (match) {\n          html = html.replace(match[0], '');\n          chars = false;\n        }\n      // end tag\n      } else if (BEGING_END_TAGE_REGEXP.test(html)) {\n        match = html.match(END_TAG_REGEXP);\n\n        if (match) {\n          html = html.substring(match[0].length);\n          match[0].replace(END_TAG_REGEXP, parseEndTag);\n          chars = false;\n        }\n\n      // start tag\n      } else if (BEGIN_TAG_REGEXP.test(html)) {\n        match = html.match(START_TAG_REGEXP);\n\n        if (match) {\n          // We only have a valid start-tag if there is a '>'.\n          if (match[4]) {\n            html = html.substring(match[0].length);\n            match[0].replace(START_TAG_REGEXP, parseStartTag);\n          }\n          chars = false;\n        } else {\n          // no ending tag found --- this piece should be encoded as an entity.\n          text += '<';\n          html = html.substring(1);\n        }\n      }\n\n      if (chars) {\n        index = html.indexOf(\"<\");\n\n        text += index < 0 ? html : html.substring(0, index);\n        html = index < 0 ? \"\" : html.substring(index);\n\n        if (handler.chars) handler.chars(decodeEntities(text));\n      }\n\n    } else {\n      // IE versions 9 and 10 do not understand the regex '[^]', so using a workaround with [\\W\\w].\n      html = html.replace(new RegExp(\"([\\\\W\\\\w]*)<\\\\s*\\\\/\\\\s*\" + stack.last() + \"[^>]*>\", 'i'),\n        function(all, text) {\n          text = text.replace(COMMENT_REGEXP, \"$1\").replace(CDATA_REGEXP, \"$1\");\n\n          if (handler.chars) handler.chars(decodeEntities(text));\n\n          return \"\";\n      });\n\n      parseEndTag(\"\", stack.last());\n    }\n\n    if (html == last) {\n      throw $sanitizeMinErr('badparse', \"The sanitizer was unable to parse the following block \" +\n                                        \"of html: {0}\", html);\n    }\n    last = html;\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function parseStartTag(tag, tagName, rest, unary) {\n    tagName = angular.lowercase(tagName);\n    if (blockElements[tagName]) {\n      while (stack.last() && inlineElements[stack.last()]) {\n        parseEndTag(\"\", stack.last());\n      }\n    }\n\n    if (optionalEndTagElements[tagName] && stack.last() == tagName) {\n      parseEndTag(\"\", tagName);\n    }\n\n    unary = voidElements[tagName] || !!unary;\n\n    if (!unary)\n      stack.push(tagName);\n\n    var attrs = {};\n\n    rest.replace(ATTR_REGEXP,\n      function(match, name, doubleQuotedValue, singleQuotedValue, unquotedValue) {\n        var value = doubleQuotedValue\n          || singleQuotedValue\n          || unquotedValue\n          || '';\n\n        attrs[name] = decodeEntities(value);\n    });\n    if (handler.start) handler.start(tagName, attrs, unary);\n  }\n\n  function parseEndTag(tag, tagName) {\n    var pos = 0, i;\n    tagName = angular.lowercase(tagName);\n    if (tagName)\n      // Find the closest opened tag of the same type\n      for (pos = stack.length - 1; pos >= 0; pos--)\n        if (stack[pos] == tagName)\n          break;\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (i = stack.length - 1; i >= pos; i--)\n        if (handler.end) handler.end(stack[i]);\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n    }\n  }\n}\n\nvar hiddenPre=document.createElement(\"pre\");\n/**\n * decodes all entities into regular string\n * @param value\n * @returns {string} A string with decoded entities.\n */\nfunction decodeEntities(value) {\n  if (!value) { return ''; }\n\n  hiddenPre.innerHTML = value.replace(/</g,\"&lt;\");\n  // innerText depends on styling as it doesn't display hidden elements.\n  // Therefore, it's better to use textContent not to cause unnecessary reflows.\n  return hiddenPre.textContent;\n}\n\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param value\n * @returns {string} escaped text\n */\nfunction encodeEntities(value) {\n  return value.\n    replace(/&/g, '&amp;').\n    replace(SURROGATE_PAIR_REGEXP, function(value) {\n      var hi = value.charCodeAt(0);\n      var low = value.charCodeAt(1);\n      return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    }).\n    replace(NON_ALPHANUMERIC_REGEXP, function(value) {\n      return '&#' + value.charCodeAt(0) + ';';\n    }).\n    replace(/</g, '&lt;').\n    replace(/>/g, '&gt;');\n}\n\n/**\n * create an HTML/XML writer which writes to buffer\n * @param {Array} buf use buf.jain('') to get out sanitized html string\n * @returns {object} in the form of {\n *     start: function(tag, attrs, unary) {},\n *     end: function(tag) {},\n *     chars: function(text) {},\n *     comment: function(text) {}\n * }\n */\nfunction htmlSanitizeWriter(buf, uriValidator) {\n  var ignore = false;\n  var out = angular.bind(buf, buf.push);\n  return {\n    start: function(tag, attrs, unary) {\n      tag = angular.lowercase(tag);\n      if (!ignore && specialElements[tag]) {\n        ignore = tag;\n      }\n      if (!ignore && validElements[tag] === true) {\n        out('<');\n        out(tag);\n        angular.forEach(attrs, function(value, key) {\n          var lkey=angular.lowercase(key);\n          var isImage = (tag === 'img' && lkey === 'src') || (lkey === 'background');\n          if (validAttrs[lkey] === true &&\n            (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {\n            out(' ');\n            out(key);\n            out('=\"');\n            out(encodeEntities(value));\n            out('\"');\n          }\n        });\n        out(unary ? '/>' : '>');\n      }\n    },\n    end: function(tag) {\n        tag = angular.lowercase(tag);\n        if (!ignore && validElements[tag] === true) {\n          out('</');\n          out(tag);\n          out('>');\n        }\n        if (tag == ignore) {\n          ignore = false;\n        }\n      },\n    chars: function(chars) {\n        if (!ignore) {\n          out(encodeEntities(chars));\n        }\n      }\n  };\n}\n\n\n// define ngSanitize module and register $sanitize service\nangular.module('ngSanitize', []).provider('$sanitize', $SanitizeProvider);\n\n/* global sanitizeText: false */\n\n/**\n * @ngdoc filter\n * @name linky\n * @kind function\n *\n * @description\n * Finds links in text input and turns them into html links. Supports http/https/ftp/mailto and\n * plain email address links.\n *\n * Requires the {@link ngSanitize `ngSanitize`} module to be installed.\n *\n * @param {string} text Input text.\n * @param {string} target Window (_blank|_self|_parent|_top) or named frame to open links in.\n * @returns {string} Html-linkified text.\n *\n * @usage\n   <span ng-bind-html=\"linky_expression | linky\"></span>\n *\n * @example\n   <example module=\"linkyExample\" deps=\"angular-sanitize.js\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('linkyExample', ['ngSanitize'])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.snippet =\n               'Pretty text with some links:\\n'+\n               'http://angularjs.org/,\\n'+\n               'mailto:us@somewhere.org,\\n'+\n               'another@somewhere.org,\\n'+\n               'and one more: ftp://127.0.0.1/.';\n             $scope.snippetWithTarget = 'http://angularjs.org/';\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n       Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n       <table>\n         <tr>\n           <td>Filter</td>\n           <td>Source</td>\n           <td>Rendered</td>\n         </tr>\n         <tr id=\"linky-filter\">\n           <td>linky filter</td>\n           <td>\n             <pre>&lt;div ng-bind-html=\"snippet | linky\"&gt;<br>&lt;/div&gt;</pre>\n           </td>\n           <td>\n             <div ng-bind-html=\"snippet | linky\"></div>\n           </td>\n         </tr>\n         <tr id=\"linky-target\">\n          <td>linky target</td>\n          <td>\n            <pre>&lt;div ng-bind-html=\"snippetWithTarget | linky:'_blank'\"&gt;<br>&lt;/div&gt;</pre>\n          </td>\n          <td>\n            <div ng-bind-html=\"snippetWithTarget | linky:'_blank'\"></div>\n          </td>\n         </tr>\n         <tr id=\"escaped-html\">\n           <td>no filter</td>\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br>&lt;/div&gt;</pre></td>\n           <td><div ng-bind=\"snippet\"></div></td>\n         </tr>\n       </table>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should linkify the snippet with urls', function() {\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\n             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);\n       });\n\n       it('should not linkify snippet without the linky filter', function() {\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).\n             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');\n         expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);\n       });\n\n       it('should update', function() {\n         element(by.model('snippet')).clear();\n         element(by.model('snippet')).sendKeys('new http://link.');\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\n             toBe('new http://link.');\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())\n             .toBe('new http://link.');\n       });\n\n       it('should work with the target property', function() {\n        expect(element(by.id('linky-target')).\n            element(by.binding(\"snippetWithTarget | linky:'_blank'\")).getText()).\n            toBe('http://angularjs.org/');\n        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');\n       });\n     </file>\n   </example>\n */\nangular.module('ngSanitize').filter('linky', ['$sanitize', function($sanitize) {\n  var LINKY_URL_REGEXP =\n        /((ftp|https?):\\/\\/|(www\\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\\S*[^\\s.;,(){}<>\"”’]/i,\n      MAILTO_REGEXP = /^mailto:/i;\n\n  return function(text, target) {\n    if (!text) return text;\n    var match;\n    var raw = text;\n    var html = [];\n    var url;\n    var i;\n    while ((match = raw.match(LINKY_URL_REGEXP))) {\n      // We can not end in these as they are sometimes found at the end of the sentence\n      url = match[0];\n      // if we did not match ftp/http/www/mailto then assume mailto\n      if (!match[2] && !match[4]) {\n        url = (match[3] ? 'http://' : 'mailto:') + url;\n      }\n      i = match.index;\n      addText(raw.substr(0, i));\n      addLink(url, match[0].replace(MAILTO_REGEXP, ''));\n      raw = raw.substring(i + match[0].length);\n    }\n    addText(raw);\n    return $sanitize(html.join(''));\n\n    function addText(text) {\n      if (!text) {\n        return;\n      }\n      html.push(sanitizeText(text));\n    }\n\n    function addLink(url, text) {\n      html.push('<a ');\n      if (angular.isDefined(target)) {\n        html.push('target=\"',\n                  target,\n                  '\" ');\n      }\n      html.push('href=\"',\n                url.replace(/\"/g, '&quot;'),\n                '\">');\n      addText(text);\n      html.push('</a>');\n    }\n  };\n}]);\n\n\n})(window, window.angular);\n","'use strict';\n\nangular.module('chayka-buttons', ['chayka-utils'])\n    .provider('buttons', function() {\n\n        var stdButtonClass = '';\n\n        //var buttons = {\n        //\n        //};\n\n        //angular.extend(this, buttons);\n        var buttons = {\n\n            /**\n             * Set button class\n             * @param {string} cls\n             */\n            setButtonClass: function(cls){\n                stdButtonClass = cls;\n            },\n\n            /**\n             * Get button class\n             * @return {string}\n             */\n            getButtonClass: function(){\n                return stdButtonClass;\n            },\n\n            $get: ['utils', function(utils){\n\n                utils.ensure('Chayka.Buttons',buttons);\n\n                return buttons;\n            }]\n        };\n\n        return buttons;\n    })\n;\n\n","'use strict';\n\nangular.module('chayka-nls', ['chayka-utils'])\n    .provider('nls', function(){\n\n        var currentLocale = 'en-US';\n\n        var dictionaries = {};\n\n        var nls = {\n\n            /**\n             * Set current locale (e.g. 'en-US')\n             *\n             * @param {string} locale\n             */\n            setLocale: function(locale){\n                currentLocale = locale;\n            },\n\n            /**\n             * Get current locale\n             *\n             * @return {string}\n             */\n            getLocale: function(){\n                return currentLocale;\n            },\n\n            /**\n             * Set translations for specified locale\n             *\n             * @param {string} locale\n             * @param {{}} translations\n             * @return {{}}\n             */\n            setTranslations: function(locale, translations){\n                dictionaries[locale] = dictionaries[locale] || {};\n                angular.extend(dictionaries[locale], translations);\n\n                return dictionaries[locale];\n            },\n\n            /**\n             * Returns array of registered locales\n             *\n             * @return {Array}\n             */\n            getSupportedLocales: function(){\n                return Object.keys(dictionaries);\n            },\n\n            /**\n             * Get translation for specified string\n             *\n             * @param {string} str\n             * @param {string} [locale]\n             */\n            _: function(str, locale){\n                locale = locale || currentLocale || 'en-US';\n                var dictionary = dictionaries[locale] || {};\n                var defaultDictionary = dictionaries['en-US'] || {};\n                return dictionary[str] || defaultDictionary[str] || str;\n            },\n\n            $get: ['utils', function(utils){\n\n                utils.ensure('Chayka.NLS', nls);\n\n                return nls;\n            }]\n\n        };\n\n        return nls;\n    })\n    .filter('nls', ['nls', function(nls){\n        return function(str, locale){\n            return nls._(str, locale);\n        };\n    }])\n    .config(['nlsProvider', function(nlsProvider){\n        var locale = window.Chayka && window.Chayka.Core && window.Chayka.Core.locale || 'en-US';\n        nlsProvider.setLocale(locale);\n    }])\n    ;","'use strict';\n\nangular.module('chayka-spinners', ['chayka-nls', 'chayka-utils'])\n    .directive('spinner', [function(){\n        return {\n            restrict: 'AE',\n            scope:{\n                spinner: '=',\n                visible: '=?',\n                message: '=?'\n            },\n            replace: true,\n            template: '<div class=\"chayka-spinner\" data-ng-show=\"visible\" data-ng-bind-html=\"message\"></div>',\n\n            controller: function($scope){\n\n                $scope.show = function(message){\n                    $scope.message = message || $scope.message || 'Loading...';\n                    $scope.visible = true;\n                };\n\n                $scope.hide = function(){\n                    $scope.visible = false;\n                };\n\n                $scope.spinner = $scope;\n            }\n        };\n    }])\n    .directive('multiSpinner', [function(){\n        return {\n            restrict: 'AE',\n            scope:{\n                spinner: '=multiSpinner'\n            },\n            replace: true,\n            template: '<div class=\"chayka-multi_spinner\" data-ng-show=\"total\"><div data-ng-repeat=\"(id, message) in messages\"><div data-spinner=\"spinners[id]\" data-message=\"message\" data-visible=\"true\"></div></div></div>',\n            //replace: true,\n            controller: function($scope){\n                var ctrl = {};\n                $scope.spinners = {};\n                $scope.messages = {};\n                $scope.total = 0;\n\n                ctrl.show = function(message, id){\n                    if(!id){\n                        id = 'spinner_'+$scope.total;\n                    }\n                    if(!$scope.messages[id]){\n                        $scope.messages[id] = message;\n                        $scope.total++;\n                    }\n                    return id;\n                };\n\n                ctrl.hide = function(id){\n                    if($scope.messages[id]){\n                        $scope.total--;\n                        delete $scope.messages[id];\n                        $scope.spinners[id] = null;\n                        //$scope.$apply();\n                    }\n                };\n\n                $scope.spinner = ctrl;\n            }\n        };\n    }])\n    .directive('generalSpinner', ['utils', 'generalSpinner', function(utils){\n        return {\n            restrict: 'AE',\n            template: '<div class=\"chayka-general_spinner\"><div data-multi-spinner=\"spinner\"></div></div>',\n            //replace: true,\n            controller: function($scope){\n                $scope.spinner = null;\n                var $ = angular.element;\n                $(document).on('Chayka.Spinners.show', function(e, message, id){\n                    if($scope.spinner){\n                        $scope.spinner.show(message, id);\n                        utils.patchScope($scope);\n                        //$scope.$apply();\n                    }\n                });\n                $(document).on('Chayka.Spinners.hide', function(e, id){\n                    if($scope.spinner){\n                        $scope.spinner.hide(id);\n                        utils.patchScope($scope);\n                        //$scope.$apply();\n                    }\n                });\n            }\n        };\n    }])\n    .factory('generalSpinner', ['utils', function(utils){\n        var $ = angular.element;\n\n        return utils.ensure('Chayka.Spinners', {\n            show:  function(message, id){\n                $(document).trigger('Chayka.Spinners.show', [message, id]);\n            },\n            hide: function(id){\n                $(document).trigger('Chayka.Spinners.hide', [id]);\n            }\n        });\n    }])\n;","'use strict';\n\nangular.module('chayka-ajax', ['chayka-modals', 'chayka-spinners'])\n    .factory('ajax', ['$window', '$http', '$timeout', 'modals', 'generalSpinner', 'utils', function($window, $http, $timeout, modals, generalSpinner, utils){\n        var $ = angular.element;\n        var Chayka = $window.Chayka || {};\n        var ajax = Chayka.Ajax = Chayka.Ajax || {\n\n            /**\n             * Registered error handlers for different error codes\n             */\n            errorHandlers: {\n                \n            },\n\n            /**\n             * Add error handler for errorCode.\n             * Handler may accept following params (code, message, payload),\n             * and should return true if error should not be processed with other handlers,\n             * false otherwise.\n             *\n             * @param {string} id   unique handler id\n             * @param {function} handler    error handler\n             * @param {string} errorCode    error code to process using handler\n             */\n            addErrorHandler: function(id, handler, errorCode){\n                errorCode = errorCode || null;\n                ajax.errorHandlers[id] = {\n                    'code': errorCode,\n                    'handler': handler\n                };\n            },\n\n            /**\n             * Remove error handler for specified id\n             * @param id\n             */\n            removeErrorHandler: function(id){\n                ajax.errorHandlers[id] = null;\n            },\n\n            /**\n             * Handle error with all the registered error handlers\n             * Returns true if error was processed and should be removed from the stack\n             *\n             * @param code\n             * @param message\n             * @param payload\n             * @returns {boolean}\n             */\n            handleError: function(code, message, payload){\n                var res = false;\n                for(var id in ajax.errorHandlers) {\n                    if (ajax.errorHandlers.hasOwnProperty(id)) {\n                        var reg = ajax.errorHandlers[id];\n                        if (reg && (!reg.code || reg.code === code)) {\n                            res = res || reg.handler(code, message, payload);\n                            if (res) {\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                return res;\n            },\n\n            /**\n             * Handle all the errors found in response including mass_errors\n             *\n             * @param data\n             * @returns {*}\n             */\n            handleErrors: function(data){\n                if(!data){\n                    return {'empty_response': 'Empty response'};\n                }\n                if('mass_errors' === data.code){\n                    for(var code in data.message){\n                        if(data.message.hasOwnProperty(code)) {\n                            if (ajax.handleError(code, data.message[code], data.payload)) {\n                                delete data.message[code];\n                            }\n                        }\n                    }\n                    return data.message;\n                }\n\n                var errors = {};\n                if(!ajax.handleError(data.code, data.message, data.payload)){\n                    errors[data.code] = data.message;\n                }\n                return errors;\n            },\n\n            /**\n             * Parse json in case some empty or html response\n             *\n             * @param response\n             * @param defaultMessage\n             * @returns {*}\n             */\n            processResponse: function(response, defaultMessage){\n                var message = defaultMessage || false;\n                var code = 1;\n                if(!angular.isUndefined(response.payload)){\n                    return response;\n                }else if(!response || angular.isString(response) && !response.length){\n                    message = 'Empty response';\n                }else if(angular.isString(response)){\n                    var m = response.match(/<body[^>]*>([\\s\\S]*)<\\/body>/m);\n                    m = m?m:response.match(/<br\\s*\\/>\\s*<b>[^<]+<\\/b>\\:\\s*(.*)<br\\s*\\/>/m);\n                    message = m?m[1].trim():defaultMessage;\n                }\n                return {code: code, message: message, payload: null};\n            },\n\n            spinnersUsed: 0,\n\n            /**\n             * Prepares all the handlers to show all the spinners and errors\n             *\n             * @param options\n             * - spinner: reference to Chayka.Spinners.spinner or false if no spinners needed\n             * - spinnerId: id for generalSpinner\n             * - spinnerFieldId: field id for showing spinner in the form field (uses formValidator)\n             * - spinnerMessage: message to show with spinner\n             * - errorMessage: default error message to show in case of error. Pass 'false' to suppress.\n             * - successMessage: default success message to show in case of success. Pass 'false' to suppress.\n             * - formValidator: reference to Chayka.Forms.formValidator\n             * - validateOnSend: set to false if you don't want automatic validation\n             * - scope: scope to call $apply in callbacks\n             * - success: function(data, status, headers, config)\n             * - error: function(data, status, headers, config)\n             * - complete: function(data, status, headers, config)\n             *\n             * @returns {*}\n             */\n            prepare: function(options){\n                var defaults = {\n                };\n\n                options = options || {};\n\n                options = angular.extend(defaults, options);\n\n                var spinner = options.spinner; //|| null;\n                if(!spinner && spinner !== false){\n                    spinner = null;\n                }\n                var spinnerId = options.spinnerId || 'spinner';\n                var spinnerFieldId = options.spinnerFieldId;\n                var spinnerMessage = options.spinnerMessage || 'Processing...';\n                var errorMessage = options.errorMessage || 'Operation failed';\n                var successMessage = options.successMessage;\n                var formValidator = options.formValidator;\n                var validateOnSend = angular.isUndefined(options.validateOnSend)?true:options.validateOnSend;\n                var scope = options.scope;\n\n                var send = options.send;\n                var success = options.success;\n                var error = options.error;\n                var complete = options.complete;\n\n                spinnerId = spinnerId + ajax.spinnersUsed++;\n\n                var prepared = {};\n                /**\n                 * Sender, ensures all the spinner initializations\n                 *\n                 * @returns {boolean}\n                 */\n                var sendHandler = function(){\n                    var result = false;\n                    if(formValidator && validateOnSend && !(!spinnerFieldId && formValidator.validateFields() || spinnerFieldId && formValidator.validateFieldById(spinnerId))){\n                        return false;\n                    }\n                    if(send && angular.isFunction(send)){\n                        result = send();\n                    }\n                    if(result){\n                        if(spinner!==false){\n                            if(spinner){\n                                spinner.show(spinnerMessage);\n                            }else if(spinnerFieldId && formValidator){\n                                formValidator.setFieldState(spinnerFieldId, 'progress', spinnerMessage);\n                            }else{\n                                generalSpinner.show(spinnerMessage, spinnerId);\n                            }\n                        }\n                        if(formValidator){\n                            formValidator.clearMessage();\n                        }\n\n                        if(scope){\n                            utils.patchScope(scope);\n                        }\n                        //if(scope && !scope.$$phase){\n                        //    scope.$apply();\n                        //}\n                    }\n\n                    return result;\n                };\n\n                prepared.send = sendHandler;\n\n                /**\n                 * Complete handler, called no matter what.\n                 *\n                 * @param data\n                 * @param status\n                 * @param headers\n                 * @param config\n                 */\n                var completeHandler = function(data, status, headers, config){\n                    if(spinner!==false){\n                        if(spinner){\n                            spinner.hide();\n                        }else if(spinnerFieldId && formValidator){\n                            formValidator.setFieldState(spinnerFieldId, 'clean');\n                        }else{\n                            generalSpinner.hide(spinnerId);\n                        }\n                    }\n                    if(complete && angular.isFunction(complete)){\n                        complete(data, status, headers, config);\n                    }\n                };\n\n                prepared.complete = completeHandler;\n\n                /**\n                 * Extended error handler, calls complete beforehand\n                 *\n                 * @param data\n                 * @param status\n                 * @param headers\n                 * @param config\n                 */\n                var errorHandler = function(data, status, headers, config){\n\n                    data = ajax.processResponse(data, errorMessage);\n\n                    completeHandler(data, status, headers, config);\n\n                    var errors = ajax.handleErrors(data);\n                    var message = errorMessage;\n                    for(var i in errors){\n                        if(errors.hasOwnProperty(i)) {\n                            message = errors[i] || errorMessage;\n                            break;\n                        }\n                    }\n                    if(formValidator){\n                        if(spinnerFieldId){\n                            formValidator.setFieldState(spinnerFieldId, 'error', message);\n                        }else {\n                            formValidator.showErrors(errors);\n                        }\n                    }else if(message !== false){\n                        modals.alert(message);\n                    }\n\n                    if(angular.isFunction(error)){\n                        error(data, status, headers, config);\n                    }\n                    if(scope){\n                        utils.patchScope(scope);\n                    }\n                };\n\n                prepared.error = errorHandler;\n\n                /**\n                 * Extended success handler, calls complete beforehand, and error if needed\n                 *\n                 * @param data\n                 * @param status\n                 * @param headers\n                 * @param config\n                 */\n                var successHandler = function(data, status, headers, config){\n                    //var data = $.brx.Ajax.detectArgData(arguments);\n                    data = ajax.processResponse(data, errorMessage);\n                    if(data.code){\n                        errorHandler(data, status, headers, config);\n                    }else{\n                        completeHandler(data, status, headers, config);\n                        var message = successMessage === false ? false : data.message || successMessage;\n                        if(formValidator && message){\n                            formValidator.showMessage(message);\n                        }\n                        if(success && angular.isFunction(success)){\n                            success(data, status, headers, config);\n                        }\n                    }\n                    if(scope){\n                        utils.patchScope(scope);\n                    }\n                };\n\n                prepared.success = successHandler;\n\n                return prepared;\n\n            },\n\n            /**\n             * Main request function.\n             * @param url\n             * @param options can contain all the 'prepare' options alongside with:\n             * - data: data for post, put, patch\n             * - method: http method ('get', 'post', etc)\n             * - config: config for angular.$http\n             *\n             * @returns {*}\n             */\n            request: function(url, options){\n\n                var data = options.data || null,\n                    method = options.method || 'post',\n                    config = options.config || {};\n\n                var send = null;\n\n                switch (method){\n                    case 'get':\n                        send = function(){\n                            return $http.get(url, config);\n                        };\n                        break;\n                    case 'delete':\n                        send = function(){\n                            return $http.delete(url, config);\n                        };\n                        break;\n                    case 'head':\n                        send = function(){\n                            return $http.head(url, config);\n                        };\n                        break;\n                    case 'jsonp':\n                        send = function(){\n                            return $http.jsonp(url, config);\n                        };\n                        break;\n                    case 'post':\n                        send = function(){\n                            return $http.post(url, data, config);\n                        };\n                        break;\n                    case 'put':\n                        send = function(){\n                            return $http.put(url, data, config);\n                        };\n                        break;\n                    case 'patch':\n                        send = function(){\n                            return $http.patch(url, data, config);\n                        };\n                        break;\n                    default :\n                }\n\n                options.send = send;\n\n                var prepared = ajax.prepare(options);\n\n                var promise = prepared.send();\n\n                if(promise){\n                    promise.success(prepared.success).error(prepared.error);\n                }\n\n                return promise;\n            },\n\n            get: function(url, options, config){\n                options = options || {};\n                options.method = 'get';\n                options.config = config;\n                return ajax.request(url, options);\n            },\n\n            del: function(url, options, config){\n                options = options || {};\n                options.method = 'delete';\n                options.config = config;\n                return ajax.request(url, options);\n            },\n\n            head: function(url, options, config){\n                options = options || {};\n                options.method = 'head';\n                options.config = config;\n                return ajax.request(url, options);\n            },\n\n            jsonp: function(url, options, config){\n                options = options || {};\n                options.method = 'jsonp';\n                options.config = config;\n                return ajax.request(url, options);\n            },\n\n            post: function(url, data, options, config){\n                options = options || {};\n                options.method = 'post';\n                options.data = data;\n                options.config = config;\n                return ajax.request(url, options);\n            },\n\n            put: function(url, data, options, config){\n                options = options || {};\n                options.method = 'put';\n                options.data = data;\n                options.config = config;\n                return ajax.request(url, options);\n            },\n\n            patch: function(url, data, options, config){\n                options = options || {};\n                options.method = 'patch';\n                options.data = data;\n                options.config = config;\n                return ajax.request(url, options);\n            }\n        };\n\n        return ajax;\n    }])\n    .directive('buttonAjaxRequest', ['ajax', 'modals', function(ajax, modals){\n        return {\n            scope: {\n                url: '@buttonAjaxRequest',\n                postData: '=?post',\n                confirm: '@?',\n                formValidator: '=?validator'\n            },\n\n            link: function($scope, $element){\n                var onSuccess = function(data){\n                    if(data.message){\n                        modals.alert(data.message);\n                    }\n                };\n                var sendRequest = function(){\n                    var params = {\n                        success: onSuccess\n                    };\n                    if($scope.formValidator){\n                        params.formValidator = $scope.formValidator;\n                    }\n                    if($scope.postData){\n                        ajax.post($scope.url, $scope.postData, params);\n                    }else{\n                        ajax.get($scope.url, params);\n                    }\n                };\n\n                $element.click(function(e){\n                    e.preventDefault();\n                    if($scope.confirm){\n                        modals.confirm($scope.confirm, sendRequest);\n                    }else{\n                        sendRequest();\n                    }\n                });\n            }\n        };\n    }])\n;","'use strict';\n\nangular.module('chayka-modals', ['chayka-nls', 'chayka-buttons', 'chayka-utils'])\n    .provider('modals', function(){\n\n        return {\n            $get: ['$window', 'nls', 'buttons', 'utils', function($window, nls, btn, utils){\n\n                var modals = utils.ensure('Chayka.Modals', {\n                    queue: [],\n                    //queue: modals.queue,\n\n                    //setQueueScope: function($scope){\n                    //    modals.scope = $scope;\n                    //},\n\n                    /**\n                     * Creates config object to be pushed to a modal queue\n                     *\n                     * @param options\n                     * @returns {modal}\n                     */\n                    create: function(options){\n                        if (options.buttons && angular.isObject(options.buttons) && !angular.isArray(options.buttons)) {\n                            var buttons = [];\n                            /**\n                             * @var {{\n                             *  text: string,\n                             *  click: function,\n                             *  persist: boolean,\n                             *  cls: string\n                             * }} button\n                             */\n                            angular.forEach(options.buttons, function(button, text){\n                                button.text = text;\n                                buttons.push(button);\n                            });\n                            options.buttons = buttons;\n                        }\n                        var defaultOptions = {};\n                        var m = angular.extend(defaultOptions, options);\n                        //var m = angular.extend(defaultOptions, options, modal);\n                        //m.prototype = modal;\n                        //if (m.element) {\n                        //    m.element.data('modal', m);\n                        //}\n                        return m;\n                    },\n\n                    /**\n                     * Shows anything in a modal window.\n                     *\n                     * @param {object} options\n                     *  - title\n                     *  - content\n                     *  - element\n                     *  - width\n                     *  - height\n                     *  - buttons\n                     * @returns {object}\n                     */\n                    show: function(options){\n                        var m = modals.create(options);\n                        modals.queue.push(m);\n                        return m;\n                    },\n\n                    /**\n                     * Shows alert box.\n                     *\n                     * @param {String} message\n                     * @param {String} [title]\n                     * @param {String} [modalClass]\n                     * @param {Function} [callback]\n                     */\n                    alert: function(message, title, modalClass, callback){\n                        modalClass = modalClass || 'modal_alert';\n                        modals.show({\n                            content: message,\n                            title: title || '',\n                            modalClass: modalClass,\n                            buttons: [\n                                {text: nls._('Ok'), click: callback}\n                            ]\n                        });\n                    },\n\n                    /**\n                     * Shows confirm box\n                     * @param {string} message\n                     * @param {Function} callback\n                     * @param {string} [title]\n                     * @returns {undefined}\n                     */\n                    confirm: function(message, callback, title){\n                        modals.show({\n                            content: message,\n                            title: title || '',\n                            modalClass: 'modal_confirm',\n                            //modal: false,\n                            buttons: [\n                                {text: nls._('Yes'), click: callback},\n                                {text: nls._('No')}\n                            ]\n                        });\n                    },\n\n                    /**\n                     * Close current modal\n                     */\n                    close: function($event){\n                        if(!$event || $event.target === $event.currentTarget){\n                            modals.queue.shift();\n                        }\n                    },\n\n                    /**\n                     * Get button class\n                     * @param {{text: string, click: function, cls: string}} button\n                     *\n                     * @return {string}\n                     */\n                    getButtonClass: function(button){\n                        //return buttonClass;\n                        var cls = [];\n                        var buttonClass = btn.getButtonClass();\n                        if (buttonClass) {\n                            cls.push(buttonClass);\n                        }\n                        if (button && button.cls) {\n                            cls.push(button.cls);\n                        }\n                        return cls.join(' ');\n                    }\n                });\n\n                //modals = angular.extend(modals, api);\n\n                return modals;\n            }]\n        };\n    })\n    .directive('modalsManager', ['modals', 'buttons', function(modals){\n        return {\n            restrict: 'AE',\n            controllerAs: 'mm',\n            bindToController: {},\n            template: '<div id=\"chayka-modals\" data-ng-show=\"mm.queue.length\" class=\"ng-cloak chayka-modals\" data-ng-cloak=\"\">' +\n            '   <div class=\"chayka-modals-fader\" data-ng-click=\"mm.close($event)\">' +\n            '       <div data-ng-repeat=\"item in mm.queue | limitTo: 1\" class=\"chayka-modals-modal\">' +\n            '           <div class=\"modal_header\">' +\n            '               <div class=\"modal_header-title\">{{item.title | nls}}</div>' +\n            '               <div class=\"modal_header-close\" data-ng-click=\"mm.close($event)\">&times;</div>' +\n            '           </div>' +\n            '           <div class=\"modal_body\">' +\n            '               <div class=\"modal_body-content\" data-ng-bind-html=\"item.content\"></div>' +\n            '           </div>' +\n            '           <div class=\"modal_buttons\" data-ng-show=\"item.buttons && item.buttons.length\">' +\n            '               <button data-ng-repeat=\"button in item.buttons\" data-ng-click=\"button.persist || mm.close(); button.click && button.click();\" class=\"{{mm.getButtonClass(button)}}\">{{button.text | nls}}</button>' +\n            '           </div>' +\n            '       </div>' +\n            '   </div>' +\n                //'   <div class=\"ng-hide\" id=\"chayka-modals-pool\"></div>' +\n            '</div>',\n            controller: function () {\n                return {\n                    close: modals.close,\n                    queue: modals.queue,\n                    getButtonClass: modals.getButtonClass\n                };\n            }\n        };\n    }])\n    .directive('modal', ['modals', function(modals) {\n        return {\n            restrict: 'AE',\n            transclude: true,\n            controllerAs: 'm',\n            scope: {\n                modal: '=modal',\n                title: '@?modalTitle',\n                show: '@modalShow',\n                buttons: '=?modalButtons',\n                width: '@modalWidth',\n                height: '@modalHeight',\n                onClose: '&?onModalClose'\n\n            },\n            template: '<div class=\"chayka-modals ng-cloak\" data-ng-show=\"m.isOpen\">' +\n            '   <div class=\"chayka-modals-fader\" data-ng-click=\"m.hide($event)\">' +\n            '       <div class=\"chayka-modals-modal\">' +\n            '           <div class=\"modal_header\">' +\n            '               <div class=\"modal_header-title\">{{m.title | nls}}</div>' +\n            '               <div class=\"modal_header-close\" data-ng-click=\"m.hide($event)\">&times;</div>' +\n            '           </div>' +\n            '           <div class=\"modal_body\" data-ng-transclude></div>' +\n            '           <div class=\"modal_buttons\" data-ng-show=\"m.buttons && m.buttons.length\">' +\n            '               <button data-ng-repeat=\"button in buttons\" data-ng-click=\"button.persist || m.hide(); button.click && button.click();\" class=\"{{m.getButtonClass(button)}}\">{{button.text | nls}}</button>' +\n            '           </div>' +\n            '       </div>' +\n            '   </div>' +\n            '</div>',\n            controller: function ($scope, $element) {\n                //console.log('modal.directive');\n\n                var ctrl = {\n\n                    isOpen: false,\n                    title: '',\n                    buttons: [],\n\n                    /**\n                     * Show element within modal popup.\n                     */\n                    show: function () {\n                        ctrl.isOpen = true;\n                    },\n\n                    /**\n                     * Hide modal popup.\n                     *\n                     * @type {Function}\n                     */\n                    hide: function ($event) {\n                        if (!$event || $event.target === $event.currentTarget) {\n                            ctrl.isOpen = false;\n                            if ($scope.onClose) {\n                                $scope.onClose();\n                            }\n                        }\n                    },\n\n                    /**\n                     * Set popup window.\n                     *\n                     * @param {string} title\n                     */\n                    setTitle: function (title) {\n                        ctrl.title = title;\n                    },\n\n                    /**\n                     * Set button set.\n                     *\n                     * @param {object|Array} buttons\n                     */\n                    setButtons: function (buttons) {\n                        if (buttons && angular.isObject(buttons) && !angular.isArray(buttons)) {\n                            var btns = [];\n                            angular.forEach(buttons, function (button, text) {\n                                button.text = text;\n                                btns.push(button);\n                            });\n                            buttons = btns;\n                        }\n                        ctrl.buttons = $scope.buttons = buttons;\n                    },\n\n                    /**\n                     *\n                     * @param button\n                     * @return {string}\n                     */\n                    getButtonClass: function (button) {\n                        return modals.getButtonClass(button);\n                    }\n                };\n\n                if ($scope.buttons) {\n                    ctrl.setButtons($scope.buttons);\n                }\n\n                $scope.modal = ctrl;\n                if ($scope.show) {\n                    ctrl.show();\n                }\n\n                if ($scope.height) {\n                    $element.css('height', $scope.height);\n                }\n\n                if ($scope.width) {\n                    $element.css('width', $scope.width);\n                }\n\n                return ctrl;\n            }\n        };\n    }])\n    .config(['nlsProvider', function(nlsProvider){\n\n        // Adding a translation table for the English language\n        nlsProvider.setTranslations('en-US', {\n            'Yes': 'Yes',\n            'No': 'No',\n            'Ok': 'Ok'\n        });\n\n        nlsProvider.setTranslations('ru-RU', {\n            'Yes': 'Да',\n            'No': 'Нет',\n            'Ok': 'Ok'\n        });\n    }])\n;","'use strict';\n\n/**\n * @ngdoc module\n * @name chayka-forms\n * @description\n *\n * This is a module that enables form validation stuff.\n */\nangular.module('chayka-forms', ['ngSanitize', 'chayka-modals', 'chayka-nls', 'chayka-ajax'])\n    /**\n     * @ngdoc directive\n     * @name chayka-forms#formValidator\n     * @description\n     *\n     * This directive creates wrapper for the fields that should be validated.\n     * Then you can access it and perform field set validation.\n     */\n    .directive('formValidator', ['$window', 'modals', 'ajax', 'utils', function($window, modals, ajax, utils){\n        return {\n            restrict: 'AE',\n            //transclude: true,\n            scope: {\n                validator: '=?formValidator',\n                scrollMargin: '@',\n                scrollDuration: '@'\n            },\n            link: function($scope, $element){\n                $scope.element = $element;\n            },\n            controller: function($scope){\n                var ctrl = {\n\n                    scrollMargin: $scope.scrollMargin || 50,\n                    scrollDuration: $scope.scrollMargin || 500,\n                    fields: $scope.fields || {},\n                    messageBox: null,\n\n                    /**\n                     * Sets message box for validator.\n                     * The box that will show common errors.\n                     * This function is called by 'form-message' directive.\n                     *\n                     * If not set, Chayka.Modals.alert() will be utilized.\n                     *\n                     * @param {$scope} msgBox\n                     */\n                    setMessageBox: function(msgBox){\n                        ctrl.messageBox = msgBox;\n                    },\n\n                    /**\n                     * Show message using message box or Chayka.Modals.alert()\n                     *\n                     * @param {string} message\n                     * @param {string} state\n                     * @returns {boolean}\n                     */\n                    showMessage: function(message, state){\n                        if (ctrl.messageBox) {\n                            ctrl.messageBox.message = message;\n                            ctrl.messageBox.state = state || '';\n                            return true;\n                        }\n                        modals.alert(message, '', state);\n                        return false;\n                    },\n\n                    /**\n                     * Hide message shown by message box\n                     *\n                     * @returns {boolean}\n                     */\n                    clearMessage: function(){\n                        if (ctrl.messageBox) {\n                            ctrl.messageBox.message = '';\n                            ctrl.messageBox.state = '';\n                            return true;\n                        }\n                        return false;\n                    },\n\n                    /**\n                     * Add field to the set of validated fields\n                     *\n                     * @param {$scope} field\n                     */\n                    addField: function(field){\n                        ctrl.fields[field['name']] = field;\n                    },\n\n                    /**\n                     * Set field state and message (hint)\n                     *\n                     * @param {string|$scope} field\n                     * @param {string} state\n                     * @param {string} [message]\n                     */\n                    setFieldState: function(field, state, message){\n                        if (angular.isString(field)) {\n                            field = ctrl.fields[field];\n                            if (!field) {\n                                return;\n                            }\n                        }\n                        field['valid'] = state === 'valid' || state === 'clean' || state === 'progress';\n                        field['state'] = state;\n                        field['message'] = message || field['hint'];\n\n                        //utils.patchScope(field);\n                    },\n\n                    /**\n                     * Set field state to error\n                     *\n                     * @param {string|scope} field\n                     * @param message\n                     */\n                    setFieldError: function(field, message){\n                        ctrl.setFieldState(field, 'invalid', message);\n                    },\n\n                    /**\n                     * Clear field error state.\n                     *\n                     * @param {string|scope} field\n                     */\n                    clearFieldError: function(field){\n                        ctrl.setFieldState(field, 'clear');\n                    },\n\n                    /**\n                     * Check required field\n                     *\n                     * @param {$scope} field\n                     * @returns {boolean}\n                     */\n                    checkRequired: function(field){\n                        var c = field['checks'].required;\n                        return !c.active || !!field['value'];\n                    },\n\n                    /**\n                     * Check field length.\n                     *\n                     * @param {$scope} field\n                     * - length\n                     * @returns {boolean}\n                     */\n                    checkLength: function(field){\n                        var c = field['checks'].length;\n                        return !c.active || !(c.max && field['value'].length > c.max || field['value'].length < c.min);\n                    },\n\n                    /**\n                     * Check field value range.\n                     *\n                     * @param {$scope} field\n                     * - min\n                     * - minE\n                     * - max\n                     * - maxE\n                     * @returns {boolean}\n                     */\n                    checkRange: function(field){\n                        var c = field['checks'].range;\n                        var lower = c.min && (c.minE && field['value'] < c.min || !c.minE && field['value'] <= c.min);\n                        var greater = c.max && (c.maxE && field['value'] > c.max || !c.minE && field['value'] >= c.max);\n                        return !c.active || !(lower || greater);\n                    },\n\n                    /**\n                     * Check field value lt (<).\n                     *\n                     * @param {$scope} field\n                     * - max\n                     * @returns {boolean}\n                     */\n                    checkLt: function(field){\n                        var c = field['checks'].lt;\n                        return !c.active || field['value'] < c.max;\n                    },\n\n                    /**\n                     * Check field value le (<=).\n                     *\n                     * @param {$scope} field\n                     * - max\n                     * @returns {boolean}\n                     */\n                    checkLe: function(field){\n                        var c = field['checks'].le;\n                        return !c.active || field['value'] <= c.max;\n                    },\n\n                    /**\n                     * Check field value gt (>).\n                     *\n                     * @param {$scope} field\n                     * - min\n                     * @returns {boolean}\n                     */\n                    checkGt: function(field){\n                        var c = field['checks'].gt;\n                        return !c.active || field['value'] > c.min;\n                    },\n\n                    /**\n                     * Check field value ge (>=).\n                     *\n                     * @param {$scope} field\n                     * - min\n                     * @returns {boolean}\n                     */\n                    checkGe: function(field){\n                        var c = field['checks'].ge;\n                        return !c.active || field['value'] >= c.min;\n                    },\n\n                    /**\n                     * Check field value against regexp.\n                     *\n                     * @param {$scope} field\n                     * - regexp\n                     * @returns {*|boolean}\n                     */\n                    checkRegexp: function(field){\n                        var c = field['checks'].regexp;\n                        var valid = c.regexp.test(field['value']);\n                        if (c.forbid) {\n                            valid = !valid;\n                        }\n                        return !c.active || valid;\n                    },\n\n                    /**\n                     * Compare two password field values.\n                     *\n                     * @param {$scope} field\n                     * - repeat\n                     * @returns {boolean}\n                     */\n                    checkPasswords: function(field){\n                        var c = field['checks'].passwords;\n                        var repeatField = ctrl.fields[c.repeat] || field;\n                        return !c.active || field['value'] === repeatField.value;\n                    },\n\n                    /**\n                     * Check value using api call.\n                     * Stores checked values to cache.\n                     *\n                     * @param {$scope} field\n                     * - url\n                     * - delay\n                     * @returns {string} state\n                     */\n                    checkApi: function(field){\n                        var c = field['checks'].api;\n                        var url = utils.template(c.url, {\n                            name: encodeURIComponent(field['name']),\n                            value: encodeURIComponent(field['value'])\n                        });\n                        var value = field['value'] + '';\n                        if (c.active) {\n                            if (value in c.dictionary) {\n                                if ('valid' === c.dictionary[value]) {\n                                    ctrl.setFieldState(field, 'valid', null);\n                                } else {\n                                    ctrl.setFieldState(field, 'invalid', c.message);\n                                }\n                                return c.dictionary[value];\n                            }\n\n                            c.dictionary[value] = 'progress';\n                            ajax.get(url, {\n                                spinner: $scope.spinner,\n                                spinnerFieldId: field['name'],\n                                spinnerMessage: ' ',\n                                showMessage: false,\n                                formValidator: ctrl,\n                                errorMessage: c.message,\n                                validateOnSend: false,\n                                scope: field,\n                                success: function(data){\n                                    //console.dir({'data': data});\n                                    c.dictionary[value] = 'valid';\n                                    ctrl.setFieldState(field, 'valid', null);\n                                },\n                                error: function(data){\n                                    c.dictionary[value] = 'invalid';\n                                    c.message = c.message || 'mass_errors' === data.code && data.message[field['name']] || data.message;\n                                }\n                            });\n                        }\n                        return !c.active || c.dictionary[value];\n\n                    },\n\n                    /**\n                     * Perform custom check by calling provided scope callback.\n                     *\n                     * @param {$scope} field\n                     * @returns {*}\n                     */\n                    checkCustom: function(field){\n                        var c = field['checks'].custom;\n                        var callback = c.callback;\n                        return !c.active || $scope.$parent[callback].call($scope, field['value']);\n                    },\n\n                    /**\n                     * Perform all the set up checks for the given field.\n                     * If silent, does not visualize validation state.\n                     *\n                     * @param {$scope} field\n                     * @param {boolean} [silent]\n                     * @returns {boolean}\n                     */\n                    validateField: function(field, silent){\n                        var valid = true,\n                            message = '',\n                            state,\n                            checks = field['checks'];\n\n                        if (!field['active']) {\n                            return true;\n                        }\n\n                        if (checks.required && !ctrl.checkRequired(field)) {\n                            valid = false;\n                            message = checks.required.message;\n                        }\n\n                        if (field['value']) {\n                            angular.forEach(checks, function(c, check){\n                                if (!valid) {\n                                    return;\n                                }\n                                switch (check) {\n                                    case 'length':\n                                        valid = ctrl.checkLength(field);\n                                        break;\n                                    case 'range':\n                                        valid = ctrl.checkRange(field);\n                                        break;\n                                    case 'lt':\n                                        valid = ctrl.checkLt(field);\n                                        break;\n                                    case 'le':\n                                        valid = ctrl.checkLe(field);\n                                        break;\n                                    case 'gt':\n                                        valid = ctrl.checkGt(field);\n                                        break;\n                                    case 'ge':\n                                        valid = ctrl.checkGe(field);\n                                        break;\n                                    case 'regexp':\n                                        valid = ctrl.checkRegexp(field);\n                                        break;\n                                    case 'passwords':\n                                        valid = ctrl.checkPasswords(field);\n                                        break;\n                                    default :\n                                }\n                                if (!valid) {\n                                    message = c.message;\n                                }\n                            });\n                        }\n\n                        if (valid && checks.custom) {\n                            valid = ctrl.checkCustom(field);\n                            message = valid ? '' : checks.custom.message;\n                        }\n\n                        state = valid ? 'valid' : 'invalid';\n\n                        if (valid && checks.api) {\n                            state = ctrl.checkApi(field);\n                            message = state === 'invalid' ? checks.api.message : '';\n                        }\n\n\n                        if (!silent) {\n                            ctrl.setFieldState(field, state, message);\n                        }\n\n                        return field.valid;\n                    },\n\n                    /**\n                     * Validate field by field id\n                     * @param fieldId\n                     * @param [silent]\n                     * @return {boolean}\n                     */\n                    validateFieldById: function(fieldId, silent){\n                        var field = ctrl.fields[fieldId];\n                        return ctrl.validateField(field, silent);\n                    },\n\n                    /**\n                     * Validate all registered fields and scroll to\n                     * top invalid field in case it is invisible.\n                     *\n                     * @returns {boolean}\n                     */\n                    validateFields: function(){\n                        var valid = true;\n\n                        var scrollTo = 0;\n\n                        angular.forEach(ctrl.fields, function(field){\n                            if (!ctrl.validateField(field)) {\n                                var scrollPos = field.element.offset().top;\n                                if (!scrollTo || scrollPos && scrollTo > scrollPos) {\n                                    scrollTo = scrollPos;\n                                }\n                                valid = false;\n                            }\n                        });\n\n\n                        if (!valid && scrollTo) {\n                            ctrl.scrollTo(scrollTo);\n                        }\n\n                        //$scope.valid = valid;\n\n                        return valid;\n                    },\n\n                    /**\n                     * Scroll to set position in case if position is out of the vieport.\n                     * If duration is 0, scroll is not animated.\n                     * Default duration value is taken from markup (see scroll-duration directive).\n                     *\n                     * @param {int} scrollTo\n                     * @param {int|string} [duration]\n                     */\n                    scrollTo: function(scrollTo, duration){\n\n                        if (angular.isUndefined(duration)) {\n                            duration = parseInt(ctrl.scrollDuration) || ctrl.scrollDuration;\n                        }\n\n                        scrollTo -= parseInt(ctrl.scrollMargin);\n                        if ($window.jQuery) {\n                            var $ = $window.jQuery;\n                            if (scrollTo < $window.pageYOffset || scrollTo > $window.pageYOffset + $($window).height()) {\n                                if (duration) {\n                                    $window.jQuery('html, body').animate({scrollTop: scrollTo}, duration);\n                                } else {\n                                    $window.jQuery('html, body').scrollTop(scrollTo);\n                                }\n                            }\n                        }\n                    },\n\n                    /**\n                     * Scroll to top of the form-validator DOM-element if one is not visible.\n                     *\n                     * @param {int|string} [duration]\n                     */\n                    scrollUp: function(duration){\n                        ctrl.scrollTo($scope.element.offset().top, duration);\n                    },\n\n                    /**\n                     * Show set of errors organized by fields.\n                     * This function is handy to show errors from backend api call.\n                     *\n                     * Errors for non-existing fields will be shown in message box\n                     * or via Chayka.Modals.alert();\n                     *\n                     * @param {object} errors\n                     */\n                    showErrors: function(errors){\n                        var scrollTo = 0;\n                        angular.forEach(errors, function(message, key){\n                            var field = ctrl.fields[key];\n                            if (field) {\n                                ctrl.setFieldState(field, 'invalid', message);\n                                var scrollPos = field.element.offset().top;\n                                if (!scrollTo || scrollPos && scrollTo > scrollPos) {\n                                    scrollTo = scrollPos;\n                                }\n                            } else {\n                                ctrl.showMessage(message, 'error');\n                            }\n                        });\n\n                        if (scrollTo) {\n                            ctrl.scrollTo(scrollTo);\n                        }\n                    },\n\n                    /**\n                     * Get form fields values\n                     *\n                     * @return {{}}\n                     */\n                    getFieldValues: function(){\n                        var values = {};\n                        angular.forEach(ctrl.fields, function(field){\n                            values[field] = ctrl.fields[field].value || '';\n                        });\n\n                        return values;\n                    }\n                };\n\n                $scope.validator = ctrl;\n\n                return ctrl;\n            }\n        };\n    }])\n    .directive('formField', ['nls', 'delayedCall', 'utils', function(nls, delayedCall, utils){\n        return {\n            require: ['^^formValidator', 'formField'],\n            restrict: 'AE',\n            transclude: true,\n            controllerAs: 'f',\n            template:\n                '<label>{{f.label|nls}}</label>' +\n                '<div class=\"input {{f.state}}\" data-ng-transclude></div>' +\n                '<div class=\"message\" data-ng-class=\"{error: !f.valid}\" data-ng-bind-html=\"f.message\"></div>',\n            scope: {\n                name: '@formField',\n                label: '@',\n                hint: '@',\n                message: '@hint'\n                //value: '='\n            },\n\n            link: function($scope, $element, $attrs, controllers){\n                var formCtrl = controllers[0], field = controllers[1];\n                var $input = $element.find('[ng-model],[data-ng-model]'),\n                    inputType = $input.attr('type'),\n                    $oldLabel = $element.find('.input > label:first-child'),\n                    $newLabel = $element.find('> label');\n                field.model = $input.attr('data-ng-model') || $input.attr('ng-model');\n                field.element = $element;\n                if (!$scope.label && inputType !== 'checkbox') {\n                    $scope.label = $oldLabel.text().replace(/\\s*:\\s*$/, '');\n                    angular.forEach($oldLabel.attributes, function(i, attr){\n                        var name = attr.name;\n                        var value = attr.value;\n                        $newLabel.attr(name, value);\n                    });\n                    $newLabel.addClass($oldLabel.attr('class'));\n                    $newLabel.text($scope.label);\n                    $oldLabel.remove();\n                    //scope.$digest();\n                }\n\n                field.label = $scope.label;\n                field.name = $scope.name;\n                field.message = $scope.message;\n\n                $input.focus(function(){\n                    //formCtrl.clearFieldError(scope);\n                    //formCtrl.setFieldState(field, 'clean');\n                });\n\n                $input.blur(function(){\n                    //formCtrl.setFieldError(scope, 'error');\n                    if (field.value) {\n                        //console.log('validating value: '+scope.value);\n                        formCtrl.validateField(field, false);\n                    }\n                    utils.patchScope($scope);\n                    //scope.$apply(); // ok\n                });\n\n                /**\n                 * setup data-check-if=\"condition\"\n                 */\n                function setupIf() {\n                    if ($attrs['checkIf']) {\n                        $scope.$parent.$watch($attrs['checkIf'], function(value){\n                            field.active = !!value;\n                        });\n                    }\n                }\n\n                /**\n                 * Setup required field check.\n                 *\n                 * Html format:\n                 *      data-required = \"This field is required|scopeCondition\"\n                 * or\n                 *      data-check-required-message = \"This field is required\"\n                 *      data-check-required-if = \"scopeCondition\"\n                 */\n                function setupRequired() {\n                    var short = $attrs['checkRequired'];\n                    var shorts = short ? short.split('|') : [];\n                    var message = nls._(shorts[0] || $attrs['checkRequiredMessage'] || 'message_required');\n\n                    field.checks.required = {\n                        message: message,\n                        active: true\n                    };\n                    var condition = shorts[1] || $attrs['checkRequiredIf'];\n                    if (condition) {\n                        $scope.$parent.$watch(condition, function(value){\n                            field.checks.required.active = value;\n                        });\n                    }\n                }\n\n                /**\n                 * Setup field value length check.\n                 *\n                 * Html format:\n                 *      data-check-length = \"The length of this value should be between {min} and {max} symbols|0|16|scopeCondition\"\n                 * or\n                 *      data-check-length-message = \"The length of this value should be between {min} and {max} symbols\"\n                 *      data-check-length-min = \"0\"\n                 *      data-check-length-max = \"16\"\n                 *      data-check-length-if = \"scopeCondition\"\n                 *\n                 */\n                function setupLength() {\n                    var short = $attrs['checkLength'];\n                    var shorts = short ? short.split('|') : [];\n                    var min = parseInt(shorts[1] || $attrs['checkLengthMin'] || 0);\n                    var max = parseInt(shorts[2] || $attrs['checkLengthMax'] || 0);\n                    var messageTemplate = nls._(shorts[0] || $attrs['checkLengthMessage'] || 'message_length');\n                    var message = utils.template(messageTemplate, {min: min, max: max, label: field.label});\n                    field.checks.length = {\n                        message: message,\n                        min: min,\n                        max: max,\n                        active: true\n                    };\n                    var condition = shorts[3] || $attrs['checkLengthIf'];\n                    if (condition) {\n                        $scope.$parent.$watch(condition, function(value){\n                            field.checks.length.active = value;\n                        });\n                    }\n                }\n\n                /**\n                 * Setup field value range check.\n                 *\n                 * Html format:\n                 *      data-check-range = \"The value should be between {min} and {max}|=0|16|int|scopeCondition\"\n                 * or\n                 *      data-check-range-message = \"The value should be between {min} and {max}\"\n                 *      data-check-range-min = \"=0\" ('=' means 'inclusive')\n                 *      data-check-range-max = \"16\"\n                 *      data-check-range-format = \"int\"\n                 *      data-check-range-if = \"scopeCondition\"\n                 *\n                 */\n                function setupRange() {\n                    var short = $attrs['checkRange'];\n                    var shorts = short ? short.split('|') : [];\n                    var minStr = shorts[1] || $attrs['checkRangeMin'] || 0;\n                    var minE = !!minStr.match(/^=/);\n                    var min = minE ? minStr.substr(1) : minStr;\n                    var maxStr = shorts[2] || $attrs['checkRangeMax'] || 0;\n                    var maxE = !!maxStr.match(/^=/);\n                    var max = maxE ? maxStr.substr(1) : maxStr;\n                    var format = shorts[3] || $attrs['checkRangeFormat'] || 'int';\n                    switch (format) {\n                        case 'int':\n                            min = parseInt(min);\n                            max = parseInt(max);\n                            break;\n                        case 'float':\n                            min = parseFloat(min);\n                            max = parseFloat(max);\n                            break;\n                        default:\n                    }\n                    var messageTemplate = shorts[0] || $attrs['checkRangeMessage'] ||\n                        nls._('message_range');\n                    var message = utils.template(messageTemplate, {min: min, max: max, label: field.label});\n                    field.checks.range = {\n                        message: message,\n                        min: min,\n                        minE: minE,\n                        max: max,\n                        maxE: maxE,\n                        active: true\n                    };\n                    var condition = shorts[4] || $attrs['checkRangeIf'];\n                    if (condition) {\n                        $scope.$parent.$watch(condition, function(value){\n                            field.checks.range.active = value;\n                        });\n                    }\n                }\n\n                /**\n                 * Setup field value 'lower than (<)'.\n                 *\n                 * Html format:\n                 *      data-check-lt = \"The value should be lower than {max}|0|int|scopeCondition\"\n                 * or\n                 *      data-check-lt-message = \"The value should be lower than {max}\"\n                 *      data-check-lt-max = \"0\"\n                 *      data-check-lt-format = \"int\"\n                 *      data-check-lt-if = \"scopeCondition\"\n                 */\n                function setupLt() {\n                    var short = $attrs['checkLt'];\n                    var shorts = short ? short.split('|') : [];\n                    var max = shorts[1] || $attrs['checkLtMax'] || 0;\n                    var messageTemplate = shorts[0] || $attrs['checkLtMessage'] ||\n                        nls._('message_lt');\n                    var message = utils.template(messageTemplate, {max: max, label: field.label});\n                    var format = shorts[2] || $attrs['checkLtFormat'] || 'int';\n                    switch (format) {\n                        case 'int':\n                            max = parseInt(max);\n                            break;\n                        case 'float':\n                            max = parseFloat(max);\n                            break;\n                        default:\n                    }\n                    field.checks.lt = {\n                        message: message,\n                        max: max,\n                        active: true\n                    };\n                    var condition = shorts[3] || $attrs['checkLtIf'];\n                    if (condition) {\n                        $scope.$parent.$watch(condition, function(value){\n                            field.checks.lt.active = value;\n                        });\n                    }\n                }\n\n                /**\n                 * Setup field value 'lower or equal (<=)'.\n                 *\n                 * Html format:\n                 *      data-check-le = \"The value should be lower than {max} or equal|0|int|scopeCondition\"\n                 * or\n                 *      data-check-le-message = \"The value should be lower than {max} or equal\"\n                 *      data-check-le-max = \"0\"\n                 *      data-check-le-format = \"int\"\n                 *      data-check-le-if = \"scopeCondition\"\n                 */\n                function setupLe() {\n                    var short = $attrs['checkLe'];\n                    var shorts = short ? short.split('|') : [];\n                    var max = shorts[1] || $attrs['checkLeMax'] || 0;\n                    var messageTemplate = shorts[0] || $attrs['checkLeMessage'] ||\n                        nls._('message_le');\n                    var message = utils.template(messageTemplate, {max: max, label: field.label});\n                    var format = shorts[2] || $attrs['checkLeFormat'] || 'int';\n                    switch (format) {\n                        case 'int':\n                            max = parseInt(max);\n                            break;\n                        case 'float':\n                            max = parseFloat(max);\n                            break;\n                        default:\n                    }\n                    field.checks.le = {\n                        message: message,\n                        max: max,\n                        active: true\n                    };\n                    var condition = shorts[3] || $attrs['checkLeIf'];\n                    if (condition) {\n                        $scope.$parent.$watch(condition, function(value){\n                            field.checks.le.active = value;\n                        });\n                    }\n                }\n\n                /**\n                 * Setup field value 'greater than (>)'.\n                 *\n                 * Html format:\n                 *      data-check-gt = \"The value should be greater than {min}|0|int|scopeCondition\"\n                 * or\n                 *      data-check-gt-message = \"The value should be greater than {min}\"\n                 *      data-check-gt-max = \"0\"\n                 *      data-check-gt-format = \"int\"\n                 *      data-check-gt-if = \"scopeCondition\"\n                 */\n                function setupGt() {\n                    var short = $attrs['checkGt'];\n                    var shorts = short ? short.split('|') : [];\n                    var min = shorts[1] || $attrs['checkGtMin'] || 0;\n                    var messageTemplate = shorts[0] || $attrs['checkGtMessage'] ||\n                        nls._('message_gt');\n                    var message = utils.template(messageTemplate, {min: min, label: field.label});\n                    var format = shorts[2] || $attrs['checkGtFormat'] || 'int';\n                    switch (format) {\n                        case 'int':\n                            min = parseInt(min);\n                            break;\n                        case 'float':\n                            min = parseFloat(min);\n                            break;\n                        default:\n                    }\n                    field.checks.gt = {\n                        message: message,\n                        min: min,\n                        active: true\n                    };\n                    var condition = shorts[3] || $attrs['checkGtIf'];\n                    if (condition) {\n                        $scope.$parent.$watch(condition, function(value){\n                            field.checks.gt.active = value;\n                        });\n                    }\n                }\n\n                /**\n                 * Setup field value 'greater or equal (<=)'.\n                 *\n                 * Html format:\n                 *      data-check-ge = \"The value should be greater than {min} or equal|0|int|scopeCondition\"\n                 * or\n                 *      data-check-ge-message = \"The value should be greater than {min} or equal\"\n                 *      data-check-ge-min = \"0\"\n                 *      data-check-ge-format = \"int\"\n                 *      data-check-ge-if = \"scopeCondition\"\n                 */\n                function setupGe() {\n                    var short = $attrs['checkGe'];\n                    var shorts = short ? short.split('|') : [];\n                    var min = shorts[1] || $attrs['checkGeMin'] || 0;\n                    var messageTemplate = shorts[0] || $attrs['checkGeMessage'] ||\n                        nls._('message_ge');\n                    var message = utils.template(messageTemplate, {min: min, label: field.label});\n                    var format = shorts[2] || $attrs['checkGeFormat'] || 'int';\n                    switch (format) {\n                        case 'int':\n                            min = parseInt(min);\n                            break;\n                        case 'float':\n                            min = parseFloat(min);\n                            break;\n                        default:\n                    }\n                    field.checks.ge = {\n                        message: message,\n                        min: min,\n                        active: true\n                    };\n                    var condition = shorts[3] || $attrs['checkGeIf'];\n                    if (condition) {\n                        $scope.$parent.$watch(condition, function(value){\n                            field.checks.ge.active = value;\n                        });\n                    }\n                }\n\n                /**\n                 * Setup field regexp check.\n                 * Heads up: If you need '/' char in a message or '|' char in a pattern,\n                 * You'd better use extended format instead of short one.\n                 *\n                 * Html format:\n                 *      data-check-regexp = \"Invalid phone format|/\\d{7}/i|forbid|scopeCondition\"\n                 * or\n                 *      data-check-regexp-message = \"Invalid phone format\"\n                 *      data-check-regexp-pattern = \"\\d{7}\"\n                 *      data-check-regexp-modifiers = \"i\"\n                 *      data-check-regexp-forbid = \"forbid\"\n                 *      data-check-regexp-if = \"scopeCondition\"\n                 */\n                function setupRegExp() {\n                    var short = $attrs['checkRegexp'];\n                    var shorts = short ? short.split('|') : [];\n                    var patternAndModifiers = short && /\\/(.*)\\/(\\w*)$/.exec(shorts[1]) || [];\n                    var message = shorts[0] || $attrs['checkRegexpMessage'] || nls._('message_regexp');\n                    var pattern = patternAndModifiers[1] || $attrs['checkRegexpPattern'] || '.*';\n                    var modifiers = patternAndModifiers[2] || $attrs['checkRegexpModifiers'] || '';\n                    var forbid = shorts[2] || $attrs['checkRegexpForbid'] || false;\n\n                    var regexp = new RegExp(pattern, modifiers);\n\n                    field.checks.regexp = {\n                        message: message,\n                        regexp: regexp,\n                        forbid: forbid,\n                        active: true\n                    };\n                    var condition = shorts[4] || $attrs['checkRegexpIf'];\n                    if (condition) {\n                        $scope.$parent.$watch(condition, function(value){\n                            field.checks.regexp.active = value;\n                        });\n                    }\n\n                    //console.dir({'regexp':scope.checks.regexp});\n\n                }\n\n                /**\n                 * Setup email field check.\n                 *\n                 * Html format:\n                 *      data-check-email = \"Valid email format: user@domain.com|scopeCondition\"\n                 * or\n                 *      data-check-email-message = \"Valid email format: user@domain.com\"\n                 *      data-check-email-if = \"scopeCondition\"\n                 */\n                function setupEmail() {\n                    var short = $attrs['checkEmail'];\n                    var shorts = short ? short.split('|') : [];\n                    var message = nls._(shorts[0] || $attrs['checkEmailMessage'] || 'message_email');\n                    field.checks.regexp = {\n                        message: message,\n                        regexp: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i,\n                        forbid: false,\n                        active: true\n                    };\n                    var condition = shorts[1] || $attrs['checkEmailIf'];\n                    if (condition) {\n                        $scope.$parent.$watch(condition, function(value){\n                            field.checks.regexp.active = value;\n                        });\n                    }\n                }\n\n                /**\n                 * Setup password compare check.\n                 *\n                 * Html format:\n                 *      data-check-passwords = \"pass1_id|Passwords do not match|scopeCondition\"\n                 * or\n                 *      data-check-passwords-message = \"Invalid phone format\"\n                 *      data-check-passwords-repeat = \"pass1_id\"\n                 *      data-check-passwords-if = \"scopeCondition\"\n                 */\n                function setupPasswords() {\n                    var short = $attrs['checkPasswords']; // 'pass1id|Введенные пароли отличаются'\n                    var shorts = short ? short.split('|') : [];\n\n                    var repeat = shorts[0] || $attrs['checkPasswordsRepeat'];\n\n                    var message = shorts[1] || $attrs['checkPasswordsMessage'] || nls._('message_passwords');\n\n                    field.checks.passwords = {\n                        message: message,\n                        repeat: repeat,\n                        active: true\n                    };\n                    var condition = shorts[2] || $attrs['checkPasswordsIf'];\n                    if (condition) {\n                        $scope.$parent.$watch(condition, function(value){\n                            field.checks.passwords.active = value;\n                        });\n                    }\n                }\n\n                /**\n                 * Setup backend api check.\n                 *\n                 * Html format:\n                 *      data-check-api = \"/api/check-existing/{name}/{value}|Email exists|500|scopeCondition\"\n                 * or\n                 *      data-check-api-message = \"Invalid phone format\"\n                 *      data-check-api-url = \"/api/check-existing/{name}/{value}\"\n                 *      data-check-api-delay = \"500\"\n                 *      data-check-api-if = \"scopeCondition\"\n                 */\n                function setupApiCall() {\n                    var short = $attrs['checkApi']; // '/api/check-existing/{name}/{value}|Email exists|500'\n                    var shorts = short ? short.split('|') : [];\n\n                    var url = shorts[0] || $attrs['checkApiUrl'];\n\n                    var message = shorts[1] || $attrs['checkApiMessage'];\n\n                    var delay = shorts[2] || $attrs['checkApiDelay'] || 0;\n\n                    field.checks.api = {\n                        message: message,\n                        url: url,\n                        delay: delay,\n                        dictionary: {},\n                        active: true\n                    };\n                    var condition = shorts[3] || $attrs['checkApiIf'];\n                    if (condition) {\n                        $scope.$parent.$watch(condition, function(value){\n                            field.checks.api.active = value;\n                        });\n                    }\n\n                    $input.on('keyup change', function(){\n                        formCtrl.setFieldState(field, 'clean');\n                        //utils.patchScope($scope);\n                        //scope.$apply(); // ok\n                        if (field.value) {\n                            delayedCall('check-api-' + field.name, delay, function(){\n                                formCtrl.validateField(field, true);\n                                //utils.patchScope($scope);\n                                //scope.$apply();\n                            });\n                        }\n                    });\n\n\n                }\n\n                /**\n                 * Setup custom check.\n                 *\n                 * Html format:\n                 *      data-check-custom = \"validateProjectTitle|Project Title should be sweet|scopeCondition\"\n                 * or\n                 *      data-check-custom-message = \"Project Title should be sweet\"\n                 *      data-check-custom-callback = \"validateProjectTitle\"\n                 *      data-check-custom-if = \"scopeCondition\"\n                 *\n                 * callback.call($scope, value) will be called\n                 */\n                function setupCustom() {\n                    var short = $attrs['checkCustom'];\n                    var shorts = short ? short.split('|') : [];\n\n                    var callback = shorts[0] || $attrs['checkCustomCallback'];\n\n                    var message = shorts[1] || $attrs['checkCustomMessage'] || nls._('message_custom');\n\n                    field.checks.custom = {\n                        message: message,\n                        callback: callback,\n                        active: true\n                    };\n                    var condition = shorts[2] || $attrs['checkCustomeIf'];\n                    if (condition) {\n                        $scope.$parent.$watch(condition, function(value){\n                            field.checks.custom.active = value;\n                        });\n                    }\n                }\n\n                angular.forEach($attrs, function(attr, key){\n                    var m = key.match(/^check([A-Z][a-z]*)/),\n                        check = m && m[1];\n                    if (check && !field.checks[check]) {\n                        switch (check) {\n                            case 'If':\n                                setupIf();\n                                break;\n                            case 'Required':\n                                setupRequired();\n                                break;\n                            case 'Length':\n                                setupLength();\n                                break;\n                            case 'Le':\n                                setupLe();\n                                break;\n                            case 'Lt':\n                                setupLt();\n                                break;\n                            case 'Ge':\n                                setupGe();\n                                break;\n                            case 'Gt':\n                                setupGt();\n                                break;\n                            case 'Range':\n                                setupRange();\n                                break;\n                            case 'Regexp':\n                                setupRegExp();\n                                break;\n                            case 'Email':\n                                setupEmail();\n                                break;\n                            case 'Passwords':\n                                setupPasswords();\n                                break;\n                            case 'Api':\n                                setupApiCall();\n                                break;\n                            case 'Custom':\n                                setupCustom();\n                                break;\n                            default:\n                        }\n                    }\n                });\n                //console.dir({'checks': scope.checks});\n\n                $scope.$parent.$watch(field.model, function(value){\n                    //console.log('we are watching: '+value);\n                    field.value = value;\n                    //formCtrl.validateField(scope);\n                });\n\n                $scope.$watch('state', function(value){\n                    $element.removeClass('clean progress valid invalid');\n                    $element.addClass(value);\n                });\n\n                formCtrl.addField(field);\n            },\n\n            controller: function($scope){\n\n                return {\n\n                    name: '',\n\n                    label: '',\n\n                    message: '',\n\n                    value: null,\n\n                    valid: true,\n\n                    state: 'clean', // clean|progress|valid|invalid\n\n                    active: true,\n\n                    checks: {}\n                };\n            }\n        };\n    }])\n    .directive('formMessage', function(){\n        return {\n            require: ['^^formValidator', 'formMessage'],\n            restrict: 'AE',\n            replace: true,\n            controllerAs: 'mb',\n            bindToController: true,\n            template: '<div class=\"form-message {{mb.state}}\" data-ng-show=\"!!mb.message\" data-ng-bind-html=\"mb.message\"></div>',\n            scope: {\n                message: '@'\n            },\n\n            controller: function(){\n                return {\n                    message: '',\n                    state: ''\n                };\n            },\n            link: function($scope, $element, attrs, controllers){\n                var formCtrl = controllers[0], messageBox = controllers[1];\n                formCtrl.setMessageBox(messageBox);\n            }\n        };\n    })\n    .directive('autoHeight', [function(){\n        return {\n            restrict: 'A',\n            link: function($scope, $element){\n                var resizeTextarea = function(){\n                    var height = $element.css('box-sizing') === 'border-box' ?\n                    parseInt($element.css('borderTopWidth')) +\n                    $element.prop('scrollHeight') +\n                    parseInt($element.css('borderBottomWidth')) :\n                        $element.prop('scrollHeight');\n                    $element.css('height', height + 'px');\n                };\n\n                $element.on('change input cut paste drop keydown', resizeTextarea);\n            }\n        };\n    }])\n    .factory('delayedCall', ['$timeout', function($timeout){\n        var timeouts = {};\n\n        /**\n         * This function created named timeout that is canceled and rescheduled\n         * if function was called once again before timeout happened.\n         * Handy for field checks while user types in.\n         *\n         * @param {string} callId\n         * @param {int} timeout\n         * @param {function} callback\n         */\n        return function(callId, delay, callback){\n            var handle = timeouts[callId];\n            if (handle) {\n                $timeout.cancel(handle);\n            }\n            timeouts[callId] = $timeout(function(){\n                timeouts[callId] = null;\n                callback();\n            }, delay);\n        };\n    }])\n    .config(['nlsProvider', function(nlsProvider){\n\n        // Adding a translation table for the English language\n        nlsProvider.setTranslations('en-US', {\n            'message_required': 'Required Field',\n            'message_length': 'The length of this value should be between {min} and {max} symbols',\n            'message_range': 'The value should be between {min} and {max}',\n            'message_lt': 'The value should be lower than {max}',\n            'message_le': 'The value should be lower than {max} or equal',\n            'message_gt': 'The value should be greater than {min}',\n            'message_ge': 'The value should be greater than {min} or equal',\n            'message_regexp': 'Invalid format',\n            'message_email': 'Valid email format: user@domain.com',\n            'message_passwords': 'Passwords do not match',\n            'message_custom': 'Invalid value'\n\n\n        });\n\n        nlsProvider.setTranslations('ru-RU', {\n            'message_required': 'Обязательное поле',\n            'message_length': 'Длина значения должна быть от {min} до {max} символов',\n            'message_range': 'Значение должно быть в диапазоне от {min} до {max}',\n            'message_lt': 'Значение должно быть меньше {max}',\n            'message_le': 'Значение должно быть меньше или равно {max}',\n            'message_gt': 'Значение должно быть больше {min}',\n            'message_ge': 'Значение должно быть больше или равно {min}',\n            'message_regexp': 'Некорректный формат',\n            'message_email': 'Формат email: user@domain.com',\n            'message_passwords': 'Введенные пароли отличаются',\n            'message_custom': 'Некорректное значение'\n        });\n    }])\n;\n\n","'use strict';\n\nangular.module('chayka-pagination', ['chayka-nls', 'chayka-utils'])\n    .directive('pagination', ['utils', function(utils){\n\n        return {\n            restrict: 'AE',\n            template:\n            '<ul data-ng-show=\"totalPages > 1\">' +\n                '<li data-ng-repeat=\"item in items\" class=\"{{item.cls}}\"><a data-ng-click=\"item.click();\" data-ng-bind-html=\"item.text\"></a></li>'+\n            '</ul>',\n            scope:{\n                pagination: '=',\n                currentPage: '=?',\n                totalPages: '=?',\n                packSize: '=?',\n                hrefTemplate: '@?',\n                click: '=?',\n                order: '@'\n            },\n\n            controller: function($scope){\n\n                $scope.state = '';\n                $scope.currentPage = $scope.currentPage || 1;\n                $scope.totalPages = $scope.totalPages || 0;\n                $scope.packSize = $scope.packSize || 10;\n                $scope.hrefTemplate = $scope.hrefTemplate || '/page/<%= page %>';\n                $scope.items = [];\n                //$scope.order = $scope.order?\n                //    $scope.order.split(/\\s+/):\n                //    ['previous', 'first', 'rewind', 'pages', 'forward', 'last', 'next'];\n\n                if(!$scope.click){\n                    $scope.click = function(page){\n                        $scope.$emit('Pagination.currentPage', page);\n                        if(page !== $scope.currentPage){\n                            $scope.$emit('Pagination.pageChanged', page);\n                        }\n                    };\n                }\n\n                /**\n                 * Set current page\n                 *\n                 * @param {int} val\n                 * @param {bool} render\n                 * @returns {*}\n                 */\n                $scope.setCurrentPage = function(val, render){\n                    $scope.currentPage = val;\n                    if(render){\n                        $scope.render();\n                    }\n                    return $scope;\n                };\n\n                /**\n                 * Get current page\n                 *\n                 * @returns {*|number}\n                 */\n                $scope.getCurrentPage = function(){\n                    return $scope.currentPage;\n                };\n\n                /**\n                 * Set total amount of pages\n                 *\n                 * @param val\n                 * @param render\n                 * @returns {*}\n                 */\n                $scope.setTotalPages = function(val, render){\n                    $scope.totalPages = val;\n                    if(render){\n                        $scope.render();\n                    }\n                    return $scope;\n                };\n\n                /**\n                 * Get total amount of pages\n                 *\n                 * @returns {*|number}\n                 */\n                $scope.getTotalPages = function(){\n                    return $scope.totalPages;\n                };\n\n                /**\n                 * Set number of pages between [...]\n                 *\n                 * @param val\n                 * @param render\n                 * @returns {*}\n                 */\n                $scope.setPackSize = function(val, render){\n                    $scope.packSize = val;\n                    if(render){\n                        $scope.render();\n                    }\n                    return $scope;\n                };\n\n                /**\n                 * Get number of pages between [...]\n                 * @returns {*|number}\n                 */\n                $scope.getPackSize = function(){\n                    return $scope.packSize;\n                };\n\n                /**\n                 * Set href template\n                 *\n                 * @param val\n                 * @param render\n                 * @returns {*}\n                 */\n                $scope.setHrefTemplate = function(val, render){\n                    $scope.hrefTemplate = val;\n                    if(render){\n                        $scope.render();\n                    }\n                    return $scope;\n                };\n\n                /**\n                 * Get href template\n                 *\n                 * @returns {*|string}\n                 */\n                $scope.getHrefTemplate = function(){\n                    return $scope.hrefTemplate;\n                };\n\n                /**\n                 * Get page href\n                 *\n                 * @param page\n                 * @returns {*}\n                 */\n                $scope.getHref = function(page){\n\n                    if(page >= 1 && page <= $scope.getTotalPages() && $scope.getHrefTemplate()){\n                        return utils.template($scope.getHrefTemplate(), {page: page});\n                    }\n\n                    return '#';\n\n                };\n\n                /**\n                 * Generate page nav link item\n                 *\n                 * @param page\n                 * @param text\n                 * @returns {{page: Number, text: *, href: *, cls: string, click: Function}}\n                 */\n                $scope.getItem = function(page, text){\n\n                    page = parseInt(page);\n                    text = text || page;\n\n                    var cls = '';\n                    if(page === $scope.getCurrentPage()){\n                        cls = 'active';\n                    }\n                    if(page < 1 || page > $scope.getTotalPages()){\n                        cls = 'disabled';\n                    }\n\n                    return {\n                        page: page,\n                        text: text,\n                        href: $scope.getHref(page),\n                        cls: cls,\n                        click: function(){\n                            if(page > 0 && page <= $scope.totalPages){\n                                $scope.click(page);\n                            }\n                            return false;\n                        }\n                    };\n                };\n\n                /**\n                 * Generate page nav link items\n                 *\n                 * @returns {Array}\n                 */\n                $scope.getItems = function(){\n                    var current = $scope.getCurrentPage();\n                    var packSize = $scope.getPackSize();\n                    var totalPages = $scope.getTotalPages();\n                    var packStart = 1;\n                    var packFinish = totalPages;\n                    var items = [];\n\n                    if(packSize < totalPages){\n                        packStart = current - Math.floor((packSize -1)/ 2);\n                        packFinish = current + Math.ceil((packSize -1)/ 2);\n                        var offset = 0;\n                        if(packStart<1){\n                            offset = 1 - packStart;\n                        }\n                        if(packFinish>totalPages){\n                            offset = totalPages - packFinish;\n                        }\n                        packStart+=offset;\n                        packFinish+=offset;\n                    }\n\n\n                    /**\n                     *  ['previous', 'first', 'rewind', 'pages', 'forward', 'last', 'next'];\n                     */\n                    $scope.order.split(/\\s+/).forEach(function(item){\n                        switch(item){\n                            case 'previous':\n                                items.push($scope.getItem(current-1, '&larr;'));\n                                break;\n                            case 'first':\n                                if(packStart > 1){\n                                    items.push($scope.getItem(1));\n                                }\n                                break;\n                            case 'rewind':\n                                if(packStart > 2){\n                                    items.push($scope.getItem(packStart - 1, '...'));\n                                }\n                                break;\n                            case 'pages':\n                                for(var i = packStart; i <= packFinish; i++){\n                                    items.push($scope.getItem(i));\n                                }\n                                break;\n                            case 'forward':\n                                if(totalPages - packFinish >= 2){\n                                    items.push($scope.getItem(packFinish + 1, '...'));\n                                }\n                                break;\n                            case 'last':\n                                if(totalPages > packFinish){\n                                    items.push($scope.getItem(totalPages));\n                                }\n                                break;\n                            case 'next':\n                                items.push($scope.getItem(current+1, '&rarr;'));\n                                break;\n                        }\n                    });\n\n                    return items;\n                };\n\n                /**\n                 * Render pagination\n                 */\n                $scope.render = function(){\n                    $scope.items = $scope.getItems();\n                };\n\n                $scope.pagination = $scope;\n            }\n        };\n    }])\n    .config(['nlsProvider', function(nlsProvider){\n\n        // Adding a translation table for the English language\n        nlsProvider.setTranslations('en-US', {\n            'next': 'Next',\n            'previous': 'Previous',\n            'next_page': 'Next page',\n            'previous_page': 'Previous Page'\n        });\n\n        nlsProvider.setTranslations('ru-RU', {\n            'next': 'Следующая',\n            'previous': 'Предыдущая',\n            'next_page': 'Следующая страница',\n            'previous_page': 'Предыдущая страница'\n        });\n    }])\n;\n"],"sourceRoot":"/source/"}