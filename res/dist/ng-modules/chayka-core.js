"use strict";angular.module("chayka-utils",[]).factory("utils",["$window","$timeout","$compile",function($window,$timeout,$compile){var Chayka=$window.Chayka||{};return Chayka.Utils=Chayka.Utils||{declare:function(classname,parent,implementation){for(var parts=classname.split("."),root=$window,part="",i=0;i<parts.length&&(part=parts[i],i!==parts.length-1);i++)root[part]=root[part]||{},root=root[part];return angular.isUndefined(implementation)&&(implementation=parent,parent=null),parent?parent.extend&&angular.isFunction(parent.extend)?root[part]=parent.extend(implementation):root[part]=angular.extend(parent,implementation):root[part]=implementation,root[part]},ensure:function(classname,extend){for(var parts=classname.split("."),root=$window,part="",i=0;i<parts.length;i++)part=parts[i],root[part]=root[part]||{},root=root[part];return extend&&angular.isObject(extend)&&angular.extend(root,extend),root},getItem:function(obj,key,defaultValue){void 0===defaultValue&&(defaultValue=null);var parts=(key+"").split(".");if(obj&&(angular.isObject(obj)||angular.isArray(obj))){for(var root=obj,i=0;i<parts.length;i++){var part=parts[i];if(!angular.isObject(root)&&!angular.isArray(root)||void 0===root[part])return defaultValue;root=root[part]}return root}return defaultValue},setObjectDefaults:function(obj,defaults){obj=obj||{};for(var key in defaults)defaults.hasOwnProperty(key)&&("object"==typeof defaults[key]?obj[key]=Chayka.Utils.setObjectDefaults(obj[key]||{},defaults[key]):void 0===obj[key]&&(obj[key]=defaults[key]));return obj},updateObject:function(obj,update){for(var property in obj)obj.hasOwnProperty(property)&&(void 0!==update[property]?obj[property]=null:delete obj[property]);return angular.extend(obj,update)},getHtmlParam:function($element,name,defaultValue){var value=$element.attr(name)||$element.attr("data-"+name)||$element.data(name);return void 0===value&&(value=defaultValue),value},template:function(tpl,params){return tpl.replace(/{([^}]+)}/g,function(all,param){return params[param].toString()||""})},patchScope:function(scope){scope&&angular.isFunction(scope.$apply)&&$timeout(function(){scope.$apply()},0)},getResourceUrl:function(appId,resPath){return Chayka.Utils.getItem(Chayka.Core.appResFolderUrls,appId,"/no_app_url_found/")+resPath},recursiveDirectiveCompile:function(element,link){angular.isFunction(link)&&(link={post:link});var compiledContents,contents=element.contents().remove();return{pre:link&&link.pre?link.pre:null,post:function(scope,element){compiledContents||(compiledContents=$compile(contents)),compiledContents(scope,function(clone){element.append(clone)}),link&&link.post&&link.post.apply(null,arguments)}}},ordinal:function(input){var n=input%100;return 11>n||n>13?["st","nd","rd","th"][Math.min((n-1)%10,3)]:"th"}},Chayka.Utils.ensure("Chayka.Utils",Chayka.Utils),Chayka.Utils}]).directive("wpInclude",["utils",function(utils){return{restrict:"AE",templateUrl:function(element,attributes){var include=attributes.wpInclude||attributes["wp-include"]||attributes["data-wp-include"]||attributes.src,src=include,params=include.split(":"),appId=attributes.wpApp||attributes["wp-app"]||attributes["data-wp-app"]||attributes["app-id"];return params.length>1&&(appId=params[0],src=params[1]),utils.getResourceUrl(appId,src)}}}]).filter("ordinal",["utils",function(utils){return function(input){return input+utils.ordinal(input)}}]);
!function(window,angular,undefined){"use strict";function $SanitizeProvider(){this.$get=["$$sanitizeUri",function($$sanitizeUri){return function(html){var buf=[];return htmlParser(html,htmlSanitizeWriter(buf,function(uri,isImage){return!/^unsafe/.test($$sanitizeUri(uri,isImage))})),buf.join("")}}]}function sanitizeText(chars){var buf=[],writer=htmlSanitizeWriter(buf,angular.noop);return writer.chars(chars),buf.join("")}function makeMap(str){var i,obj={},items=str.split(",");for(i=0;i<items.length;i++)obj[items[i]]=!0;return obj}function htmlParser(html,handler){function parseStartTag(tag,tagName,rest,unary){if(tagName=angular.lowercase(tagName),blockElements[tagName])for(;stack.last()&&inlineElements[stack.last()];)parseEndTag("",stack.last());optionalEndTagElements[tagName]&&stack.last()==tagName&&parseEndTag("",tagName),unary=voidElements[tagName]||!!unary,unary||stack.push(tagName);var attrs={};rest.replace(ATTR_REGEXP,function(match,name,doubleQuotedValue,singleQuotedValue,unquotedValue){var value=doubleQuotedValue||singleQuotedValue||unquotedValue||"";attrs[name]=decodeEntities(value)}),handler.start&&handler.start(tagName,attrs,unary)}function parseEndTag(tag,tagName){var i,pos=0;if(tagName=angular.lowercase(tagName))for(pos=stack.length-1;pos>=0&&stack[pos]!=tagName;pos--);if(pos>=0){for(i=stack.length-1;i>=pos;i--)handler.end&&handler.end(stack[i]);stack.length=pos}}"string"!=typeof html&&(html=null===html||"undefined"==typeof html?"":""+html);var index,chars,match,text,stack=[],last=html;for(stack.last=function(){return stack[stack.length-1]};html;){if(text="",chars=!0,stack.last()&&specialElements[stack.last()]?(html=html.replace(new RegExp("([\\W\\w]*)<\\s*\\/\\s*"+stack.last()+"[^>]*>","i"),function(all,text){return text=text.replace(COMMENT_REGEXP,"$1").replace(CDATA_REGEXP,"$1"),handler.chars&&handler.chars(decodeEntities(text)),""}),parseEndTag("",stack.last())):(0===html.indexOf("<!--")?(index=html.indexOf("--",4),index>=0&&html.lastIndexOf("-->",index)===index&&(handler.comment&&handler.comment(html.substring(4,index)),html=html.substring(index+3),chars=!1)):DOCTYPE_REGEXP.test(html)?(match=html.match(DOCTYPE_REGEXP),match&&(html=html.replace(match[0],""),chars=!1)):BEGING_END_TAGE_REGEXP.test(html)?(match=html.match(END_TAG_REGEXP),match&&(html=html.substring(match[0].length),match[0].replace(END_TAG_REGEXP,parseEndTag),chars=!1)):BEGIN_TAG_REGEXP.test(html)&&(match=html.match(START_TAG_REGEXP),match?(match[4]&&(html=html.substring(match[0].length),match[0].replace(START_TAG_REGEXP,parseStartTag)),chars=!1):(text+="<",html=html.substring(1))),chars&&(index=html.indexOf("<"),text+=0>index?html:html.substring(0,index),html=0>index?"":html.substring(index),handler.chars&&handler.chars(decodeEntities(text)))),html==last)throw $sanitizeMinErr("badparse","The sanitizer was unable to parse the following block of html: {0}",html);last=html}parseEndTag()}function decodeEntities(value){return value?(hiddenPre.innerHTML=value.replace(/</g,"&lt;"),hiddenPre.textContent):""}function encodeEntities(value){return value.replace(/&/g,"&amp;").replace(SURROGATE_PAIR_REGEXP,function(value){var hi=value.charCodeAt(0),low=value.charCodeAt(1);return"&#"+(1024*(hi-55296)+(low-56320)+65536)+";"}).replace(NON_ALPHANUMERIC_REGEXP,function(value){return"&#"+value.charCodeAt(0)+";"}).replace(/</g,"&lt;").replace(/>/g,"&gt;")}function htmlSanitizeWriter(buf,uriValidator){var ignore=!1,out=angular.bind(buf,buf.push);return{start:function(tag,attrs,unary){tag=angular.lowercase(tag),!ignore&&specialElements[tag]&&(ignore=tag),ignore||validElements[tag]!==!0||(out("<"),out(tag),angular.forEach(attrs,function(value,key){var lkey=angular.lowercase(key),isImage="img"===tag&&"src"===lkey||"background"===lkey;validAttrs[lkey]!==!0||uriAttrs[lkey]===!0&&!uriValidator(value,isImage)||(out(" "),out(key),out('="'),out(encodeEntities(value)),out('"'))}),out(unary?"/>":">"))},end:function(tag){tag=angular.lowercase(tag),ignore||validElements[tag]!==!0||(out("</"),out(tag),out(">")),tag==ignore&&(ignore=!1)},chars:function(chars){ignore||out(encodeEntities(chars))}}}var $sanitizeMinErr=angular.$$minErr("$sanitize"),START_TAG_REGEXP=/^<((?:[a-zA-Z])[\w:-]*)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*(>?)/,END_TAG_REGEXP=/^<\/\s*([\w:-]+)[^>]*>/,ATTR_REGEXP=/([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g,BEGIN_TAG_REGEXP=/^</,BEGING_END_TAGE_REGEXP=/^<\//,COMMENT_REGEXP=/<!--(.*?)-->/g,DOCTYPE_REGEXP=/<!DOCTYPE([^>]*?)>/i,CDATA_REGEXP=/<!\[CDATA\[(.*?)]]>/g,SURROGATE_PAIR_REGEXP=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,NON_ALPHANUMERIC_REGEXP=/([^\#-~| |!])/g,voidElements=makeMap("area,br,col,hr,img,wbr"),optionalEndTagBlockElements=makeMap("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),optionalEndTagInlineElements=makeMap("rp,rt"),optionalEndTagElements=angular.extend({},optionalEndTagInlineElements,optionalEndTagBlockElements),blockElements=angular.extend({},optionalEndTagBlockElements,makeMap("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul")),inlineElements=angular.extend({},optionalEndTagInlineElements,makeMap("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")),svgElements=makeMap("animate,animateColor,animateMotion,animateTransform,circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,set,stop,svg,switch,text,title,tspan,use"),specialElements=makeMap("script,style"),validElements=angular.extend({},voidElements,blockElements,inlineElements,optionalEndTagElements,svgElements),uriAttrs=makeMap("background,cite,href,longdesc,src,usemap,xlink:href"),htmlAttrs=makeMap("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,target,title,type,valign,value,vspace,width"),svgAttrs=makeMap("accent-height,accumulate,additive,alphabetic,arabic-form,ascent,attributeName,attributeType,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan"),validAttrs=angular.extend({},uriAttrs,svgAttrs,htmlAttrs),hiddenPre=document.createElement("pre");angular.module("ngSanitize",[]).provider("$sanitize",$SanitizeProvider),angular.module("ngSanitize").filter("linky",["$sanitize",function($sanitize){var LINKY_URL_REGEXP=/((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"”’]/i,MAILTO_REGEXP=/^mailto:/i;return function(text,target){function addText(text){text&&html.push(sanitizeText(text))}function addLink(url,text){html.push("<a "),angular.isDefined(target)&&html.push('target="',target,'" '),html.push('href="',url.replace(/"/g,"&quot;"),'">'),addText(text),html.push("</a>")}if(!text)return text;for(var match,url,i,raw=text,html=[];match=raw.match(LINKY_URL_REGEXP);)url=match[0],match[2]||match[4]||(url=(match[3]?"http://":"mailto:")+url),i=match.index,addText(raw.substr(0,i)),addLink(url,match[0].replace(MAILTO_REGEXP,"")),raw=raw.substring(i+match[0].length);return addText(raw),$sanitize(html.join(""))}}])}(window,window.angular);
"use strict";angular.module("chayka-buttons",["chayka-utils"]).provider("buttons",function(){var stdButtonClass="",buttons={setButtonClass:function(cls){stdButtonClass=cls},getButtonClass:function(){return stdButtonClass},$get:["utils",function(utils){return utils.ensure("Chayka.Buttons",buttons),buttons}]};return buttons});
"use strict";angular.module("chayka-nls",["chayka-utils"]).provider("nls",function(){var currentLocale="en-US",dictionaries={},nls={setLocale:function(locale){currentLocale=locale},getLocale:function(){return currentLocale},setTranslations:function(locale,translations){return dictionaries[locale]=dictionaries[locale]||{},angular.extend(dictionaries[locale],translations),dictionaries[locale]},getSupportedLocales:function(){return Object.keys(dictionaries)},_:function(str,locale){locale=locale||currentLocale||"en-US";var dictionary=dictionaries[locale]||{},defaultDictionary=dictionaries["en-US"]||{};return dictionary[str]||defaultDictionary[str]||str},$get:["utils",function(utils){return utils.ensure("Chayka.NLS",nls),nls}]};return nls}).filter("nls",["nls",function(nls){return function(str,locale){return nls._(str,locale)}}]).config(["nlsProvider",function(nlsProvider){var locale=window.Chayka&&window.Chayka.Core&&window.Chayka.Core.locale||"en-US";nlsProvider.setLocale(locale)}]);
"use strict";angular.module("chayka-spinners",["chayka-nls","chayka-utils"]).directive("spinner",[function(){return{restrict:"AE",scope:{spinner:"=",visible:"=?",message:"=?"},replace:!0,template:'<div class="chayka-spinner" data-ng-show="visible" data-ng-bind-html="message"></div>',controller:function($scope){$scope.show=function(message){$scope.message=message||$scope.message||"Loading...",$scope.visible=!0},$scope.hide=function(){$scope.visible=!1},$scope.spinner=$scope}}}]).directive("multiSpinner",[function(){return{restrict:"AE",scope:{spinner:"=multiSpinner"},replace:!0,template:'<div class="chayka-multi_spinner" data-ng-show="total"><div data-ng-repeat="(id, message) in messages"><div data-spinner="spinners[id]" data-message="message" data-visible="true"></div></div></div>',controller:function($scope){var ctrl={};$scope.spinners={},$scope.messages={},$scope.total=0,ctrl.show=function(message,id){return id||(id="spinner_"+$scope.total),$scope.messages[id]||($scope.messages[id]=message,$scope.total++),id},ctrl.hide=function(id){$scope.messages[id]&&($scope.total--,delete $scope.messages[id],$scope.spinners[id]=null)},$scope.spinner=ctrl}}}]).directive("generalSpinner",["utils","generalSpinner",function(utils){return{restrict:"AE",template:'<div class="chayka-general_spinner"><div data-multi-spinner="spinner"></div></div>',controller:function($scope){$scope.spinner=null;var $=angular.element;$(document).on("Chayka.Spinners.show",function(e,message,id){$scope.spinner&&($scope.spinner.show(message,id),utils.patchScope($scope))}),$(document).on("Chayka.Spinners.hide",function(e,id){$scope.spinner&&($scope.spinner.hide(id),utils.patchScope($scope))})}}}]).factory("generalSpinner",["utils",function(utils){var $=angular.element;return utils.ensure("Chayka.Spinners",{show:function(message,id){$(document).trigger("Chayka.Spinners.show",[message,id])},hide:function(id){$(document).trigger("Chayka.Spinners.hide",[id])}})}]);
"use strict";angular.module("chayka-ajax",["chayka-modals","chayka-spinners"]).factory("ajax",["$window","$http","$timeout","modals","generalSpinner","utils",function($window,$http,$timeout,modals,generalSpinner,utils){var Chayka=(angular.element,$window.Chayka||{}),ajax=Chayka.Ajax=Chayka.Ajax||{errorHandlers:{},addErrorHandler:function(id,handler,errorCode){errorCode=errorCode||null,ajax.errorHandlers[id]={code:errorCode,handler:handler}},removeErrorHandler:function(id){ajax.errorHandlers[id]=null},handleError:function(code,message,payload){var res=!1;for(var id in ajax.errorHandlers)if(ajax.errorHandlers.hasOwnProperty(id)){var reg=ajax.errorHandlers[id];if(reg&&(!reg.code||reg.code===code)&&(res=res||reg.handler(code,message,payload)))break}return res},handleErrors:function(data){if(!data)return{empty_response:"Empty response"};if("mass_errors"===data.code){for(var code in data.message)data.message.hasOwnProperty(code)&&ajax.handleError(code,data.message[code],data.payload)&&delete data.message[code];return data.message}var errors={};return ajax.handleError(data.code,data.message,data.payload)||(errors[data.code]=data.message),errors},processResponse:function(response,defaultMessage){var message=defaultMessage||!1,code=1;if(!angular.isUndefined(response.payload))return response;if(!response||angular.isString(response)&&!response.length)message="Empty response";else if(angular.isString(response)){var m=response.match(/<body[^>]*>([\s\S]*)<\/body>/m);m=m?m:response.match(/<br\s*\/>\s*<b>[^<]+<\/b>\:\s*(.*)<br\s*\/>/m),message=m?m[1].trim():defaultMessage}return{code:code,message:message,payload:null}},spinnersUsed:0,prepare:function(options){var defaults={};options=options||{},options=angular.extend(defaults,options);var spinner=options.spinner;spinner||spinner===!1||(spinner=null);var spinnerId=options.spinnerId||"spinner",spinnerFieldId=options.spinnerFieldId,spinnerMessage=options.spinnerMessage||"Processing...",errorMessage=options.errorMessage||"Operation failed",successMessage=options.successMessage,formValidator=options.formValidator,validateOnSend=angular.isUndefined(options.validateOnSend)?!0:options.validateOnSend,scope=options.scope,send=options.send,success=options.success,error=options.error,complete=options.complete;spinnerId+=ajax.spinnersUsed++;var prepared={},sendHandler=function(){var result=!1;return formValidator&&validateOnSend&&!(!spinnerFieldId&&formValidator.validateFields()||spinnerFieldId&&formValidator.validateFieldById(spinnerId))?!1:(send&&angular.isFunction(send)&&(result=send()),result&&(spinner!==!1&&(spinner?spinner.show(spinnerMessage):spinnerFieldId&&formValidator?formValidator.setFieldState(spinnerFieldId,"progress",spinnerMessage):generalSpinner.show(spinnerMessage,spinnerId)),formValidator&&formValidator.clearMessage(),scope&&utils.patchScope(scope)),result)};prepared.send=sendHandler;var completeHandler=function(data,status,headers,config){spinner!==!1&&(spinner?spinner.hide():spinnerFieldId&&formValidator?formValidator.setFieldState(spinnerFieldId,"clean"):generalSpinner.hide(spinnerId)),complete&&angular.isFunction(complete)&&complete(data,status,headers,config)};prepared.complete=completeHandler;var errorHandler=function(data,status,headers,config){data=ajax.processResponse(data,errorMessage),completeHandler(data,status,headers,config);var errors=ajax.handleErrors(data),message=errorMessage;for(var i in errors)if(errors.hasOwnProperty(i)){message=errors[i]||errorMessage;break}formValidator?spinnerFieldId?formValidator.setFieldState(spinnerFieldId,"error",message):formValidator.showErrors(errors):message!==!1&&modals.alert(message),angular.isFunction(error)&&error(data,status,headers,config),scope&&utils.patchScope(scope)};prepared.error=errorHandler;var successHandler=function(data,status,headers,config){if(data=ajax.processResponse(data,errorMessage),data.code)errorHandler(data,status,headers,config);else{completeHandler(data,status,headers,config);var message=successMessage===!1?!1:data.message||successMessage;formValidator&&message&&formValidator.showMessage(message),success&&angular.isFunction(success)&&success(data,status,headers,config)}scope&&utils.patchScope(scope)};return prepared.success=successHandler,prepared},request:function(url,options){var data=options.data||null,method=options.method||"post",config=options.config||{},send=null;switch(method){case"get":send=function(){return $http.get(url,config)};break;case"delete":send=function(){return $http["delete"](url,config)};break;case"head":send=function(){return $http.head(url,config)};break;case"jsonp":send=function(){return $http.jsonp(url,config)};break;case"post":send=function(){return $http.post(url,data,config)};break;case"put":send=function(){return $http.put(url,data,config)};break;case"patch":send=function(){return $http.patch(url,data,config)}}options.send=send;var prepared=ajax.prepare(options),promise=prepared.send();return promise&&promise.success(prepared.success).error(prepared.error),promise},get:function(url,options,config){return options=options||{},options.method="get",options.config=config,ajax.request(url,options)},del:function(url,options,config){return options=options||{},options.method="delete",options.config=config,ajax.request(url,options)},head:function(url,options,config){return options=options||{},options.method="head",options.config=config,ajax.request(url,options)},jsonp:function(url,options,config){return options=options||{},options.method="jsonp",options.config=config,ajax.request(url,options)},post:function(url,data,options,config){return options=options||{},options.method="post",options.data=data,options.config=config,ajax.request(url,options)},put:function(url,data,options,config){return options=options||{},options.method="put",options.data=data,options.config=config,ajax.request(url,options)},patch:function(url,data,options,config){return options=options||{},options.method="patch",options.data=data,options.config=config,ajax.request(url,options)}};return ajax}]).directive("buttonAjaxRequest",["ajax","modals",function(ajax,modals){return{scope:{url:"@buttonAjaxRequest",postData:"=?post",confirm:"@?",formValidator:"=?validator"},link:function($scope,$element){var onSuccess=function(data){data.message&&modals.alert(data.message)},sendRequest=function(){var params={success:onSuccess};$scope.formValidator&&(params.formValidator=$scope.formValidator),$scope.postData?ajax.post($scope.url,$scope.postData,params):ajax.get($scope.url,params)};$element.click(function(e){e.preventDefault(),$scope.confirm?modals.confirm($scope.confirm,sendRequest):sendRequest()})}}}]);
"use strict";angular.module("chayka-modals",["chayka-nls","chayka-buttons","chayka-utils"]).provider("modals",function(){return{$get:["$window","nls","buttons","utils",function($window,nls,btn,utils){var modals=utils.ensure("Chayka.Modals",{queue:[],create:function(options){if(options.buttons&&angular.isObject(options.buttons)&&!angular.isArray(options.buttons)){var buttons=[];angular.forEach(options.buttons,function(button,text){button.text=text,buttons.push(button)}),options.buttons=buttons}var defaultOptions={},m=angular.extend(defaultOptions,options);return m},show:function(options){var m=modals.create(options);return modals.queue.push(m),m},alert:function(message,title,modalClass,callback){modalClass=modalClass||"modal_alert",modals.show({content:message,title:title||"",modalClass:modalClass,buttons:[{text:nls._("Ok"),click:callback}]})},confirm:function(message,callback,title){modals.show({content:message,title:title||"",modalClass:"modal_confirm",buttons:[{text:nls._("Yes"),click:callback},{text:nls._("No")}]})},close:function($event){$event&&$event.target!==$event.currentTarget||modals.queue.shift()},getButtonClass:function(button){var cls=[],buttonClass=btn.getButtonClass();return buttonClass&&cls.push(buttonClass),button&&button.cls&&cls.push(button.cls),cls.join(" ")}});return modals}]}}).directive("modalsManager",["modals","buttons",function(modals){return{restrict:"AE",controllerAs:"mm",bindToController:{},template:'<div id="chayka-modals" data-ng-show="mm.queue.length" class="ng-cloak chayka-modals" data-ng-cloak="">   <div class="chayka-modals-fader" data-ng-click="mm.close($event)">       <div data-ng-repeat="item in mm.queue | limitTo: 1" class="chayka-modals-modal">           <div class="modal_header">               <div class="modal_header-title">{{item.title | nls}}</div>               <div class="modal_header-close" data-ng-click="mm.close($event)">&times;</div>           </div>           <div class="modal_body">               <div class="modal_body-content" data-ng-bind-html="item.content"></div>           </div>           <div class="modal_buttons" data-ng-show="item.buttons && item.buttons.length">               <button data-ng-repeat="button in item.buttons" data-ng-click="button.persist || mm.close(); button.click && button.click();" class="{{mm.getButtonClass(button)}}">{{button.text | nls}}</button>           </div>       </div>   </div></div>',controller:function(){return{close:modals.close,queue:modals.queue,getButtonClass:modals.getButtonClass}}}}]).directive("modal",["modals",function(modals){return{restrict:"AE",transclude:!0,controllerAs:"m",scope:{modal:"=modal",title:"@?modalTitle",show:"@modalShow",buttons:"=?modalButtons",width:"@modalWidth",height:"@modalHeight",onClose:"&?onModalClose"},template:'<div class="chayka-modals ng-cloak" data-ng-show="m.isOpen">   <div class="chayka-modals-fader" data-ng-click="m.hide($event)">       <div class="chayka-modals-modal">           <div class="modal_header">               <div class="modal_header-title">{{m.title | nls}}</div>               <div class="modal_header-close" data-ng-click="m.hide($event)">&times;</div>           </div>           <div class="modal_body" data-ng-transclude></div>           <div class="modal_buttons" data-ng-show="m.buttons && m.buttons.length">               <button data-ng-repeat="button in buttons" data-ng-click="button.persist || m.hide(); button.click && button.click();" class="{{m.getButtonClass(button)}}">{{button.text | nls}}</button>           </div>       </div>   </div></div>',controller:function($scope,$element){var ctrl={isOpen:!1,title:$scope.title||"",buttons:$scope.buttons||[],show:function(){ctrl.isOpen=!0},hide:function($event){$event&&$event.target!==$event.currentTarget||(ctrl.isOpen=!1,$scope.onClose&&$scope.onClose())},setTitle:function(title){ctrl.title=title},setButtons:function(buttons){if(buttons&&angular.isObject(buttons)&&!angular.isArray(buttons)){var btns=[];angular.forEach(buttons,function(button,text){button.text=text,btns.push(button)}),buttons=btns}ctrl.buttons=$scope.buttons=buttons},getButtonClass:function(button){return modals.getButtonClass(button)}};return $scope.buttons&&ctrl.setButtons($scope.buttons),$scope.modal=ctrl,$scope.show&&ctrl.show(),$scope.height&&$element.css("height",$scope.height),$scope.width&&$element.css("width",$scope.width),ctrl}}}]).config(["nlsProvider",function(nlsProvider){nlsProvider.setTranslations("en-US",{Yes:"Yes",No:"No",Ok:"Ok"}),nlsProvider.setTranslations("ru-RU",{Yes:"Да",No:"Нет",Ok:"Ok"})}]);
"use strict";angular.module("chayka-forms",["ngSanitize","chayka-modals","chayka-nls","chayka-ajax"]).directive("formValidator",["$window","modals","ajax","utils",function($window,modals,ajax,utils){return{restrict:"AE",scope:{validator:"=?formValidator",scrollMargin:"@",scrollDuration:"@"},link:function($scope,$element){$scope.element=$element},controller:function($scope){var ctrl={scrollMargin:$scope.scrollMargin||50,scrollDuration:$scope.scrollMargin||500,fields:$scope.fields||{},messageBox:null,setMessageBox:function(msgBox){ctrl.messageBox=msgBox},showMessage:function(message,state){return ctrl.messageBox?(ctrl.messageBox.message=message,ctrl.messageBox.state=state||"",!0):(modals.alert(message,"",state),!1)},clearMessage:function(){return ctrl.messageBox?(ctrl.messageBox.message="",ctrl.messageBox.state="",!0):!1},addField:function(field){ctrl.fields[field.name]=field},setFieldState:function(field,state,message){angular.isString(field)&&!(field=ctrl.fields[field])||(field.valid="valid"===state||"clean"===state||"progress"===state,field.state=state,field.message=message||field.hint)},setFieldError:function(field,message){ctrl.setFieldState(field,"invalid",message)},clearFieldError:function(field){ctrl.setFieldState(field,"clear")},checkRequired:function(field){var c=field.checks.required;return!c.active||!!(field.value+"")},checkLength:function(field){var c=field.checks.length;return!c.active||!(c.max&&field.value.length>c.max||field.value.length<c.min)},checkRange:function(field){var c=field.checks.range,lower=c.min&&(c.minE&&field.value<c.min||!c.minE&&field.value<=c.min),greater=c.max&&(c.maxE&&field.value>c.max||!c.minE&&field.value>=c.max);return!c.active||!(lower||greater)},checkLt:function(field){var c=field.checks.lt;return!c.active||field.value<c.max},checkLe:function(field){var c=field.checks.le;return!c.active||field.value<=c.max},checkGt:function(field){var c=field.checks.gt;return!c.active||field.value>c.min},checkGe:function(field){var c=field.checks.ge;return!c.active||field.value>=c.min},checkRegexp:function(field){var c=field.checks.regexp,valid=c.regexp.test(field.value);return c.forbid&&(valid=!valid),!c.active||valid},checkPasswords:function(field){var c=field.checks.passwords,repeatField=ctrl.fields[c.repeat]||field;return!c.active||field.value===repeatField.value},checkApi:function(field){var c=field.checks.api,url=utils.template(c.url,{name:encodeURIComponent(field.name),value:encodeURIComponent(field.value)}),value=field.value+"";if(c.active){if(value in c.dictionary)return"valid"===c.dictionary[value]?ctrl.setFieldState(field,"valid",null):ctrl.setFieldState(field,"invalid",c.message),c.dictionary[value];c.dictionary[value]="progress",ajax.get(url,{spinner:$scope.spinner,spinnerFieldId:field.name,spinnerMessage:" ",showMessage:!1,formValidator:ctrl,errorMessage:c.message,validateOnSend:!1,scope:field,success:function(data){c.dictionary[value]="valid",ctrl.setFieldState(field,"valid",null)},error:function(data){c.dictionary[value]="invalid",c.message=c.message||"mass_errors"===data.code&&data.message[field.name]||data.message}})}return!c.active||c.dictionary[value]},checkCustom:function(field){var c=field.checks.custom,callback=c.callback;return!c.active||$scope.$parent[callback].call($scope,field.value,field)},validateField:function(field,silent){var state,valid=!0,message="",checks=field.checks;return field.active?(checks.required&&!ctrl.checkRequired(field)&&(valid=!1,message=checks.required.message),field.value+""&&angular.forEach(checks,function(c,check){if(valid){switch(check){case"length":valid=ctrl.checkLength(field);break;case"range":valid=ctrl.checkRange(field);break;case"lt":valid=ctrl.checkLt(field);break;case"le":valid=ctrl.checkLe(field);break;case"gt":valid=ctrl.checkGt(field);break;case"ge":valid=ctrl.checkGe(field);break;case"regexp":valid=ctrl.checkRegexp(field);break;case"passwords":valid=ctrl.checkPasswords(field)}valid||(message=c.message)}}),valid&&checks.custom&&(valid=ctrl.checkCustom(field),message=valid?"":checks.custom.message),state=valid?"valid":"invalid",valid&&checks.api&&(state=ctrl.checkApi(field),message="invalid"===state?checks.api.message:""),silent||ctrl.setFieldState(field,state,message),field.valid):!0},validateFieldById:function(fieldId,silent){var field=ctrl.fields[fieldId];return ctrl.validateField(field,silent)},validateFields:function(){var valid=!0,scrollTo=0;return angular.forEach(ctrl.fields,function(field){if(!ctrl.validateField(field)){var scrollPos=field.element.offset().top;(!scrollTo||scrollPos&&scrollTo>scrollPos)&&(scrollTo=scrollPos),valid=!1}}),!valid&&scrollTo&&ctrl.scrollTo(scrollTo),valid},scrollTo:function(scrollTo,duration){if(angular.isUndefined(duration)&&(duration=parseInt(ctrl.scrollDuration)||ctrl.scrollDuration),scrollTo-=parseInt(ctrl.scrollMargin),$window.jQuery){var $=$window.jQuery;(scrollTo<$window.pageYOffset||scrollTo>$window.pageYOffset+$($window).height())&&(duration?$window.jQuery("html, body").animate({scrollTop:scrollTo},duration):$window.jQuery("html, body").scrollTop(scrollTo))}},scrollUp:function(duration){ctrl.scrollTo($scope.element.offset().top,duration)},showErrors:function(errors){var scrollTo=0;angular.forEach(errors,function(message,key){var field=ctrl.fields[key];if(field){ctrl.setFieldState(field,"invalid",message);var scrollPos=field.element.offset().top;(!scrollTo||scrollPos&&scrollTo>scrollPos)&&(scrollTo=scrollPos)}else ctrl.showMessage(message,"error")}),scrollTo&&ctrl.scrollTo(scrollTo)},getFieldValues:function(){var values={};return angular.forEach(ctrl.fields,function(field){values[field]=ctrl.fields[field].value||""}),values}};return $scope.validator=ctrl,ctrl}}}]).directive("formField",["nls","delayedCall","utils",function(nls,delayedCall,utils){return{require:["^^formValidator","formField"],restrict:"AE",transclude:!0,controllerAs:"f",template:'<label>{{f.label|nls}}</label><div class="input {{f.state}}" data-ng-transclude></div><div class="message" data-ng-class="{error: !f.valid}" data-ng-bind-html="f.message"></div>',scope:{name:"@formField",label:"@",hint:"@",message:"@hint"},link:function($scope,$element,$attrs,controllers){function setupIf(){$attrs.checkIf&&$scope.$parent.$watch($attrs.checkIf,function(value){field.active=!!value})}function setupRequired(){var short=$attrs.checkRequired,shorts=short?short.split("|"):[],message=nls._(shorts[0]||$attrs.checkRequiredMessage||"message_required");field.checks.required={message:message,active:!0};var condition=shorts[1]||$attrs.checkRequiredIf;condition&&$scope.$parent.$watch(condition,function(value){field.checks.required.active=value})}function setupLength(){var short=$attrs.checkLength,shorts=short?short.split("|"):[],min=parseInt(shorts[1]||$attrs.checkLengthMin||0),max=parseInt(shorts[2]||$attrs.checkLengthMax||0),messageTemplate=nls._(shorts[0]||$attrs.checkLengthMessage||"message_length"),message=utils.template(messageTemplate,{min:min,max:max,label:field.label});field.checks.length={message:message,min:min,max:max,active:!0};var condition=shorts[3]||$attrs.checkLengthIf;condition&&$scope.$parent.$watch(condition,function(value){field.checks.length.active=value})}function setupRange(){var short=$attrs.checkRange,shorts=short?short.split("|"):[],minStr=shorts[1]||$attrs.checkRangeMin||0,minE=!!minStr.match(/^=/),min=minE?minStr.substr(1):minStr,maxStr=shorts[2]||$attrs.checkRangeMax||0,maxE=!!maxStr.match(/^=/),max=maxE?maxStr.substr(1):maxStr,format=shorts[3]||$attrs.checkRangeFormat||"int";switch(format){case"int":min=parseInt(min),max=parseInt(max);break;case"float":min=parseFloat(min),max=parseFloat(max)}var messageTemplate=shorts[0]||$attrs.checkRangeMessage||nls._("message_range"),message=utils.template(messageTemplate,{min:min,max:max,label:field.label});field.checks.range={message:message,min:min,minE:minE,max:max,maxE:maxE,active:!0};var condition=shorts[4]||$attrs.checkRangeIf;condition&&$scope.$parent.$watch(condition,function(value){field.checks.range.active=value})}function setupLt(){var short=$attrs.checkLt,shorts=short?short.split("|"):[],max=shorts[1]||$attrs.checkLtMax||0,messageTemplate=shorts[0]||$attrs.checkLtMessage||nls._("message_lt"),message=utils.template(messageTemplate,{max:max,label:field.label}),format=shorts[2]||$attrs.checkLtFormat||"int";switch(format){case"int":max=parseInt(max);break;case"float":max=parseFloat(max)}field.checks.lt={message:message,max:max,active:!0};var condition=shorts[3]||$attrs.checkLtIf;condition&&$scope.$parent.$watch(condition,function(value){field.checks.lt.active=value})}function setupLe(){var short=$attrs.checkLe,shorts=short?short.split("|"):[],max=shorts[1]||$attrs.checkLeMax||0,messageTemplate=shorts[0]||$attrs.checkLeMessage||nls._("message_le"),message=utils.template(messageTemplate,{max:max,label:field.label}),format=shorts[2]||$attrs.checkLeFormat||"int";switch(format){case"int":max=parseInt(max);break;case"float":max=parseFloat(max)}field.checks.le={message:message,max:max,active:!0};var condition=shorts[3]||$attrs.checkLeIf;condition&&$scope.$parent.$watch(condition,function(value){field.checks.le.active=value})}function setupGt(){var short=$attrs.checkGt,shorts=short?short.split("|"):[],min=shorts[1]||$attrs.checkGtMin||0,messageTemplate=shorts[0]||$attrs.checkGtMessage||nls._("message_gt"),message=utils.template(messageTemplate,{min:min,label:field.label}),format=shorts[2]||$attrs.checkGtFormat||"int";switch(format){case"int":min=parseInt(min);break;case"float":min=parseFloat(min)}field.checks.gt={message:message,min:min,active:!0};var condition=shorts[3]||$attrs.checkGtIf;condition&&$scope.$parent.$watch(condition,function(value){field.checks.gt.active=value})}function setupGe(){var short=$attrs.checkGe,shorts=short?short.split("|"):[],min=shorts[1]||$attrs.checkGeMin||0,messageTemplate=shorts[0]||$attrs.checkGeMessage||nls._("message_ge"),message=utils.template(messageTemplate,{min:min,label:field.label}),format=shorts[2]||$attrs.checkGeFormat||"int";switch(format){case"int":min=parseInt(min);break;case"float":min=parseFloat(min)}field.checks.ge={message:message,min:min,active:!0};var condition=shorts[3]||$attrs.checkGeIf;condition&&$scope.$parent.$watch(condition,function(value){field.checks.ge.active=value})}function setupRegExp(){var short=$attrs.checkRegexp,shorts=short?short.split("|"):[],patternAndModifiers=short&&/\/(.*)\/(\w*)$/.exec(shorts[1])||[],message=shorts[0]||$attrs.checkRegexpMessage||nls._("message_regexp"),pattern=patternAndModifiers[1]||$attrs.checkRegexpPattern||".*",modifiers=patternAndModifiers[2]||$attrs.checkRegexpModifiers||"",forbid=shorts[2]||$attrs.checkRegexpForbid||!1,regexp=new RegExp(pattern,modifiers);field.checks.regexp={message:message,regexp:regexp,forbid:forbid,active:!0};var condition=shorts[4]||$attrs.checkRegexpIf;condition&&$scope.$parent.$watch(condition,function(value){field.checks.regexp.active=value})}function setupEmail(){var short=$attrs.checkEmail,shorts=short?short.split("|"):[],message=nls._(shorts[0]||$attrs.checkEmailMessage||"message_email");field.checks.regexp={message:message,regexp:/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i,forbid:!1,active:!0};var condition=shorts[1]||$attrs.checkEmailIf;condition&&$scope.$parent.$watch(condition,function(value){field.checks.regexp.active=value})}function setupPasswords(){var short=$attrs.checkPasswords,shorts=short?short.split("|"):[],repeat=shorts[0]||$attrs.checkPasswordsRepeat,message=shorts[1]||$attrs.checkPasswordsMessage||nls._("message_passwords");field.checks.passwords={message:message,repeat:repeat,active:!0};var condition=shorts[2]||$attrs.checkPasswordsIf;condition&&$scope.$parent.$watch(condition,function(value){field.checks.passwords.active=value})}function setupApiCall(){var short=$attrs.checkApi,shorts=short?short.split("|"):[],url=shorts[0]||$attrs.checkApiUrl,message=shorts[1]||$attrs.checkApiMessage,delay=shorts[2]||$attrs.checkApiDelay||0;field.checks.api={message:message,url:url,delay:delay,dictionary:{},active:!0};var condition=shorts[3]||$attrs.checkApiIf;condition&&$scope.$parent.$watch(condition,function(value){field.checks.api.active=value}),$input.on("keyup change",function(){formCtrl.setFieldState(field,"clean"),field.value&&delayedCall("check-api-"+field.name,delay,function(){formCtrl.validateField(field,!0)})})}function setupCustom(){var short=$attrs.checkCustom,shorts=short?short.split("|"):[],callback=shorts[0]||$attrs.checkCustomCallback,message=shorts[1]||$attrs.checkCustomMessage||nls._("message_custom");field.checks.custom={message:message,callback:callback,active:!0};var condition=shorts[2]||$attrs.checkCustomIf;condition&&$scope.$parent.$watch(condition,function(value){field.checks.custom.active=value})}var formCtrl=controllers[0],field=controllers[1],$input=$element.find("[ng-model],[data-ng-model]"),inputType=$input.attr("type"),$oldLabel=$element.find(".input > label:first-child"),$newLabel=$element.find("> label");field.model=$input.attr("data-ng-model")||$input.attr("ng-model"),field.element=$element,$scope.label||"checkbox"===inputType||($scope.label=$oldLabel.text().replace(/\s*:\s*$/,""),angular.forEach($oldLabel.attributes,function(i,attr){var name=attr.name,value=attr.value;$newLabel.attr(name,value)}),$newLabel.addClass($oldLabel.attr("class")),$newLabel.text($scope.label),$oldLabel.remove()),field.label=$scope.label,field.name=$scope.name,field.message=$scope.message,$input.focus(function(){}),$input.blur(function(){field.value&&formCtrl.validateField(field,!1),utils.patchScope($scope)}),angular.forEach($attrs,function(attr,key){var m=key.match(/^check([A-Z][a-z]*)/),check=m&&m[1];if(check&&!field.checks[check])switch(check){case"If":setupIf();break;case"Required":setupRequired();break;case"Length":setupLength();break;case"Le":setupLe();break;case"Lt":setupLt();break;case"Ge":setupGe();break;case"Gt":setupGt();break;case"Range":setupRange();break;case"Regexp":setupRegExp();break;case"Email":setupEmail();break;case"Passwords":setupPasswords();break;case"Api":setupApiCall();break;case"Custom":setupCustom()}}),$scope.$parent.$watch(field.model,function(value){field.value=value}),$scope.$watch("state",function(value){$element.removeClass("clean progress valid invalid"),$element.addClass(value)}),formCtrl.addField(field)},controller:function($scope){return{name:"",label:"",message:"",value:null,valid:!0,state:"clean",active:!0,checks:{}}}}}]).directive("formMessage",function(){return{require:["^^formValidator","formMessage"],restrict:"AE",replace:!0,controllerAs:"mb",bindToController:!0,template:'<div class="form-message {{mb.state}}" data-ng-show="!!mb.message" data-ng-bind-html="mb.message"></div>',scope:{message:"@"},controller:function(){return{message:"",state:""}},link:function($scope,$element,attrs,controllers){var formCtrl=controllers[0],messageBox=controllers[1];formCtrl.setMessageBox(messageBox)}}}).directive("autoHeight",[function(){return{restrict:"A",link:function($scope,$element){var resizeTextarea=function(){var height="border-box"===$element.css("box-sizing")?parseInt($element.css("borderTopWidth"))+$element.prop("scrollHeight")+parseInt($element.css("borderBottomWidth")):$element.prop("scrollHeight");$element.css("height",height+"px")};$element.on("change input cut paste drop keydown",resizeTextarea)}}}]).factory("delayedCall",["$timeout",function($timeout){var timeouts={};return function(callId,delay,callback){var handle=timeouts[callId];handle&&$timeout.cancel(handle),timeouts[callId]=$timeout(function(){timeouts[callId]=null,callback()},delay)}}]).config(["nlsProvider",function(nlsProvider){nlsProvider.setTranslations("en-US",{message_required:"Required Field",message_length:"The length of this value should be between {min} and {max} symbols",message_range:"The value should be between {min} and {max}",message_lt:"The value should be lower than {max}",message_le:"The value should be lower than {max} or equal",message_gt:"The value should be greater than {min}",message_ge:"The value should be greater than {min} or equal",message_regexp:"Invalid format",message_email:"Valid email format: user@domain.com",message_passwords:"Passwords do not match",message_custom:"Invalid value"}),nlsProvider.setTranslations("ru-RU",{message_required:"Обязательное поле",message_length:"Длина значения должна быть от {min} до {max} символов",message_range:"Значение должно быть в диапазоне от {min} до {max}",message_lt:"Значение должно быть меньше {max}",message_le:"Значение должно быть меньше или равно {max}",message_gt:"Значение должно быть больше {min}",message_ge:"Значение должно быть больше или равно {min}",message_regexp:"Некорректный формат",message_email:"Формат email: user@domain.com",message_passwords:"Введенные пароли отличаются",message_custom:"Некорректное значение"})}]);
"use strict";angular.module("chayka-pagination",["chayka-nls","chayka-utils"]).directive("pagination",["utils",function(utils){return{restrict:"AE",template:'<ul data-ng-show="totalPages > 1"><li data-ng-repeat="item in items" class="{{item.cls}}"><a data-ng-click="item.click();" data-ng-bind-html="item.text"></a></li></ul>',scope:{pagination:"=",currentPage:"=?",totalPages:"=?",packSize:"=?",hrefTemplate:"@?",click:"=?",order:"@"},controller:function($scope){$scope.state="",$scope.currentPage=$scope.currentPage||1,$scope.totalPages=$scope.totalPages||0,$scope.packSize=$scope.packSize||10,$scope.hrefTemplate=$scope.hrefTemplate||"/page/<%= page %>",$scope.items=[],$scope.click||($scope.click=function(page){$scope.$emit("Pagination.currentPage",page),page!==$scope.currentPage&&$scope.$emit("Pagination.pageChanged",page)}),$scope.setCurrentPage=function(val,render){return $scope.currentPage=val,render&&$scope.render(),$scope},$scope.getCurrentPage=function(){return $scope.currentPage},$scope.setTotalPages=function(val,render){return $scope.totalPages=val,render&&$scope.render(),$scope},$scope.getTotalPages=function(){return $scope.totalPages},$scope.setPackSize=function(val,render){return $scope.packSize=val,render&&$scope.render(),$scope},$scope.getPackSize=function(){return $scope.packSize},$scope.setHrefTemplate=function(val,render){return $scope.hrefTemplate=val,render&&$scope.render(),$scope},$scope.getHrefTemplate=function(){return $scope.hrefTemplate},$scope.getHref=function(page){return page>=1&&page<=$scope.getTotalPages()&&$scope.getHrefTemplate()?utils.template($scope.getHrefTemplate(),{page:page}):"#"},$scope.getItem=function(page,text){page=parseInt(page),text=text||page;var cls="";return page===$scope.getCurrentPage()&&(cls="active"),(1>page||page>$scope.getTotalPages())&&(cls="disabled"),{page:page,text:text,href:$scope.getHref(page),cls:cls,click:function(){return page>0&&page<=$scope.totalPages&&$scope.click(page),!1}}},$scope.getItems=function(){var current=$scope.getCurrentPage(),packSize=$scope.getPackSize(),totalPages=$scope.getTotalPages(),packStart=1,packFinish=totalPages,items=[];if(totalPages>packSize){packStart=current-Math.floor((packSize-1)/2),packFinish=current+Math.ceil((packSize-1)/2);var offset=0;1>packStart&&(offset=1-packStart),packFinish>totalPages&&(offset=totalPages-packFinish),packStart+=offset,packFinish+=offset}return $scope.order.split(/\s+/).forEach(function(item){switch(item){case"previous":items.push($scope.getItem(current-1,"&larr;"));break;case"first":packStart>1&&items.push($scope.getItem(1));break;case"rewind":packStart>2&&items.push($scope.getItem(packStart-1,"..."));break;case"pages":for(var i=packStart;packFinish>=i;i++)items.push($scope.getItem(i));break;case"forward":totalPages-packFinish>=2&&items.push($scope.getItem(packFinish+1,"..."));break;case"last":totalPages>packFinish&&items.push($scope.getItem(totalPages));break;case"next":items.push($scope.getItem(current+1,"&rarr;"))}}),items},$scope.render=function(){$scope.items=$scope.getItems()},$scope.pagination=$scope}}}]).config(["nlsProvider",function(nlsProvider){nlsProvider.setTranslations("en-US",{next:"Next",previous:"Previous",next_page:"Next page",previous_page:"Previous Page"}),nlsProvider.setTranslations("ru-RU",{next:"Следующая",previous:"Предыдущая",next_page:"Следующая страница",previous_page:"Предыдущая страница"})}]);
//# sourceMappingURL=data:application/json;base64,
